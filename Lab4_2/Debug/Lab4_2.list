
Lab4_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008aec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08008c7c  08008c7c  00018c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008cd0  08008cd0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008cd0  08008cd0  00018cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008cd8  08008cd8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008cd8  08008cd8  00018cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008cdc  08008cdc  00018cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000844  20000090  08008d70  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008d4  08008d70  000208d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a4a3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039bb  00000000  00000000  0003a563  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013d8  00000000  00000000  0003df20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001250  00000000  00000000  0003f2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000252f9  00000000  00000000  00040548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012fbd  00000000  00000000  00065841  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d0e49  00000000  00000000  000787fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149647  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005664  00000000  00000000  001496c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c64 	.word	0x08008c64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008c64 	.word	0x08008c64

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <HAL_Init+0x40>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <HAL_Init+0x40>)
 800058a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800058e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <HAL_Init+0x40>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <HAL_Init+0x40>)
 8000596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800059a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800059c:	4b08      	ldr	r3, [pc, #32]	; (80005c0 <HAL_Init+0x40>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_Init+0x40>)
 80005a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005a8:	2003      	movs	r0, #3
 80005aa:	f000 fc83 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ae:	2000      	movs	r0, #0
 80005b0:	f000 f808 	bl	80005c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005b4:	f007 f996 	bl	80078e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005b8:	2300      	movs	r3, #0
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40023c00 	.word	0x40023c00

080005c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005cc:	4b12      	ldr	r3, [pc, #72]	; (8000618 <HAL_InitTick+0x54>)
 80005ce:	681a      	ldr	r2, [r3, #0]
 80005d0:	4b12      	ldr	r3, [pc, #72]	; (800061c <HAL_InitTick+0x58>)
 80005d2:	781b      	ldrb	r3, [r3, #0]
 80005d4:	4619      	mov	r1, r3
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	fbb3 f3f1 	udiv	r3, r3, r1
 80005de:	fbb2 f3f3 	udiv	r3, r2, r3
 80005e2:	4618      	mov	r0, r3
 80005e4:	f000 fc9b 	bl	8000f1e <HAL_SYSTICK_Config>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	e00e      	b.n	8000610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	2b0f      	cmp	r3, #15
 80005f6:	d80a      	bhi.n	800060e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005f8:	2200      	movs	r2, #0
 80005fa:	6879      	ldr	r1, [r7, #4]
 80005fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000600:	f000 fc63 	bl	8000eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000604:	4a06      	ldr	r2, [pc, #24]	; (8000620 <HAL_InitTick+0x5c>)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800060a:	2300      	movs	r3, #0
 800060c:	e000      	b.n	8000610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
}
 8000610:	4618      	mov	r0, r3
 8000612:	3708      	adds	r7, #8
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000028 	.word	0x20000028
 800061c:	20000004 	.word	0x20000004
 8000620:	20000000 	.word	0x20000000

08000624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000628:	4b06      	ldr	r3, [pc, #24]	; (8000644 <HAL_IncTick+0x20>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	461a      	mov	r2, r3
 800062e:	4b06      	ldr	r3, [pc, #24]	; (8000648 <HAL_IncTick+0x24>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4413      	add	r3, r2
 8000634:	4a04      	ldr	r2, [pc, #16]	; (8000648 <HAL_IncTick+0x24>)
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	20000004 	.word	0x20000004
 8000648:	200000c0 	.word	0x200000c0

0800064c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  return uwTick;
 8000650:	4b03      	ldr	r3, [pc, #12]	; (8000660 <HAL_GetTick+0x14>)
 8000652:	681b      	ldr	r3, [r3, #0]
}
 8000654:	4618      	mov	r0, r3
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	200000c0 	.word	0x200000c0

08000664 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800066c:	f7ff ffee 	bl	800064c <HAL_GetTick>
 8000670:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000676:	68fb      	ldr	r3, [r7, #12]
 8000678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800067c:	d005      	beq.n	800068a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <HAL_Delay+0x40>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	461a      	mov	r2, r3
 8000684:	68fb      	ldr	r3, [r7, #12]
 8000686:	4413      	add	r3, r2
 8000688:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800068a:	bf00      	nop
 800068c:	f7ff ffde 	bl	800064c <HAL_GetTick>
 8000690:	4602      	mov	r2, r0
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	68fa      	ldr	r2, [r7, #12]
 8000698:	429a      	cmp	r2, r3
 800069a:	d8f7      	bhi.n	800068c <HAL_Delay+0x28>
  {
  }
}
 800069c:	bf00      	nop
 800069e:	3710      	adds	r7, #16
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000004 	.word	0x20000004

080006a8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80006b0:	2300      	movs	r3, #0
 80006b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d101      	bne.n	80006be <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80006ba:	2301      	movs	r3, #1
 80006bc:	e033      	b.n	8000726 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d109      	bne.n	80006da <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f007 f934 	bl	8007934 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 0310 	and.w	r3, r3, #16
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d118      	bne.n	8000718 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	f043 0202 	orr.w	r2, r3, #2
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 fa0e 	bl	8000b1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	2200      	movs	r2, #0
 8000704:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070a:	f023 0303 	bic.w	r3, r3, #3
 800070e:	f043 0201 	orr.w	r2, r3, #1
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
 8000716:	e001      	b.n	800071c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
	...

08000730 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000742:	2b01      	cmp	r3, #1
 8000744:	d101      	bne.n	800074a <HAL_ADC_Start+0x1a>
 8000746:	2302      	movs	r3, #2
 8000748:	e0a5      	b.n	8000896 <HAL_ADC_Start+0x166>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2201      	movs	r2, #1
 800074e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	f003 0301 	and.w	r3, r3, #1
 800075c:	2b01      	cmp	r3, #1
 800075e:	d018      	beq.n	8000792 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	f042 0201 	orr.w	r2, r2, #1
 800076e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000770:	4b4c      	ldr	r3, [pc, #304]	; (80008a4 <HAL_ADC_Start+0x174>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a4c      	ldr	r2, [pc, #304]	; (80008a8 <HAL_ADC_Start+0x178>)
 8000776:	fba2 2303 	umull	r2, r3, r2, r3
 800077a:	0c9a      	lsrs	r2, r3, #18
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000784:	e002      	b.n	800078c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000786:	68bb      	ldr	r3, [r7, #8]
 8000788:	3b01      	subs	r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800078c:	68bb      	ldr	r3, [r7, #8]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d1f9      	bne.n	8000786 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	689b      	ldr	r3, [r3, #8]
 8000798:	f003 0301 	and.w	r3, r3, #1
 800079c:	2b01      	cmp	r3, #1
 800079e:	d179      	bne.n	8000894 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80007a8:	f023 0301 	bic.w	r3, r3, #1
 80007ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d007      	beq.n	80007d2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80007da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80007de:	d106      	bne.n	80007ee <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e4:	f023 0206 	bic.w	r2, r3, #6
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	645a      	str	r2, [r3, #68]	; 0x44
 80007ec:	e002      	b.n	80007f4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80007fc:	4b2b      	ldr	r3, [pc, #172]	; (80008ac <HAL_ADC_Start+0x17c>)
 80007fe:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000808:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f003 031f 	and.w	r3, r3, #31
 8000812:	2b00      	cmp	r3, #0
 8000814:	d12a      	bne.n	800086c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a25      	ldr	r2, [pc, #148]	; (80008b0 <HAL_ADC_Start+0x180>)
 800081c:	4293      	cmp	r3, r2
 800081e:	d015      	beq.n	800084c <HAL_ADC_Start+0x11c>
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4a23      	ldr	r2, [pc, #140]	; (80008b4 <HAL_ADC_Start+0x184>)
 8000826:	4293      	cmp	r3, r2
 8000828:	d105      	bne.n	8000836 <HAL_ADC_Start+0x106>
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_ADC_Start+0x17c>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	2b00      	cmp	r3, #0
 8000834:	d00a      	beq.n	800084c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_ADC_Start+0x188>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d129      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000840:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_ADC_Start+0x17c>)
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d823      	bhi.n	8000894 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	689b      	ldr	r3, [r3, #8]
 8000852:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000856:	2b00      	cmp	r3, #0
 8000858:	d11c      	bne.n	8000894 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	689a      	ldr	r2, [r3, #8]
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	e013      	b.n	8000894 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <HAL_ADC_Start+0x180>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10e      	bne.n	8000894 <HAL_ADC_Start+0x164>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000880:	2b00      	cmp	r3, #0
 8000882:	d107      	bne.n	8000894 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	689a      	ldr	r2, [r3, #8]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000892:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000894:	2300      	movs	r3, #0
}
 8000896:	4618      	mov	r0, r3
 8000898:	3714      	adds	r7, #20
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	20000028 	.word	0x20000028
 80008a8:	431bde83 	.word	0x431bde83
 80008ac:	40012300 	.word	0x40012300
 80008b0:	40012000 	.word	0x40012000
 80008b4:	40012100 	.word	0x40012100
 80008b8:	40012200 	.word	0x40012200

080008bc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80008e2:	2300      	movs	r3, #0
 80008e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d101      	bne.n	80008f4 <HAL_ADC_ConfigChannel+0x1c>
 80008f0:	2302      	movs	r3, #2
 80008f2:	e105      	b.n	8000b00 <HAL_ADC_ConfigChannel+0x228>
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	2201      	movs	r2, #1
 80008f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d925      	bls.n	8000950 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68d9      	ldr	r1, [r3, #12]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b29b      	uxth	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	3b1e      	subs	r3, #30
 800091a:	2207      	movs	r2, #7
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	43da      	mvns	r2, r3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	400a      	ands	r2, r1
 8000928:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	68d9      	ldr	r1, [r3, #12]
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	689a      	ldr	r2, [r3, #8]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	b29b      	uxth	r3, r3
 800093a:	4618      	mov	r0, r3
 800093c:	4603      	mov	r3, r0
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	4403      	add	r3, r0
 8000942:	3b1e      	subs	r3, #30
 8000944:	409a      	lsls	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	430a      	orrs	r2, r1
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	e022      	b.n	8000996 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6919      	ldr	r1, [r3, #16]
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	461a      	mov	r2, r3
 800095e:	4613      	mov	r3, r2
 8000960:	005b      	lsls	r3, r3, #1
 8000962:	4413      	add	r3, r2
 8000964:	2207      	movs	r2, #7
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	400a      	ands	r2, r1
 8000972:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6919      	ldr	r1, [r3, #16]
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	689a      	ldr	r2, [r3, #8]
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	b29b      	uxth	r3, r3
 8000984:	4618      	mov	r0, r3
 8000986:	4603      	mov	r3, r0
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	4403      	add	r3, r0
 800098c:	409a      	lsls	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	430a      	orrs	r2, r1
 8000994:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2b06      	cmp	r3, #6
 800099c:	d824      	bhi.n	80009e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	4613      	mov	r3, r2
 80009aa:	009b      	lsls	r3, r3, #2
 80009ac:	4413      	add	r3, r2
 80009ae:	3b05      	subs	r3, #5
 80009b0:	221f      	movs	r2, #31
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	400a      	ands	r2, r1
 80009be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	b29b      	uxth	r3, r3
 80009cc:	4618      	mov	r0, r3
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	685a      	ldr	r2, [r3, #4]
 80009d2:	4613      	mov	r3, r2
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	4413      	add	r3, r2
 80009d8:	3b05      	subs	r3, #5
 80009da:	fa00 f203 	lsl.w	r2, r0, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	430a      	orrs	r2, r1
 80009e4:	635a      	str	r2, [r3, #52]	; 0x34
 80009e6:	e04c      	b.n	8000a82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	2b0c      	cmp	r3, #12
 80009ee:	d824      	bhi.n	8000a3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685a      	ldr	r2, [r3, #4]
 80009fa:	4613      	mov	r3, r2
 80009fc:	009b      	lsls	r3, r3, #2
 80009fe:	4413      	add	r3, r2
 8000a00:	3b23      	subs	r3, #35	; 0x23
 8000a02:	221f      	movs	r2, #31
 8000a04:	fa02 f303 	lsl.w	r3, r2, r3
 8000a08:	43da      	mvns	r2, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	400a      	ands	r2, r1
 8000a10:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	4618      	mov	r0, r3
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	4613      	mov	r3, r2
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	4413      	add	r3, r2
 8000a2a:	3b23      	subs	r3, #35	; 0x23
 8000a2c:	fa00 f203 	lsl.w	r2, r0, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	430a      	orrs	r2, r1
 8000a36:	631a      	str	r2, [r3, #48]	; 0x30
 8000a38:	e023      	b.n	8000a82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	4613      	mov	r3, r2
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	4413      	add	r3, r2
 8000a4a:	3b41      	subs	r3, #65	; 0x41
 8000a4c:	221f      	movs	r2, #31
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	400a      	ands	r2, r1
 8000a5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	4618      	mov	r0, r3
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	685a      	ldr	r2, [r3, #4]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	3b41      	subs	r3, #65	; 0x41
 8000a76:	fa00 f203 	lsl.w	r2, r0, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	430a      	orrs	r2, r1
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a82:	4b22      	ldr	r3, [pc, #136]	; (8000b0c <HAL_ADC_ConfigChannel+0x234>)
 8000a84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a21      	ldr	r2, [pc, #132]	; (8000b10 <HAL_ADC_ConfigChannel+0x238>)
 8000a8c:	4293      	cmp	r3, r2
 8000a8e:	d109      	bne.n	8000aa4 <HAL_ADC_ConfigChannel+0x1cc>
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2b12      	cmp	r3, #18
 8000a96:	d105      	bne.n	8000aa4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a19      	ldr	r2, [pc, #100]	; (8000b10 <HAL_ADC_ConfigChannel+0x238>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d123      	bne.n	8000af6 <HAL_ADC_ConfigChannel+0x21e>
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b10      	cmp	r3, #16
 8000ab4:	d003      	beq.n	8000abe <HAL_ADC_ConfigChannel+0x1e6>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b11      	cmp	r3, #17
 8000abc:	d11b      	bne.n	8000af6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	2b10      	cmp	r3, #16
 8000ad0:	d111      	bne.n	8000af6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <HAL_ADC_ConfigChannel+0x23c>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <HAL_ADC_ConfigChannel+0x240>)
 8000ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8000adc:	0c9a      	lsrs	r2, r3, #18
 8000ade:	4613      	mov	r3, r2
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	4413      	add	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ae8:	e002      	b.n	8000af0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	3b01      	subs	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d1f9      	bne.n	8000aea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2200      	movs	r2, #0
 8000afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000afe:	2300      	movs	r3, #0
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3714      	adds	r7, #20
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	40012300 	.word	0x40012300
 8000b10:	40012000 	.word	0x40012000
 8000b14:	20000028 	.word	0x20000028
 8000b18:	431bde83 	.word	0x431bde83

08000b1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000b24:	4b79      	ldr	r3, [pc, #484]	; (8000d0c <ADC_Init+0x1f0>)
 8000b26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	685b      	ldr	r3, [r3, #4]
 8000b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	685a      	ldr	r2, [r3, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	431a      	orrs	r2, r3
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	6859      	ldr	r1, [r3, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	691b      	ldr	r3, [r3, #16]
 8000b5c:	021a      	lsls	r2, r3, #8
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685a      	ldr	r2, [r3, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6859      	ldr	r1, [r3, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689a      	ldr	r2, [r3, #8]
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	689a      	ldr	r2, [r3, #8]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	6899      	ldr	r1, [r3, #8]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	68da      	ldr	r2, [r3, #12]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	430a      	orrs	r2, r1
 8000ba8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bae:	4a58      	ldr	r2, [pc, #352]	; (8000d10 <ADC_Init+0x1f4>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d022      	beq.n	8000bfa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	689a      	ldr	r2, [r3, #8]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	6899      	ldr	r1, [r3, #8]
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	689a      	ldr	r2, [r3, #8]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000be4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	6899      	ldr	r1, [r3, #8]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	430a      	orrs	r2, r1
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	e00f      	b.n	8000c1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000c08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689a      	ldr	r2, [r3, #8]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f022 0202 	bic.w	r2, r2, #2
 8000c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	6899      	ldr	r1, [r3, #8]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	7e1b      	ldrb	r3, [r3, #24]
 8000c34:	005a      	lsls	r2, r3, #1
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	430a      	orrs	r2, r1
 8000c3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d01b      	beq.n	8000c80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	685a      	ldr	r2, [r3, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	685a      	ldr	r2, [r3, #4]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	6859      	ldr	r1, [r3, #4]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c72:	3b01      	subs	r3, #1
 8000c74:	035a      	lsls	r2, r3, #13
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	e007      	b.n	8000c90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	3b01      	subs	r3, #1
 8000cac:	051a      	lsls	r2, r3, #20
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689a      	ldr	r2, [r3, #8]
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000cc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	6899      	ldr	r1, [r3, #8]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000cd2:	025a      	lsls	r2, r3, #9
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	6899      	ldr	r1, [r3, #8]
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	695b      	ldr	r3, [r3, #20]
 8000cf6:	029a      	lsls	r2, r3, #10
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	609a      	str	r2, [r3, #8]
}
 8000d00:	bf00      	nop
 8000d02:	3714      	adds	r7, #20
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	40012300 	.word	0x40012300
 8000d10:	0f000001 	.word	0x0f000001

08000d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f003 0307 	and.w	r3, r3, #7
 8000d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d24:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d2a:	68ba      	ldr	r2, [r7, #8]
 8000d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d30:	4013      	ands	r3, r2
 8000d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x44>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d60:	4b04      	ldr	r3, [pc, #16]	; (8000d74 <__NVIC_GetPriorityGrouping+0x18>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	0a1b      	lsrs	r3, r3, #8
 8000d66:	f003 0307 	and.w	r3, r3, #7
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	e000ed00 	.word	0xe000ed00

08000d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	db0b      	blt.n	8000da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	f003 021f 	and.w	r2, r3, #31
 8000d90:	4907      	ldr	r1, [pc, #28]	; (8000db0 <__NVIC_EnableIRQ+0x38>)
 8000d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d96:	095b      	lsrs	r3, r3, #5
 8000d98:	2001      	movs	r0, #1
 8000d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000e100 	.word	0xe000e100

08000db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	6039      	str	r1, [r7, #0]
 8000dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	db0a      	blt.n	8000dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	490c      	ldr	r1, [pc, #48]	; (8000e00 <__NVIC_SetPriority+0x4c>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	0112      	lsls	r2, r2, #4
 8000dd4:	b2d2      	uxtb	r2, r2
 8000dd6:	440b      	add	r3, r1
 8000dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ddc:	e00a      	b.n	8000df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4908      	ldr	r1, [pc, #32]	; (8000e04 <__NVIC_SetPriority+0x50>)
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 030f 	and.w	r3, r3, #15
 8000dea:	3b04      	subs	r3, #4
 8000dec:	0112      	lsls	r2, r2, #4
 8000dee:	b2d2      	uxtb	r2, r2
 8000df0:	440b      	add	r3, r1
 8000df2:	761a      	strb	r2, [r3, #24]
}
 8000df4:	bf00      	nop
 8000df6:	370c      	adds	r7, #12
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000e100 	.word	0xe000e100
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b089      	sub	sp, #36	; 0x24
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	60f8      	str	r0, [r7, #12]
 8000e10:	60b9      	str	r1, [r7, #8]
 8000e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f003 0307 	and.w	r3, r3, #7
 8000e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	f1c3 0307 	rsb	r3, r3, #7
 8000e22:	2b04      	cmp	r3, #4
 8000e24:	bf28      	it	cs
 8000e26:	2304      	movcs	r3, #4
 8000e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3304      	adds	r3, #4
 8000e2e:	2b06      	cmp	r3, #6
 8000e30:	d902      	bls.n	8000e38 <NVIC_EncodePriority+0x30>
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3b03      	subs	r3, #3
 8000e36:	e000      	b.n	8000e3a <NVIC_EncodePriority+0x32>
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	fa02 f303 	lsl.w	r3, r2, r3
 8000e46:	43da      	mvns	r2, r3
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	401a      	ands	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	43d9      	mvns	r1, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	4313      	orrs	r3, r2
         );
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3724      	adds	r7, #36	; 0x24
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
	...

08000e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e80:	d301      	bcc.n	8000e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00f      	b.n	8000ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e86:	4a0a      	ldr	r2, [pc, #40]	; (8000eb0 <SysTick_Config+0x40>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e8e:	210f      	movs	r1, #15
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f7ff ff8e 	bl	8000db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <SysTick_Config+0x40>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e9e:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <SysTick_Config+0x40>)
 8000ea0:	2207      	movs	r2, #7
 8000ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	e000e010 	.word	0xe000e010

08000eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ff29 	bl	8000d14 <__NVIC_SetPriorityGrouping>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b086      	sub	sp, #24
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	60b9      	str	r1, [r7, #8]
 8000ed4:	607a      	str	r2, [r7, #4]
 8000ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000edc:	f7ff ff3e 	bl	8000d5c <__NVIC_GetPriorityGrouping>
 8000ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	68b9      	ldr	r1, [r7, #8]
 8000ee6:	6978      	ldr	r0, [r7, #20]
 8000ee8:	f7ff ff8e 	bl	8000e08 <NVIC_EncodePriority>
 8000eec:	4602      	mov	r2, r0
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	4611      	mov	r1, r2
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff5d 	bl	8000db4 <__NVIC_SetPriority>
}
 8000efa:	bf00      	nop
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff ff31 	bl	8000d78 <__NVIC_EnableIRQ>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b082      	sub	sp, #8
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ffa2 	bl	8000e70 <SysTick_Config>
 8000f2c:	4603      	mov	r3, r0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
	...

08000f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b089      	sub	sp, #36	; 0x24
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
 8000f52:	e16b      	b.n	800122c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f54:	2201      	movs	r2, #1
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	f040 815a 	bne.w	8001226 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	d003      	beq.n	8000f82 <HAL_GPIO_Init+0x4a>
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b12      	cmp	r3, #18
 8000f80:	d123      	bne.n	8000fca <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	08da      	lsrs	r2, r3, #3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3208      	adds	r2, #8
 8000f8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f003 0307 	and.w	r3, r3, #7
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	220f      	movs	r2, #15
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	691a      	ldr	r2, [r3, #16]
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	f003 0307 	and.w	r3, r3, #7
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	08da      	lsrs	r2, r3, #3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3208      	adds	r2, #8
 8000fc4:	69b9      	ldr	r1, [r7, #24]
 8000fc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	005b      	lsls	r3, r3, #1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0203 	and.w	r2, r3, #3
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	2b01      	cmp	r3, #1
 8001004:	d00b      	beq.n	800101e <HAL_GPIO_Init+0xe6>
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b02      	cmp	r3, #2
 800100c:	d007      	beq.n	800101e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001012:	2b11      	cmp	r3, #17
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b12      	cmp	r3, #18
 800101c:	d130      	bne.n	8001080 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	2203      	movs	r2, #3
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	68da      	ldr	r2, [r3, #12]
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001054:	2201      	movs	r2, #1
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	091b      	lsrs	r3, r3, #4
 800106a:	f003 0201 	and.w	r2, r3, #1
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	2203      	movs	r2, #3
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	43db      	mvns	r3, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4013      	ands	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f000 80b4 	beq.w	8001226 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b5f      	ldr	r3, [pc, #380]	; (8001240 <HAL_GPIO_Init+0x308>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	4a5e      	ldr	r2, [pc, #376]	; (8001240 <HAL_GPIO_Init+0x308>)
 80010c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010cc:	6453      	str	r3, [r2, #68]	; 0x44
 80010ce:	4b5c      	ldr	r3, [pc, #368]	; (8001240 <HAL_GPIO_Init+0x308>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010da:	4a5a      	ldr	r2, [pc, #360]	; (8001244 <HAL_GPIO_Init+0x30c>)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	089b      	lsrs	r3, r3, #2
 80010e0:	3302      	adds	r3, #2
 80010e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	220f      	movs	r2, #15
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43db      	mvns	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	4013      	ands	r3, r2
 80010fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a51      	ldr	r2, [pc, #324]	; (8001248 <HAL_GPIO_Init+0x310>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d02b      	beq.n	800115e <HAL_GPIO_Init+0x226>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a50      	ldr	r2, [pc, #320]	; (800124c <HAL_GPIO_Init+0x314>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d025      	beq.n	800115a <HAL_GPIO_Init+0x222>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a4f      	ldr	r2, [pc, #316]	; (8001250 <HAL_GPIO_Init+0x318>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d01f      	beq.n	8001156 <HAL_GPIO_Init+0x21e>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a4e      	ldr	r2, [pc, #312]	; (8001254 <HAL_GPIO_Init+0x31c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x21a>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a4d      	ldr	r2, [pc, #308]	; (8001258 <HAL_GPIO_Init+0x320>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x216>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4c      	ldr	r2, [pc, #304]	; (800125c <HAL_GPIO_Init+0x324>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x212>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4b      	ldr	r2, [pc, #300]	; (8001260 <HAL_GPIO_Init+0x328>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x20e>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4a      	ldr	r2, [pc, #296]	; (8001264 <HAL_GPIO_Init+0x32c>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x20a>
 800113e:	2307      	movs	r3, #7
 8001140:	e00e      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001142:	2308      	movs	r3, #8
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001146:	2306      	movs	r3, #6
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x228>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x228>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4934      	ldr	r1, [pc, #208]	; (8001244 <HAL_GPIO_Init+0x30c>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800117e:	4b3a      	ldr	r3, [pc, #232]	; (8001268 <HAL_GPIO_Init+0x330>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011a2:	4a31      	ldr	r2, [pc, #196]	; (8001268 <HAL_GPIO_Init+0x330>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011a8:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_GPIO_Init+0x330>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011cc:	4a26      	ldr	r2, [pc, #152]	; (8001268 <HAL_GPIO_Init+0x330>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011d2:	4b25      	ldr	r3, [pc, #148]	; (8001268 <HAL_GPIO_Init+0x330>)
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011f6:	4a1c      	ldr	r2, [pc, #112]	; (8001268 <HAL_GPIO_Init+0x330>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <HAL_GPIO_Init+0x330>)
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001220:	4a11      	ldr	r2, [pc, #68]	; (8001268 <HAL_GPIO_Init+0x330>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae90 	bls.w	8000f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	3724      	adds	r7, #36	; 0x24
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	40023800 	.word	0x40023800
 8001244:	40013800 	.word	0x40013800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800
 8001254:	40020c00 	.word	0x40020c00
 8001258:	40021000 	.word	0x40021000
 800125c:	40021400 	.word	0x40021400
 8001260:	40021800 	.word	0x40021800
 8001264:	40021c00 	.word	0x40021c00
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800129e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012a0:	b08f      	sub	sp, #60	; 0x3c
 80012a2:	af0a      	add	r7, sp, #40	; 0x28
 80012a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d101      	bne.n	80012b0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e054      	b.n	800135a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d106      	bne.n	80012d0 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f006 fdae 	bl	8007e2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2203      	movs	r2, #3
 80012d4:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f003 fb82 	bl	80049f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	687e      	ldr	r6, [r7, #4]
 80012fc:	466d      	mov	r5, sp
 80012fe:	f106 0410 	add.w	r4, r6, #16
 8001302:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001304:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800130e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001312:	1d33      	adds	r3, r6, #4
 8001314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001316:	6838      	ldr	r0, [r7, #0]
 8001318:	f003 fafc 	bl	8004914 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	4618      	mov	r0, r3
 8001324:	f003 fb79 	bl	8004a1a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	687e      	ldr	r6, [r7, #4]
 8001330:	466d      	mov	r5, sp
 8001332:	f106 0410 	add.w	r4, r6, #16
 8001336:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001338:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800133c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800133e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001342:	e885 0003 	stmia.w	r5, {r0, r1}
 8001346:	1d33      	adds	r3, r6, #4
 8001348:	cb0e      	ldmia	r3, {r1, r2, r3}
 800134a:	6838      	ldr	r0, [r7, #0]
 800134c:	f003 fc8c 	bl	8004c68 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001362 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001362:	b590      	push	{r4, r7, lr}
 8001364:	b089      	sub	sp, #36	; 0x24
 8001366:	af04      	add	r7, sp, #16
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	4608      	mov	r0, r1
 800136c:	4611      	mov	r1, r2
 800136e:	461a      	mov	r2, r3
 8001370:	4603      	mov	r3, r0
 8001372:	70fb      	strb	r3, [r7, #3]
 8001374:	460b      	mov	r3, r1
 8001376:	70bb      	strb	r3, [r7, #2]
 8001378:	4613      	mov	r3, r2
 800137a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_HCD_HC_Init+0x28>
 8001386:	2302      	movs	r3, #2
 8001388:	e07f      	b.n	800148a <HAL_HCD_HC_Init+0x128>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2201      	movs	r2, #1
 800138e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8001392:	78fa      	ldrb	r2, [r7, #3]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	4413      	add	r3, r2
 800139c:	00db      	lsls	r3, r3, #3
 800139e:	440b      	add	r3, r1
 80013a0:	333d      	adds	r3, #61	; 0x3d
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80013a6:	78fa      	ldrb	r2, [r7, #3]
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3338      	adds	r3, #56	; 0x38
 80013b6:	787a      	ldrb	r2, [r7, #1]
 80013b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80013ba:	78fa      	ldrb	r2, [r7, #3]
 80013bc:	6879      	ldr	r1, [r7, #4]
 80013be:	4613      	mov	r3, r2
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	440b      	add	r3, r1
 80013c8:	3340      	adds	r3, #64	; 0x40
 80013ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013cc:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80013ce:	78fa      	ldrb	r2, [r7, #3]
 80013d0:	6879      	ldr	r1, [r7, #4]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	440b      	add	r3, r1
 80013dc:	3339      	adds	r3, #57	; 0x39
 80013de:	78fa      	ldrb	r2, [r7, #3]
 80013e0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80013e2:	78fa      	ldrb	r2, [r7, #3]
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	4613      	mov	r3, r2
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	440b      	add	r3, r1
 80013f0:	333f      	adds	r3, #63	; 0x3f
 80013f2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80013f6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013f8:	78fa      	ldrb	r2, [r7, #3]
 80013fa:	78bb      	ldrb	r3, [r7, #2]
 80013fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001400:	b2d8      	uxtb	r0, r3
 8001402:	6879      	ldr	r1, [r7, #4]
 8001404:	4613      	mov	r3, r2
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	440b      	add	r3, r1
 800140e:	333a      	adds	r3, #58	; 0x3a
 8001410:	4602      	mov	r2, r0
 8001412:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001414:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001418:	2b00      	cmp	r3, #0
 800141a:	da0a      	bge.n	8001432 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800141c:	78fa      	ldrb	r2, [r7, #3]
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	440b      	add	r3, r1
 800142a:	333b      	adds	r3, #59	; 0x3b
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]
 8001430:	e009      	b.n	8001446 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001432:	78fa      	ldrb	r2, [r7, #3]
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	440b      	add	r3, r1
 8001440:	333b      	adds	r3, #59	; 0x3b
 8001442:	2200      	movs	r2, #0
 8001444:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001446:	78fa      	ldrb	r2, [r7, #3]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	333c      	adds	r3, #60	; 0x3c
 8001456:	f897 2020 	ldrb.w	r2, [r7, #32]
 800145a:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	787c      	ldrb	r4, [r7, #1]
 8001462:	78ba      	ldrb	r2, [r7, #2]
 8001464:	78f9      	ldrb	r1, [r7, #3]
 8001466:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800146e:	9301      	str	r3, [sp, #4]
 8001470:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	4623      	mov	r3, r4
 8001478:	f003 fd78 	bl	8004f6c <USB_HC_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8001488:	7bfb      	ldrb	r3, [r7, #15]
}
 800148a:	4618      	mov	r0, r3
 800148c:	3714      	adds	r7, #20
 800148e:	46bd      	mov	sp, r7
 8001490:	bd90      	pop	{r4, r7, pc}

08001492 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d101      	bne.n	80014b0 <HAL_HCD_HC_Halt+0x1e>
 80014ac:	2302      	movs	r3, #2
 80014ae:	e00f      	b.n	80014d0 <HAL_HCD_HC_Halt+0x3e>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2201      	movs	r2, #1
 80014b4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	78fa      	ldrb	r2, [r7, #3]
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f003 ffb2 	bl	800542a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	4608      	mov	r0, r1
 80014e2:	4611      	mov	r1, r2
 80014e4:	461a      	mov	r2, r3
 80014e6:	4603      	mov	r3, r0
 80014e8:	70fb      	strb	r3, [r7, #3]
 80014ea:	460b      	mov	r3, r1
 80014ec:	70bb      	strb	r3, [r7, #2]
 80014ee:	4613      	mov	r3, r2
 80014f0:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 80014f2:	78fa      	ldrb	r2, [r7, #3]
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4613      	mov	r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	4413      	add	r3, r2
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	440b      	add	r3, r1
 8001500:	333b      	adds	r3, #59	; 0x3b
 8001502:	78ba      	ldrb	r2, [r7, #2]
 8001504:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001506:	78fa      	ldrb	r2, [r7, #3]
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	333f      	adds	r3, #63	; 0x3f
 8001516:	787a      	ldrb	r2, [r7, #1]
 8001518:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800151a:	7c3b      	ldrb	r3, [r7, #16]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10a      	bne.n	8001536 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001520:	78fa      	ldrb	r2, [r7, #3]
 8001522:	6879      	ldr	r1, [r7, #4]
 8001524:	4613      	mov	r3, r2
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	4413      	add	r3, r2
 800152a:	00db      	lsls	r3, r3, #3
 800152c:	440b      	add	r3, r1
 800152e:	3342      	adds	r3, #66	; 0x42
 8001530:	2203      	movs	r2, #3
 8001532:	701a      	strb	r2, [r3, #0]
 8001534:	e009      	b.n	800154a <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001536:	78fa      	ldrb	r2, [r7, #3]
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	4413      	add	r3, r2
 8001540:	00db      	lsls	r3, r3, #3
 8001542:	440b      	add	r3, r1
 8001544:	3342      	adds	r3, #66	; 0x42
 8001546:	2202      	movs	r2, #2
 8001548:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800154a:	787b      	ldrb	r3, [r7, #1]
 800154c:	2b03      	cmp	r3, #3
 800154e:	f200 80d6 	bhi.w	80016fe <HAL_HCD_HC_SubmitRequest+0x226>
 8001552:	a201      	add	r2, pc, #4	; (adr r2, 8001558 <HAL_HCD_HC_SubmitRequest+0x80>)
 8001554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001558:	08001569 	.word	0x08001569
 800155c:	080016e9 	.word	0x080016e9
 8001560:	080015d5 	.word	0x080015d5
 8001564:	0800165f 	.word	0x0800165f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001568:	7c3b      	ldrb	r3, [r7, #16]
 800156a:	2b01      	cmp	r3, #1
 800156c:	f040 80c9 	bne.w	8001702 <HAL_HCD_HC_SubmitRequest+0x22a>
 8001570:	78bb      	ldrb	r3, [r7, #2]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f040 80c5 	bne.w	8001702 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8001578:	8b3b      	ldrh	r3, [r7, #24]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d109      	bne.n	8001592 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800157e:	78fa      	ldrb	r2, [r7, #3]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	3351      	adds	r3, #81	; 0x51
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001592:	78fa      	ldrb	r2, [r7, #3]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	3351      	adds	r3, #81	; 0x51
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10a      	bne.n	80015be <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4413      	add	r3, r2
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	440b      	add	r3, r1
 80015b6:	3342      	adds	r3, #66	; 0x42
 80015b8:	2200      	movs	r2, #0
 80015ba:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80015bc:	e0a1      	b.n	8001702 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	4413      	add	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	440b      	add	r3, r1
 80015cc:	3342      	adds	r3, #66	; 0x42
 80015ce:	2202      	movs	r2, #2
 80015d0:	701a      	strb	r2, [r3, #0]
      break;
 80015d2:	e096      	b.n	8001702 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80015d4:	78bb      	ldrb	r3, [r7, #2]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d120      	bne.n	800161c <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80015da:	78fa      	ldrb	r2, [r7, #3]
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	00db      	lsls	r3, r3, #3
 80015e6:	440b      	add	r3, r1
 80015e8:	3351      	adds	r3, #81	; 0x51
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10a      	bne.n	8001606 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015f0:	78fa      	ldrb	r2, [r7, #3]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	4413      	add	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	440b      	add	r3, r1
 80015fe:	3342      	adds	r3, #66	; 0x42
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001604:	e07e      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001606:	78fa      	ldrb	r2, [r7, #3]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4413      	add	r3, r2
 8001610:	00db      	lsls	r3, r3, #3
 8001612:	440b      	add	r3, r1
 8001614:	3342      	adds	r3, #66	; 0x42
 8001616:	2202      	movs	r2, #2
 8001618:	701a      	strb	r2, [r3, #0]
      break;
 800161a:	e073      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	440b      	add	r3, r1
 800162a:	3350      	adds	r3, #80	; 0x50
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10a      	bne.n	8001648 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001632:	78fa      	ldrb	r2, [r7, #3]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	4413      	add	r3, r2
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	440b      	add	r3, r1
 8001640:	3342      	adds	r3, #66	; 0x42
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
      break;
 8001646:	e05d      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001648:	78fa      	ldrb	r2, [r7, #3]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	4413      	add	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	440b      	add	r3, r1
 8001656:	3342      	adds	r3, #66	; 0x42
 8001658:	2202      	movs	r2, #2
 800165a:	701a      	strb	r2, [r3, #0]
      break;
 800165c:	e052      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d120      	bne.n	80016a6 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001664:	78fa      	ldrb	r2, [r7, #3]
 8001666:	6879      	ldr	r1, [r7, #4]
 8001668:	4613      	mov	r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	4413      	add	r3, r2
 800166e:	00db      	lsls	r3, r3, #3
 8001670:	440b      	add	r3, r1
 8001672:	3351      	adds	r3, #81	; 0x51
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d10a      	bne.n	8001690 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	440b      	add	r3, r1
 8001688:	3342      	adds	r3, #66	; 0x42
 800168a:	2200      	movs	r2, #0
 800168c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800168e:	e039      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001690:	78fa      	ldrb	r2, [r7, #3]
 8001692:	6879      	ldr	r1, [r7, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	3342      	adds	r3, #66	; 0x42
 80016a0:	2202      	movs	r2, #2
 80016a2:	701a      	strb	r2, [r3, #0]
      break;
 80016a4:	e02e      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80016a6:	78fa      	ldrb	r2, [r7, #3]
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4613      	mov	r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	4413      	add	r3, r2
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	440b      	add	r3, r1
 80016b4:	3350      	adds	r3, #80	; 0x50
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d10a      	bne.n	80016d2 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016bc:	78fa      	ldrb	r2, [r7, #3]
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	4613      	mov	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	4413      	add	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	440b      	add	r3, r1
 80016ca:	3342      	adds	r3, #66	; 0x42
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
      break;
 80016d0:	e018      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016d2:	78fa      	ldrb	r2, [r7, #3]
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	4613      	mov	r3, r2
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	00db      	lsls	r3, r3, #3
 80016de:	440b      	add	r3, r1
 80016e0:	3342      	adds	r3, #66	; 0x42
 80016e2:	2202      	movs	r2, #2
 80016e4:	701a      	strb	r2, [r3, #0]
      break;
 80016e6:	e00d      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4413      	add	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	440b      	add	r3, r1
 80016f6:	3342      	adds	r3, #66	; 0x42
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
      break;
 80016fc:	e002      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 80016fe:	bf00      	nop
 8001700:	e000      	b.n	8001704 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8001702:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001704:	78fa      	ldrb	r2, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	440b      	add	r3, r1
 8001712:	3344      	adds	r3, #68	; 0x44
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001718:	78fa      	ldrb	r2, [r7, #3]
 800171a:	8b39      	ldrh	r1, [r7, #24]
 800171c:	6878      	ldr	r0, [r7, #4]
 800171e:	4613      	mov	r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4413      	add	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4403      	add	r3, r0
 8001728:	3348      	adds	r3, #72	; 0x48
 800172a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	440b      	add	r3, r1
 800173a:	335c      	adds	r3, #92	; 0x5c
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001740:	78fa      	ldrb	r2, [r7, #3]
 8001742:	6879      	ldr	r1, [r7, #4]
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	440b      	add	r3, r1
 800174e:	334c      	adds	r3, #76	; 0x4c
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	440b      	add	r3, r1
 8001762:	3339      	adds	r3, #57	; 0x39
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	440b      	add	r3, r1
 8001776:	335d      	adds	r3, #93	; 0x5d
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6818      	ldr	r0, [r3, #0]
 8001780:	78fa      	ldrb	r2, [r7, #3]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	00db      	lsls	r3, r3, #3
 800178a:	3338      	adds	r3, #56	; 0x38
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	18d1      	adds	r1, r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	b2db      	uxtb	r3, r3
 8001796:	461a      	mov	r2, r3
 8001798:	f003 fcf2 	bl	8005180 <USB_HC_StartXfer>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3708      	adds	r7, #8
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop

080017a8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 fa0f 	bl	8004be2 <USB_GetMode>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	f040 80f1 	bne.w	80019ae <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 f9f3 	bl	8004bbc <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80e7 	beq.w	80019ac <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 f9ea 	bl	8004bbc <USB_ReadInterrupts>
 80017e8:	4603      	mov	r3, r0
 80017ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017f2:	d104      	bne.n	80017fe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80017fc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f003 f9da 	bl	8004bbc <USB_ReadInterrupts>
 8001808:	4603      	mov	r3, r0
 800180a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800180e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001812:	d104      	bne.n	800181e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800181c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f003 f9ca 	bl	8004bbc <USB_ReadInterrupts>
 8001828:	4603      	mov	r3, r0
 800182a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800182e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001832:	d104      	bne.n	800183e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800183c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f003 f9ba 	bl	8004bbc <USB_ReadInterrupts>
 8001848:	4603      	mov	r3, r0
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b02      	cmp	r3, #2
 8001850:	d103      	bne.n	800185a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2202      	movs	r2, #2
 8001858:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f003 f9ac 	bl	8004bbc <USB_ReadInterrupts>
 8001864:	4603      	mov	r3, r0
 8001866:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800186a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800186e:	d117      	bne.n	80018a0 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800187e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001882:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f006 fb4f 	bl	8007f28 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	2101      	movs	r1, #1
 8001890:	4618      	mov	r0, r3
 8001892:	f003 faa5 	bl	8004de0 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800189e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f003 f989 	bl	8004bbc <USB_ReadInterrupts>
 80018aa:	4603      	mov	r3, r0
 80018ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018b4:	d102      	bne.n	80018bc <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f001 f8c8 	bl	8002a4c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f003 f97b 	bl	8004bbc <USB_ReadInterrupts>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f003 0308 	and.w	r3, r3, #8
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d106      	bne.n	80018de <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f006 fb0d 	bl	8007ef0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2208      	movs	r2, #8
 80018dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f003 f96a 	bl	8004bbc <USB_ReadInterrupts>
 80018e8:	4603      	mov	r3, r0
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018f2:	d138      	bne.n	8001966 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f003 fd85 	bl	8005408 <USB_HC_ReadInterrupt>
 80018fe:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e025      	b.n	8001952 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 030f 	and.w	r3, r3, #15
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	fa22 f303 	lsr.w	r3, r2, r3
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	d018      	beq.n	800194c <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4413      	add	r3, r2
 8001922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800192c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001930:	d106      	bne.n	8001940 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	4619      	mov	r1, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f000 f8cf 	bl	8001adc <HCD_HC_IN_IRQHandler>
 800193e:	e005      	b.n	800194c <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 fc5f 	bl	800220a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3301      	adds	r3, #1
 8001950:	617b      	str	r3, [r7, #20]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	429a      	cmp	r2, r3
 800195a:	d3d4      	bcc.n	8001906 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f926 	bl	8004bbc <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b10      	cmp	r3, #16
 8001978:	d101      	bne.n	800197e <HAL_HCD_IRQHandler+0x1d6>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_HCD_IRQHandler+0x1d8>
 800197e:	2300      	movs	r3, #0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d014      	beq.n	80019ae <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699a      	ldr	r2, [r3, #24]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f022 0210 	bic.w	r2, r2, #16
 8001992:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f000 ffad 	bl	80028f4 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699a      	ldr	r2, [r3, #24]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f042 0210 	orr.w	r2, r2, #16
 80019a8:	619a      	str	r2, [r3, #24]
 80019aa:	e000      	b.n	80019ae <HAL_HCD_IRQHandler+0x206>
      return;
 80019ac:	bf00      	nop
    }
  }
}
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d101      	bne.n	80019ca <HAL_HCD_Start+0x16>
 80019c6:	2302      	movs	r3, #2
 80019c8:	e013      	b.n	80019f2 <HAL_HCD_Start+0x3e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2201      	movs	r2, #1
 80019ce:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f002 fffd 	bl	80049d6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f003 fa60 	bl	8004ea8 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d101      	bne.n	8001a10 <HAL_HCD_Stop+0x16>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e00d      	b.n	8001a2c <HAL_HCD_Stop+0x32>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 fe3f 	bl	80056a0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3708      	adds	r7, #8
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f003 fa07 	bl	8004e54 <USB_ResetPort>
 8001a46:	4603      	mov	r3, r0
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	460b      	mov	r3, r1
 8001a5a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	335c      	adds	r3, #92	; 0x5c
 8001a6c:	781b      	ldrb	r3, [r3, #0]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001a86:	78fa      	ldrb	r2, [r7, #3]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	4413      	add	r3, r2
 8001a90:	00db      	lsls	r3, r3, #3
 8001a92:	440b      	add	r3, r1
 8001a94:	334c      	adds	r3, #76	; 0x4c
 8001a96:	681b      	ldr	r3, [r3, #0]
}
 8001a98:	4618      	mov	r0, r3
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f003 fa49 	bl	8004f48 <USB_GetCurrentFrame>
 8001ab6:	4603      	mov	r3, r0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f003 fa24 	bl	8004f1a <USB_GetHostSpeed>
 8001ad2:	4603      	mov	r3, r0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	015a      	lsls	r2, r3, #5
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	4413      	add	r3, r2
 8001afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b04      	cmp	r3, #4
 8001b0a:	d119      	bne.n	8001b40 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	015a      	lsls	r2, r3, #5
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4413      	add	r3, r2
 8001b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b18:	461a      	mov	r2, r3
 8001b1a:	2304      	movs	r3, #4
 8001b1c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	68fa      	ldr	r2, [r7, #12]
 8001b2e:	0151      	lsls	r1, r2, #5
 8001b30:	693a      	ldr	r2, [r7, #16]
 8001b32:	440a      	add	r2, r1
 8001b34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b38:	f043 0302 	orr.w	r3, r3, #2
 8001b3c:	60d3      	str	r3, [r2, #12]
 8001b3e:	e095      	b.n	8001c6c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	015a      	lsls	r2, r3, #5
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	4413      	add	r3, r2
 8001b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0320 	and.w	r3, r3, #32
 8001b52:	2b20      	cmp	r3, #32
 8001b54:	d109      	bne.n	8001b6a <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	015a      	lsls	r2, r3, #5
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b62:	461a      	mov	r2, r3
 8001b64:	2320      	movs	r3, #32
 8001b66:	6093      	str	r3, [r2, #8]
 8001b68:	e080      	b.n	8001c6c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	015a      	lsls	r2, r3, #5
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	4413      	add	r3, r2
 8001b72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 0308 	and.w	r3, r3, #8
 8001b7c:	2b08      	cmp	r3, #8
 8001b7e:	d134      	bne.n	8001bea <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	015a      	lsls	r2, r3, #5
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	4413      	add	r3, r2
 8001b88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	68fa      	ldr	r2, [r7, #12]
 8001b90:	0151      	lsls	r1, r2, #5
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	440a      	add	r2, r1
 8001b96:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b9a:	f043 0302 	orr.w	r3, r3, #2
 8001b9e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	68fa      	ldr	r2, [r7, #12]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	4413      	add	r3, r2
 8001baa:	00db      	lsls	r3, r3, #3
 8001bac:	440b      	add	r3, r1
 8001bae:	335d      	adds	r3, #93	; 0x5d
 8001bb0:	2205      	movs	r2, #5
 8001bb2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	015a      	lsls	r2, r3, #5
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4413      	add	r3, r2
 8001bbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2310      	movs	r3, #16
 8001bc4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	015a      	lsls	r2, r3, #5
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4413      	add	r3, r2
 8001bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	b2d2      	uxtb	r2, r2
 8001be0:	4611      	mov	r1, r2
 8001be2:	4618      	mov	r0, r3
 8001be4:	f003 fc21 	bl	800542a <USB_HC_Halt>
 8001be8:	e040      	b.n	8001c6c <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	015a      	lsls	r2, r3, #5
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c00:	d134      	bne.n	8001c6c <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	0151      	lsls	r1, r2, #5
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	440a      	add	r2, r1
 8001c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fbfc 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	015a      	lsls	r2, r3, #5
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	4413      	add	r3, r2
 8001c3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c3e:	461a      	mov	r2, r3
 8001c40:	2310      	movs	r3, #16
 8001c42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	440b      	add	r3, r1
 8001c52:	335d      	adds	r3, #93	; 0x5d
 8001c54:	2208      	movs	r2, #8
 8001c56:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	015a      	lsls	r2, r3, #5
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	4413      	add	r3, r2
 8001c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c64:	461a      	mov	r2, r3
 8001c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c6a:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	015a      	lsls	r2, r3, #5
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	4413      	add	r3, r2
 8001c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c82:	d122      	bne.n	8001cca <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	015a      	lsls	r2, r3, #5
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	0151      	lsls	r1, r2, #5
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	440a      	add	r2, r1
 8001c9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c9e:	f043 0302 	orr.w	r3, r3, #2
 8001ca2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f003 fbbb 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	015a      	lsls	r2, r3, #5
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4413      	add	r3, r2
 8001cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cc6:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8001cc8:	e29b      	b.n	8002202 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	f040 80c1 	bne.w	8001e64 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d01b      	beq.n	8001d22 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3348      	adds	r3, #72	; 0x48
 8001cfa:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	0159      	lsls	r1, r3, #5
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	440b      	add	r3, r1
 8001d04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001d0e:	1ad1      	subs	r1, r2, r3
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4403      	add	r3, r0
 8001d1e:	334c      	adds	r3, #76	; 0x4c
 8001d20:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4613      	mov	r3, r2
 8001d28:	009b      	lsls	r3, r3, #2
 8001d2a:	4413      	add	r3, r2
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	440b      	add	r3, r1
 8001d30:	335d      	adds	r3, #93	; 0x5d
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	440b      	add	r3, r1
 8001d44:	3358      	adds	r3, #88	; 0x58
 8001d46:	2200      	movs	r2, #0
 8001d48:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	015a      	lsls	r2, r3, #5
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	4413      	add	r3, r2
 8001d52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d56:	461a      	mov	r2, r3
 8001d58:	2301      	movs	r3, #1
 8001d5a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d5c:	6879      	ldr	r1, [r7, #4]
 8001d5e:	68fa      	ldr	r2, [r7, #12]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	440b      	add	r3, r1
 8001d6a:	333f      	adds	r3, #63	; 0x3f
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d00a      	beq.n	8001d88 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	68fa      	ldr	r2, [r7, #12]
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	440b      	add	r3, r1
 8001d80:	333f      	adds	r3, #63	; 0x3f
 8001d82:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d121      	bne.n	8001dcc <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	015a      	lsls	r2, r3, #5
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	0151      	lsls	r1, r2, #5
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	440a      	add	r2, r1
 8001d9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001da2:	f043 0302 	orr.w	r3, r3, #2
 8001da6:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	4611      	mov	r1, r2
 8001db2:	4618      	mov	r0, r3
 8001db4:	f003 fb39 	bl	800542a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	015a      	lsls	r2, r3, #5
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	6093      	str	r3, [r2, #8]
 8001dca:	e034      	b.n	8001e36 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001dcc:	6879      	ldr	r1, [r7, #4]
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	333f      	adds	r3, #63	; 0x3f
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d129      	bne.n	8001e36 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	68fa      	ldr	r2, [r7, #12]
 8001df2:	0151      	lsls	r1, r2, #5
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	440a      	add	r2, r1
 8001df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dfc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001e00:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	335c      	adds	r3, #92	; 0x5c
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	b2d8      	uxtb	r0, r3
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00db      	lsls	r3, r3, #3
 8001e26:	440b      	add	r3, r1
 8001e28:	335c      	adds	r3, #92	; 0x5c
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4601      	mov	r1, r0
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f006 f887 	bl	8007f44 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001e36:	6879      	ldr	r1, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3350      	adds	r3, #80	; 0x50
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	f083 0301 	eor.w	r3, r3, #1
 8001e4c:	b2d8      	uxtb	r0, r3
 8001e4e:	6879      	ldr	r1, [r7, #4]
 8001e50:	68fa      	ldr	r2, [r7, #12]
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	00db      	lsls	r3, r3, #3
 8001e5a:	440b      	add	r3, r1
 8001e5c:	3350      	adds	r3, #80	; 0x50
 8001e5e:	4602      	mov	r2, r0
 8001e60:	701a      	strb	r2, [r3, #0]
}
 8001e62:	e1ce      	b.n	8002202 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	015a      	lsls	r2, r3, #5
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	f040 80f1 	bne.w	800205e <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	015a      	lsls	r2, r3, #5
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	4413      	add	r3, r2
 8001e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	0151      	lsls	r1, r2, #5
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	440a      	add	r2, r1
 8001e92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e96:	f023 0302 	bic.w	r3, r3, #2
 8001e9a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	68fa      	ldr	r2, [r7, #12]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	335d      	adds	r3, #93	; 0x5d
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d10a      	bne.n	8001ec8 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8001eb2:	6879      	ldr	r1, [r7, #4]
 8001eb4:	68fa      	ldr	r2, [r7, #12]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	440b      	add	r3, r1
 8001ec0:	335c      	adds	r3, #92	; 0x5c
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
 8001ec6:	e0b0      	b.n	800202a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	440b      	add	r3, r1
 8001ed6:	335d      	adds	r3, #93	; 0x5d
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	2b05      	cmp	r3, #5
 8001edc:	d10a      	bne.n	8001ef4 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001ede:	6879      	ldr	r1, [r7, #4]
 8001ee0:	68fa      	ldr	r2, [r7, #12]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	4413      	add	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	440b      	add	r3, r1
 8001eec:	335c      	adds	r3, #92	; 0x5c
 8001eee:	2205      	movs	r2, #5
 8001ef0:	701a      	strb	r2, [r3, #0]
 8001ef2:	e09a      	b.n	800202a <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	4413      	add	r3, r2
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	440b      	add	r3, r1
 8001f02:	335d      	adds	r3, #93	; 0x5d
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b06      	cmp	r3, #6
 8001f08:	d00a      	beq.n	8001f20 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	68fa      	ldr	r2, [r7, #12]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	440b      	add	r3, r1
 8001f18:	335d      	adds	r3, #93	; 0x5d
 8001f1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d156      	bne.n	8001fce <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	3358      	adds	r3, #88	; 0x58
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	1c59      	adds	r1, r3, #1
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4403      	add	r3, r0
 8001f42:	3358      	adds	r3, #88	; 0x58
 8001f44:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	009b      	lsls	r3, r3, #2
 8001f4e:	4413      	add	r3, r2
 8001f50:	00db      	lsls	r3, r3, #3
 8001f52:	440b      	add	r3, r1
 8001f54:	3358      	adds	r3, #88	; 0x58
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2b03      	cmp	r3, #3
 8001f5a:	d914      	bls.n	8001f86 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001f5c:	6879      	ldr	r1, [r7, #4]
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4613      	mov	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	440b      	add	r3, r1
 8001f6a:	3358      	adds	r3, #88	; 0x58
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4613      	mov	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	440b      	add	r3, r1
 8001f7e:	335c      	adds	r3, #92	; 0x5c
 8001f80:	2204      	movs	r2, #4
 8001f82:	701a      	strb	r2, [r3, #0]
 8001f84:	e009      	b.n	8001f9a <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	00db      	lsls	r3, r3, #3
 8001f92:	440b      	add	r3, r1
 8001f94:	335c      	adds	r3, #92	; 0x5c
 8001f96:	2202      	movs	r2, #2
 8001f98:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	015a      	lsls	r2, r3, #5
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001fb0:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fb8:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	015a      	lsls	r2, r3, #5
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	6013      	str	r3, [r2, #0]
 8001fcc:	e02d      	b.n	800202a <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	4413      	add	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	440b      	add	r3, r1
 8001fdc:	335d      	adds	r3, #93	; 0x5d
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b03      	cmp	r3, #3
 8001fe2:	d122      	bne.n	800202a <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	4413      	add	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	440b      	add	r3, r1
 8001ff2:	335c      	adds	r3, #92	; 0x5c
 8001ff4:	2202      	movs	r2, #2
 8001ff6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800200e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002016:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	015a      	lsls	r2, r3, #5
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4413      	add	r3, r2
 8002020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002024:	461a      	mov	r2, r3
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	015a      	lsls	r2, r3, #5
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002036:	461a      	mov	r2, r3
 8002038:	2302      	movs	r3, #2
 800203a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	b2d8      	uxtb	r0, r3
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	68fa      	ldr	r2, [r7, #12]
 8002044:	4613      	mov	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	4413      	add	r3, r2
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	440b      	add	r3, r1
 800204e:	335c      	adds	r3, #92	; 0x5c
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	4601      	mov	r1, r0
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f005 ff74 	bl	8007f44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800205c:	e0d1      	b.n	8002202 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	015a      	lsls	r2, r3, #5
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	4413      	add	r3, r2
 8002066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d13e      	bne.n	80020f2 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	015a      	lsls	r2, r3, #5
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	4413      	add	r3, r2
 800207c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	0151      	lsls	r1, r2, #5
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	440a      	add	r2, r1
 800208a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800208e:	f043 0302 	orr.w	r3, r3, #2
 8002092:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	4613      	mov	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	4413      	add	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	440b      	add	r3, r1
 80020a2:	3358      	adds	r3, #88	; 0x58
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	1c59      	adds	r1, r3, #1
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4413      	add	r3, r2
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4403      	add	r3, r0
 80020b6:	3358      	adds	r3, #88	; 0x58
 80020b8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	68fa      	ldr	r2, [r7, #12]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	440b      	add	r3, r1
 80020c8:	335d      	adds	r3, #93	; 0x5d
 80020ca:	2206      	movs	r2, #6
 80020cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	4611      	mov	r1, r2
 80020d8:	4618      	mov	r0, r3
 80020da:	f003 f9a6 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ea:	461a      	mov	r2, r3
 80020ec:	2380      	movs	r3, #128	; 0x80
 80020ee:	6093      	str	r3, [r2, #8]
}
 80020f0:	e087      	b.n	8002202 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f003 0310 	and.w	r3, r3, #16
 8002104:	2b10      	cmp	r3, #16
 8002106:	d17c      	bne.n	8002202 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	440b      	add	r3, r1
 8002116:	333f      	adds	r3, #63	; 0x3f
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b03      	cmp	r3, #3
 800211c:	d122      	bne.n	8002164 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4613      	mov	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	440b      	add	r3, r1
 800212c:	3358      	adds	r3, #88	; 0x58
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	0151      	lsls	r1, r2, #5
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	440a      	add	r2, r1
 8002148:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800214c:	f043 0302 	orr.w	r3, r3, #2
 8002150:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	4611      	mov	r1, r2
 800215c:	4618      	mov	r0, r3
 800215e:	f003 f964 	bl	800542a <USB_HC_Halt>
 8002162:	e045      	b.n	80021f0 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	333f      	adds	r3, #63	; 0x3f
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d00a      	beq.n	8002190 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4613      	mov	r3, r2
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	4413      	add	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	440b      	add	r3, r1
 8002188:	333f      	adds	r3, #63	; 0x3f
 800218a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800218c:	2b02      	cmp	r3, #2
 800218e:	d12f      	bne.n	80021f0 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	440b      	add	r3, r1
 800219e:	3358      	adds	r3, #88	; 0x58
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d121      	bne.n	80021f0 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 80021ac:	6879      	ldr	r1, [r7, #4]
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	4613      	mov	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4413      	add	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	440b      	add	r3, r1
 80021ba:	335d      	adds	r3, #93	; 0x5d
 80021bc:	2203      	movs	r2, #3
 80021be:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	0151      	lsls	r1, r2, #5
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	440a      	add	r2, r1
 80021d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80021da:	f043 0302 	orr.w	r3, r3, #2
 80021de:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	b2d2      	uxtb	r2, r2
 80021e8:	4611      	mov	r1, r2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 f91d 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	015a      	lsls	r2, r3, #5
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021fc:	461a      	mov	r2, r3
 80021fe:	2310      	movs	r3, #16
 8002200:	6093      	str	r3, [r2, #8]
}
 8002202:	bf00      	nop
 8002204:	3718      	adds	r7, #24
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b086      	sub	sp, #24
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	460b      	mov	r3, r1
 8002214:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	015a      	lsls	r2, r3, #5
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4413      	add	r3, r2
 800222c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f003 0304 	and.w	r3, r3, #4
 8002236:	2b04      	cmp	r3, #4
 8002238:	d119      	bne.n	800226e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	015a      	lsls	r2, r3, #5
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	4413      	add	r3, r2
 8002242:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002246:	461a      	mov	r2, r3
 8002248:	2304      	movs	r3, #4
 800224a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	015a      	lsls	r2, r3, #5
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	4413      	add	r3, r2
 8002254:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	0151      	lsls	r1, r2, #5
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	440a      	add	r2, r1
 8002262:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002266:	f043 0302 	orr.w	r3, r3, #2
 800226a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800226c:	e33e      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d141      	bne.n	8002308 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002290:	461a      	mov	r2, r3
 8002292:	2320      	movs	r3, #32
 8002294:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	4613      	mov	r3, r2
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	00db      	lsls	r3, r3, #3
 80022a2:	440b      	add	r3, r1
 80022a4:	333d      	adds	r3, #61	; 0x3d
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	f040 831f 	bne.w	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	68fa      	ldr	r2, [r7, #12]
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	440b      	add	r3, r1
 80022bc:	333d      	adds	r3, #61	; 0x3d
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	4613      	mov	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4413      	add	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	440b      	add	r3, r1
 80022d0:	335c      	adds	r3, #92	; 0x5c
 80022d2:	2202      	movs	r2, #2
 80022d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	015a      	lsls	r2, r3, #5
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	0151      	lsls	r1, r2, #5
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	440a      	add	r2, r1
 80022ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	b2d2      	uxtb	r2, r2
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f892 	bl	800542a <USB_HC_Halt>
}
 8002306:	e2f1      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	015a      	lsls	r2, r3, #5
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800231a:	2b40      	cmp	r3, #64	; 0x40
 800231c:	d13f      	bne.n	800239e <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	440b      	add	r3, r1
 800232c:	335d      	adds	r3, #93	; 0x5d
 800232e:	2204      	movs	r2, #4
 8002330:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	333d      	adds	r3, #61	; 0x3d
 8002342:	2201      	movs	r2, #1
 8002344:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	440b      	add	r3, r1
 8002354:	3358      	adds	r3, #88	; 0x58
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	015a      	lsls	r2, r3, #5
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	4413      	add	r3, r2
 8002362:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	68fa      	ldr	r2, [r7, #12]
 800236a:	0151      	lsls	r1, r2, #5
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	440a      	add	r2, r1
 8002370:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002374:	f043 0302 	orr.w	r3, r3, #2
 8002378:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	68fa      	ldr	r2, [r7, #12]
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f003 f850 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	015a      	lsls	r2, r3, #5
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4413      	add	r3, r2
 8002392:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002396:	461a      	mov	r2, r3
 8002398:	2340      	movs	r3, #64	; 0x40
 800239a:	6093      	str	r3, [r2, #8]
}
 800239c:	e2a6      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d122      	bne.n	80023fc <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	015a      	lsls	r2, r3, #5
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	4413      	add	r3, r2
 80023be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	0151      	lsls	r1, r2, #5
 80023c8:	693a      	ldr	r2, [r7, #16]
 80023ca:	440a      	add	r2, r1
 80023cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80023d0:	f043 0302 	orr.w	r3, r3, #2
 80023d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68fa      	ldr	r2, [r7, #12]
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f003 f822 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	015a      	lsls	r2, r3, #5
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	4413      	add	r3, r2
 80023ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f2:	461a      	mov	r2, r3
 80023f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f8:	6093      	str	r3, [r2, #8]
}
 80023fa:	e277      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	015a      	lsls	r2, r3, #5
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4413      	add	r3, r2
 8002404:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b01      	cmp	r3, #1
 8002410:	d135      	bne.n	800247e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	440b      	add	r3, r1
 8002420:	3358      	adds	r3, #88	; 0x58
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	015a      	lsls	r2, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4413      	add	r3, r2
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	68fa      	ldr	r2, [r7, #12]
 8002436:	0151      	lsls	r1, r2, #5
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	440a      	add	r2, r1
 800243c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002440:	f043 0302 	orr.w	r3, r3, #2
 8002444:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	4611      	mov	r1, r2
 8002450:	4618      	mov	r0, r3
 8002452:	f002 ffea 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	015a      	lsls	r2, r3, #5
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	4413      	add	r3, r2
 800245e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002462:	461a      	mov	r2, r3
 8002464:	2301      	movs	r3, #1
 8002466:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002468:	6879      	ldr	r1, [r7, #4]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	440b      	add	r3, r1
 8002476:	335d      	adds	r3, #93	; 0x5d
 8002478:	2201      	movs	r2, #1
 800247a:	701a      	strb	r2, [r3, #0]
}
 800247c:	e236      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	015a      	lsls	r2, r3, #5
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	4413      	add	r3, r2
 8002486:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b08      	cmp	r3, #8
 8002492:	d12b      	bne.n	80024ec <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	461a      	mov	r2, r3
 80024a2:	2308      	movs	r3, #8
 80024a4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	0151      	lsls	r1, r2, #5
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	440a      	add	r2, r1
 80024bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	b2d2      	uxtb	r2, r2
 80024ce:	4611      	mov	r1, r2
 80024d0:	4618      	mov	r0, r3
 80024d2:	f002 ffaa 	bl	800542a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	68fa      	ldr	r2, [r7, #12]
 80024da:	4613      	mov	r3, r2
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	4413      	add	r3, r2
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	440b      	add	r3, r1
 80024e4:	335d      	adds	r3, #93	; 0x5d
 80024e6:	2205      	movs	r2, #5
 80024e8:	701a      	strb	r2, [r3, #0]
}
 80024ea:	e1ff      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	015a      	lsls	r2, r3, #5
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4413      	add	r3, r2
 80024f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	2b10      	cmp	r3, #16
 8002500:	d155      	bne.n	80025ae <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	440b      	add	r3, r1
 8002510:	3358      	adds	r3, #88	; 0x58
 8002512:	2200      	movs	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	68fa      	ldr	r2, [r7, #12]
 800251a:	4613      	mov	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	00db      	lsls	r3, r3, #3
 8002522:	440b      	add	r3, r1
 8002524:	335d      	adds	r3, #93	; 0x5d
 8002526:	2203      	movs	r2, #3
 8002528:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	333d      	adds	r3, #61	; 0x3d
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d114      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	68fa      	ldr	r2, [r7, #12]
 8002544:	4613      	mov	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	4413      	add	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	440b      	add	r3, r1
 800254e:	333c      	adds	r3, #60	; 0x3c
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d109      	bne.n	800256a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	68fa      	ldr	r2, [r7, #12]
 800255a:	4613      	mov	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	4413      	add	r3, r2
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	440b      	add	r3, r1
 8002564:	333d      	adds	r3, #61	; 0x3d
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	015a      	lsls	r2, r3, #5
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4413      	add	r3, r2
 8002572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	68fa      	ldr	r2, [r7, #12]
 800257a:	0151      	lsls	r1, r2, #5
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	440a      	add	r2, r1
 8002580:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002584:	f043 0302 	orr.w	r3, r3, #2
 8002588:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	b2d2      	uxtb	r2, r2
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f002 ff48 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	461a      	mov	r2, r3
 80025a8:	2310      	movs	r3, #16
 80025aa:	6093      	str	r3, [r2, #8]
}
 80025ac:	e19e      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	015a      	lsls	r2, r3, #5
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4413      	add	r3, r2
 80025b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c0:	2b80      	cmp	r3, #128	; 0x80
 80025c2:	d12b      	bne.n	800261c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	68fa      	ldr	r2, [r7, #12]
 80025d4:	0151      	lsls	r1, r2, #5
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	440a      	add	r2, r1
 80025da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025de:	f043 0302 	orr.w	r3, r3, #2
 80025e2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	4611      	mov	r1, r2
 80025ee:	4618      	mov	r0, r3
 80025f0:	f002 ff1b 	bl	800542a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80025f4:	6879      	ldr	r1, [r7, #4]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4613      	mov	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	4413      	add	r3, r2
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	440b      	add	r3, r1
 8002602:	335d      	adds	r3, #93	; 0x5d
 8002604:	2206      	movs	r2, #6
 8002606:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	2380      	movs	r3, #128	; 0x80
 8002618:	6093      	str	r3, [r2, #8]
}
 800261a:	e167      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4413      	add	r3, r2
 8002624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800262e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002632:	d135      	bne.n	80026a0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	68fa      	ldr	r2, [r7, #12]
 8002644:	0151      	lsls	r1, r2, #5
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	440a      	add	r2, r1
 800264a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800264e:	f043 0302 	orr.w	r3, r3, #2
 8002652:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f002 fee3 	bl	800542a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	015a      	lsls	r2, r3, #5
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	4413      	add	r3, r2
 800266c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002670:	461a      	mov	r2, r3
 8002672:	2310      	movs	r3, #16
 8002674:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	015a      	lsls	r2, r3, #5
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	4413      	add	r3, r2
 800267e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002682:	461a      	mov	r2, r3
 8002684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002688:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	68fa      	ldr	r2, [r7, #12]
 800268e:	4613      	mov	r3, r2
 8002690:	009b      	lsls	r3, r3, #2
 8002692:	4413      	add	r3, r2
 8002694:	00db      	lsls	r3, r3, #3
 8002696:	440b      	add	r3, r1
 8002698:	335d      	adds	r3, #93	; 0x5d
 800269a:	2208      	movs	r2, #8
 800269c:	701a      	strb	r2, [r3, #0]
}
 800269e:	e125      	b.n	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	015a      	lsls	r2, r3, #5
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4413      	add	r3, r2
 80026a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	f040 811a 	bne.w	80028ec <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	0151      	lsls	r1, r2, #5
 80026ca:	693a      	ldr	r2, [r7, #16]
 80026cc:	440a      	add	r2, r1
 80026ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026d2:	f023 0302 	bic.w	r3, r3, #2
 80026d6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	440b      	add	r3, r1
 80026e6:	335d      	adds	r3, #93	; 0x5d
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d137      	bne.n	800275e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4613      	mov	r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	4413      	add	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	440b      	add	r3, r1
 80026fc:	335c      	adds	r3, #92	; 0x5c
 80026fe:	2201      	movs	r2, #1
 8002700:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4613      	mov	r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4413      	add	r3, r2
 800270c:	00db      	lsls	r3, r3, #3
 800270e:	440b      	add	r3, r1
 8002710:	333f      	adds	r3, #63	; 0x3f
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b02      	cmp	r3, #2
 8002716:	d00b      	beq.n	8002730 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	68fa      	ldr	r2, [r7, #12]
 800271c:	4613      	mov	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4413      	add	r3, r2
 8002722:	00db      	lsls	r3, r3, #3
 8002724:	440b      	add	r3, r1
 8002726:	333f      	adds	r3, #63	; 0x3f
 8002728:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800272a:	2b03      	cmp	r3, #3
 800272c:	f040 80c5 	bne.w	80028ba <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002730:	6879      	ldr	r1, [r7, #4]
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	00db      	lsls	r3, r3, #3
 800273c:	440b      	add	r3, r1
 800273e:	3351      	adds	r3, #81	; 0x51
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	f083 0301 	eor.w	r3, r3, #1
 8002746:	b2d8      	uxtb	r0, r3
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	68fa      	ldr	r2, [r7, #12]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	3351      	adds	r3, #81	; 0x51
 8002758:	4602      	mov	r2, r0
 800275a:	701a      	strb	r2, [r3, #0]
 800275c:	e0ad      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	68fa      	ldr	r2, [r7, #12]
 8002762:	4613      	mov	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	440b      	add	r3, r1
 800276c:	335d      	adds	r3, #93	; 0x5d
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	2b03      	cmp	r3, #3
 8002772:	d10a      	bne.n	800278a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	440b      	add	r3, r1
 8002782:	335c      	adds	r3, #92	; 0x5c
 8002784:	2202      	movs	r2, #2
 8002786:	701a      	strb	r2, [r3, #0]
 8002788:	e097      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800278a:	6879      	ldr	r1, [r7, #4]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	440b      	add	r3, r1
 8002798:	335d      	adds	r3, #93	; 0x5d
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b04      	cmp	r3, #4
 800279e:	d10a      	bne.n	80027b6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	440b      	add	r3, r1
 80027ae:	335c      	adds	r3, #92	; 0x5c
 80027b0:	2202      	movs	r2, #2
 80027b2:	701a      	strb	r2, [r3, #0]
 80027b4:	e081      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	4613      	mov	r3, r2
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	4413      	add	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	440b      	add	r3, r1
 80027c4:	335d      	adds	r3, #93	; 0x5d
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b05      	cmp	r3, #5
 80027ca:	d10a      	bne.n	80027e2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	4613      	mov	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	4413      	add	r3, r2
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	440b      	add	r3, r1
 80027da:	335c      	adds	r3, #92	; 0x5c
 80027dc:	2205      	movs	r2, #5
 80027de:	701a      	strb	r2, [r3, #0]
 80027e0:	e06b      	b.n	80028ba <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	440b      	add	r3, r1
 80027f0:	335d      	adds	r3, #93	; 0x5d
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d00a      	beq.n	800280e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	440b      	add	r3, r1
 8002806:	335d      	adds	r3, #93	; 0x5d
 8002808:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800280a:	2b08      	cmp	r3, #8
 800280c:	d155      	bne.n	80028ba <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	440b      	add	r3, r1
 800281c:	3358      	adds	r3, #88	; 0x58
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	1c59      	adds	r1, r3, #1
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4403      	add	r3, r0
 8002830:	3358      	adds	r3, #88	; 0x58
 8002832:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002834:	6879      	ldr	r1, [r7, #4]
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	00db      	lsls	r3, r3, #3
 8002840:	440b      	add	r3, r1
 8002842:	3358      	adds	r3, #88	; 0x58
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b03      	cmp	r3, #3
 8002848:	d914      	bls.n	8002874 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	440b      	add	r3, r1
 8002858:	3358      	adds	r3, #88	; 0x58
 800285a:	2200      	movs	r2, #0
 800285c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800285e:	6879      	ldr	r1, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	4613      	mov	r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	4413      	add	r3, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	440b      	add	r3, r1
 800286c:	335c      	adds	r3, #92	; 0x5c
 800286e:	2204      	movs	r2, #4
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e009      	b.n	8002888 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	440b      	add	r3, r1
 8002882:	335c      	adds	r3, #92	; 0x5c
 8002884:	2202      	movs	r2, #2
 8002886:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800289e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028a6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	015a      	lsls	r2, r3, #5
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	4413      	add	r3, r2
 80028b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028b4:	461a      	mov	r2, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	015a      	lsls	r2, r3, #5
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c6:	461a      	mov	r2, r3
 80028c8:	2302      	movs	r3, #2
 80028ca:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	b2d8      	uxtb	r0, r3
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	335c      	adds	r3, #92	; 0x5c
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	461a      	mov	r2, r3
 80028e4:	4601      	mov	r1, r0
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f005 fb2c 	bl	8007f44 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80028ec:	bf00      	nop
 80028ee:	3718      	adds	r7, #24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002904:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	0c5b      	lsrs	r3, r3, #17
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	091b      	lsrs	r3, r3, #4
 8002924:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002928:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d003      	beq.n	8002938 <HCD_RXQLVL_IRQHandler+0x44>
 8002930:	2b05      	cmp	r3, #5
 8002932:	f000 8082 	beq.w	8002a3a <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002936:	e083      	b.n	8002a40 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d07f      	beq.n	8002a3e <HCD_RXQLVL_IRQHandler+0x14a>
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	69ba      	ldr	r2, [r7, #24]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	3344      	adds	r3, #68	; 0x44
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d074      	beq.n	8002a3e <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	3344      	adds	r3, #68	; 0x44
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	b292      	uxth	r2, r2
 800296e:	4619      	mov	r1, r3
 8002970:	f002 f8fb 	bl	8004b6a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	3344      	adds	r3, #68	; 0x44
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	18d1      	adds	r1, r2, r3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4613      	mov	r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	00db      	lsls	r3, r3, #3
 8002996:	4403      	add	r3, r0
 8002998:	3344      	adds	r3, #68	; 0x44
 800299a:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	00db      	lsls	r3, r3, #3
 80029a8:	440b      	add	r3, r1
 80029aa:	334c      	adds	r3, #76	; 0x4c
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	18d1      	adds	r1, r2, r3
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4403      	add	r3, r0
 80029c0:	334c      	adds	r3, #76	; 0x4c
 80029c2:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	6a3b      	ldr	r3, [r7, #32]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029d0:	691a      	ldr	r2, [r3, #16]
 80029d2:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <HCD_RXQLVL_IRQHandler+0x154>)
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d031      	beq.n	8002a3e <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029f0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029f8:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	6a3b      	ldr	r3, [r7, #32]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	3350      	adds	r3, #80	; 0x50
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	f083 0301 	eor.w	r3, r3, #1
 8002a22:	b2d8      	uxtb	r0, r3
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	00db      	lsls	r3, r3, #3
 8002a30:	440b      	add	r3, r1
 8002a32:	3350      	adds	r3, #80	; 0x50
 8002a34:	4602      	mov	r2, r0
 8002a36:	701a      	strb	r2, [r3, #0]
      break;
 8002a38:	e001      	b.n	8002a3e <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e000      	b.n	8002a40 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002a3e:	bf00      	nop
  }
}
 8002a40:	bf00      	nop
 8002a42:	3728      	adds	r7, #40	; 0x28
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	1ff80000 	.word	0x1ff80000

08002a4c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002a78:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d113      	bne.n	8002aac <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d10a      	bne.n	8002aa4 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699a      	ldr	r2, [r3, #24]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8002a9c:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f005 fa34 	bl	8007f0c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	f043 0302 	orr.w	r3, r3, #2
 8002aaa:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d147      	bne.n	8002b46 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	f043 0308 	orr.w	r3, r3, #8
 8002abc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d129      	bne.n	8002b1c <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d113      	bne.n	8002af8 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002ad6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ada:	d106      	bne.n	8002aea <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2102      	movs	r1, #2
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f002 f97c 	bl	8004de0 <USB_InitFSLSPClkSel>
 8002ae8:	e011      	b.n	8002b0e <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2101      	movs	r1, #1
 8002af0:	4618      	mov	r0, r3
 8002af2:	f002 f975 	bl	8004de0 <USB_InitFSLSPClkSel>
 8002af6:	e00a      	b.n	8002b0e <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d106      	bne.n	8002b0e <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b06:	461a      	mov	r2, r3
 8002b08:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002b0c:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f005 fa26 	bl	8007f60 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f005 f9f9 	bl	8007f0c <HAL_HCD_Connect_Callback>
 8002b1a:	e014      	b.n	8002b46 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f005 fa2d 	bl	8007f7c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8002b30:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002b34:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	699a      	ldr	r2, [r3, #24]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002b44:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d103      	bne.n	8002b58 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f043 0320 	orr.w	r3, r3, #32
 8002b56:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	6013      	str	r3, [r2, #0]
}
 8002b64:	bf00      	nop
 8002b66:	3718      	adds	r7, #24
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e10f      	b.n	8002d9e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f004 ff12 	bl	80079bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bb0:	f001 f9ac 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8002bb4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4a7b      	ldr	r2, [pc, #492]	; (8002da8 <HAL_I2C_Init+0x23c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d807      	bhi.n	8002bd0 <HAL_I2C_Init+0x64>
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	4a7a      	ldr	r2, [pc, #488]	; (8002dac <HAL_I2C_Init+0x240>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	bf94      	ite	ls
 8002bc8:	2301      	movls	r3, #1
 8002bca:	2300      	movhi	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e006      	b.n	8002bde <HAL_I2C_Init+0x72>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4a77      	ldr	r2, [pc, #476]	; (8002db0 <HAL_I2C_Init+0x244>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	bf94      	ite	ls
 8002bd8:	2301      	movls	r3, #1
 8002bda:	2300      	movhi	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d001      	beq.n	8002be6 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e0db      	b.n	8002d9e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4a72      	ldr	r2, [pc, #456]	; (8002db4 <HAL_I2C_Init+0x248>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0c9b      	lsrs	r3, r3, #18
 8002bf0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	4a64      	ldr	r2, [pc, #400]	; (8002da8 <HAL_I2C_Init+0x23c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d802      	bhi.n	8002c20 <HAL_I2C_Init+0xb4>
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	e009      	b.n	8002c34 <HAL_I2C_Init+0xc8>
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	4a63      	ldr	r2, [pc, #396]	; (8002db8 <HAL_I2C_Init+0x24c>)
 8002c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c30:	099b      	lsrs	r3, r3, #6
 8002c32:	3301      	adds	r3, #1
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6812      	ldr	r2, [r2, #0]
 8002c38:	430b      	orrs	r3, r1
 8002c3a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c46:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4956      	ldr	r1, [pc, #344]	; (8002da8 <HAL_I2C_Init+0x23c>)
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d80d      	bhi.n	8002c70 <HAL_I2C_Init+0x104>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	1e59      	subs	r1, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c62:	3301      	adds	r3, #1
 8002c64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	bf38      	it	cc
 8002c6c:	2304      	movcc	r3, #4
 8002c6e:	e04f      	b.n	8002d10 <HAL_I2C_Init+0x1a4>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d111      	bne.n	8002c9c <HAL_I2C_Init+0x130>
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1e58      	subs	r0, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6859      	ldr	r1, [r3, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	440b      	add	r3, r1
 8002c86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	e012      	b.n	8002cc2 <HAL_I2C_Init+0x156>
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	1e58      	subs	r0, r3, #1
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6859      	ldr	r1, [r3, #4]
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	0099      	lsls	r1, r3, #2
 8002cac:	440b      	add	r3, r1
 8002cae:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	bf0c      	ite	eq
 8002cbc:	2301      	moveq	r3, #1
 8002cbe:	2300      	movne	r3, #0
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Init+0x15e>
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e022      	b.n	8002d10 <HAL_I2C_Init+0x1a4>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d10e      	bne.n	8002cf0 <HAL_I2C_Init+0x184>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1e58      	subs	r0, r3, #1
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	460b      	mov	r3, r1
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	440b      	add	r3, r1
 8002ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cee:	e00f      	b.n	8002d10 <HAL_I2C_Init+0x1a4>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	1e58      	subs	r0, r3, #1
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6859      	ldr	r1, [r3, #4]
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	0099      	lsls	r1, r3, #2
 8002d00:	440b      	add	r3, r1
 8002d02:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d06:	3301      	adds	r3, #1
 8002d08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	6809      	ldr	r1, [r1, #0]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	430a      	orrs	r2, r1
 8002d32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6911      	ldr	r1, [r2, #16]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	4311      	orrs	r1, r2
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6812      	ldr	r2, [r2, #0]
 8002d50:	430b      	orrs	r3, r1
 8002d52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	695a      	ldr	r2, [r3, #20]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3710      	adds	r7, #16
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	000186a0 	.word	0x000186a0
 8002dac:	001e847f 	.word	0x001e847f
 8002db0:	003d08ff 	.word	0x003d08ff
 8002db4:	431bde83 	.word	0x431bde83
 8002db8:	10624dd3 	.word	0x10624dd3

08002dbc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e128      	b.n	8003020 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d109      	bne.n	8002dee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a90      	ldr	r2, [pc, #576]	; (8003028 <HAL_I2S_Init+0x26c>)
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f004 fe2f 	bl	8007a4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2202      	movs	r2, #2
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	69db      	ldr	r3, [r3, #28]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002e04:	f023 030f 	bic.w	r3, r3, #15
 8002e08:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	695b      	ldr	r3, [r3, #20]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d060      	beq.n	8002edc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d102      	bne.n	8002e28 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002e22:	2310      	movs	r3, #16
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e001      	b.n	8002e2c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002e28:	2320      	movs	r3, #32
 8002e2a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b20      	cmp	r3, #32
 8002e32:	d802      	bhi.n	8002e3a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f001 f970 	bl	8004120 <HAL_RCCEx_GetPeriphCLKFreq>
 8002e40:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e4a:	d125      	bne.n	8002e98 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e5e:	4613      	mov	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	4413      	add	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	461a      	mov	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e70:	3305      	adds	r3, #5
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	e01f      	b.n	8002eb6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	005b      	lsls	r3, r3, #1
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e92:	3305      	adds	r3, #5
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	e00e      	b.n	8002eb6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	3305      	adds	r3, #5
 8002eb4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4a5c      	ldr	r2, [pc, #368]	; (800302c <HAL_I2S_Init+0x270>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	08db      	lsrs	r3, r3, #3
 8002ec0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	021b      	lsls	r3, r3, #8
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e003      	b.n	8002ee4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002edc:	2302      	movs	r3, #2
 8002ede:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d902      	bls.n	8002ef0 <HAL_I2S_Init+0x134>
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	2bff      	cmp	r3, #255	; 0xff
 8002eee:	d907      	bls.n	8002f00 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef4:	f043 0210 	orr.w	r2, r3, #16
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e08f      	b.n	8003020 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	ea42 0103 	orr.w	r1, r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f1e:	f023 030f 	bic.w	r3, r3, #15
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6851      	ldr	r1, [r2, #4]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6892      	ldr	r2, [r2, #8]
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	68d2      	ldr	r2, [r2, #12]
 8002f30:	4311      	orrs	r1, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6992      	ldr	r2, [r2, #24]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f42:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d161      	bne.n	8003010 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a38      	ldr	r2, [pc, #224]	; (8003030 <HAL_I2S_Init+0x274>)
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a37      	ldr	r2, [pc, #220]	; (8003034 <HAL_I2S_Init+0x278>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_I2S_Init+0x1a4>
 8002f5c:	4b36      	ldr	r3, [pc, #216]	; (8003038 <HAL_I2S_Init+0x27c>)
 8002f5e:	e001      	b.n	8002f64 <HAL_I2S_Init+0x1a8>
 8002f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f64:	69db      	ldr	r3, [r3, #28]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	4932      	ldr	r1, [pc, #200]	; (8003034 <HAL_I2S_Init+0x278>)
 8002f6c:	428a      	cmp	r2, r1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2S_Init+0x1b8>
 8002f70:	4a31      	ldr	r2, [pc, #196]	; (8003038 <HAL_I2S_Init+0x27c>)
 8002f72:	e001      	b.n	8002f78 <HAL_I2S_Init+0x1bc>
 8002f74:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002f78:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002f7c:	f023 030f 	bic.w	r3, r3, #15
 8002f80:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_I2S_Init+0x278>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_I2S_Init+0x1d4>
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_I2S_Init+0x27c>)
 8002f8e:	e001      	b.n	8002f94 <HAL_I2S_Init+0x1d8>
 8002f90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f94:	2202      	movs	r2, #2
 8002f96:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a25      	ldr	r2, [pc, #148]	; (8003034 <HAL_I2S_Init+0x278>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d101      	bne.n	8002fa6 <HAL_I2S_Init+0x1ea>
 8002fa2:	4b25      	ldr	r3, [pc, #148]	; (8003038 <HAL_I2S_Init+0x27c>)
 8002fa4:	e001      	b.n	8002faa <HAL_I2S_Init+0x1ee>
 8002fa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fb6:	d003      	beq.n	8002fc0 <HAL_I2S_Init+0x204>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d103      	bne.n	8002fc8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc4:	613b      	str	r3, [r7, #16]
 8002fc6:	e001      	b.n	8002fcc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8002fe2:	4303      	orrs	r3, r0
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002fea:	4313      	orrs	r3, r2
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	897b      	ldrh	r3, [r7, #10]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ff8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <HAL_I2S_Init+0x278>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d101      	bne.n	8003008 <HAL_I2S_Init+0x24c>
 8003004:	4b0c      	ldr	r3, [pc, #48]	; (8003038 <HAL_I2S_Init+0x27c>)
 8003006:	e001      	b.n	800300c <HAL_I2S_Init+0x250>
 8003008:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800300c:	897a      	ldrh	r2, [r7, #10]
 800300e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3720      	adds	r7, #32
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	08003133 	.word	0x08003133
 800302c:	cccccccd 	.word	0xcccccccd
 8003030:	08003249 	.word	0x08003249
 8003034:	40003800 	.word	0x40003800
 8003038:	40003400 	.word	0x40003400

0800303c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800303c:	b480      	push	{r7}
 800303e:	b083      	sub	sp, #12
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003050:	b480      	push	{r7}
 8003052:	b083      	sub	sp, #12
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b082      	sub	sp, #8
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003084:	881a      	ldrh	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	1c9a      	adds	r2, r3, #2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309a:	b29b      	uxth	r3, r3
 800309c:	3b01      	subs	r3, #1
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a8:	b29b      	uxth	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685a      	ldr	r2, [r3, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030bc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7ff ffb8 	bl	800303c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80030cc:	bf00      	nop
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e6:	b292      	uxth	r2, r2
 80030e8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	1c9a      	adds	r2, r3, #2
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d10e      	bne.n	800312a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800311a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff93 	bl	8003050 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b086      	sub	sp, #24
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b04      	cmp	r3, #4
 800314c:	d13a      	bne.n	80031c4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	2b01      	cmp	r3, #1
 8003156:	d109      	bne.n	800316c <I2S_IRQHandler+0x3a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d102      	bne.n	800316c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7ff ffb4 	bl	80030d4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	d126      	bne.n	80031c4 <I2S_IRQHandler+0x92>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 0320 	and.w	r3, r3, #32
 8003180:	2b20      	cmp	r3, #32
 8003182:	d11f      	bne.n	80031c4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003192:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003194:	2300      	movs	r3, #0
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	613b      	str	r3, [r7, #16]
 80031a8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b6:	f043 0202 	orr.w	r2, r3, #2
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7ff ff50 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	d136      	bne.n	800323e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d109      	bne.n	80031ee <I2S_IRQHandler+0xbc>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031e4:	2b80      	cmp	r3, #128	; 0x80
 80031e6:	d102      	bne.n	80031ee <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f7ff ff45 	bl	8003078 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f003 0308 	and.w	r3, r3, #8
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d122      	bne.n	800323e <I2S_IRQHandler+0x10c>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b20      	cmp	r3, #32
 8003204:	d11b      	bne.n	800323e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003214:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	f043 0204 	orr.w	r2, r3, #4
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff ff13 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
	...

08003248 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b088      	sub	sp, #32
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4aa2      	ldr	r2, [pc, #648]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d101      	bne.n	8003266 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003262:	4ba2      	ldr	r3, [pc, #648]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003264:	e001      	b.n	800326a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003266:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a9b      	ldr	r2, [pc, #620]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003280:	4b9a      	ldr	r3, [pc, #616]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003282:	e001      	b.n	8003288 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003284:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003294:	d004      	beq.n	80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	f040 8099 	bne.w	80033d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d107      	bne.n	80032ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80032b4:	6878      	ldr	r0, [r7, #4]
 80032b6:	f000 f925 	bl	8003504 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d002      	beq.n	80032d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f9c8 	bl	8003664 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032da:	2b40      	cmp	r3, #64	; 0x40
 80032dc:	d13a      	bne.n	8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0320 	and.w	r3, r3, #32
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d035      	beq.n	8003354 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a7e      	ldr	r2, [pc, #504]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d101      	bne.n	80032f6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80032f2:	4b7e      	ldr	r3, [pc, #504]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80032f4:	e001      	b.n	80032fa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80032f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4979      	ldr	r1, [pc, #484]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003302:	428b      	cmp	r3, r1
 8003304:	d101      	bne.n	800330a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003306:	4b79      	ldr	r3, [pc, #484]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003308:	e001      	b.n	800330e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800330a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800330e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003312:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003322:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	60fb      	str	r3, [r7, #12]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f043 0202 	orr.w	r2, r3, #2
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f7ff fe88 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b08      	cmp	r3, #8
 800335c:	f040 80be 	bne.w	80034dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f003 0320 	and.w	r3, r3, #32
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80b8 	beq.w	80034dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685a      	ldr	r2, [r3, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800337a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a59      	ldr	r2, [pc, #356]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d101      	bne.n	800338a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003386:	4b59      	ldr	r3, [pc, #356]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003388:	e001      	b.n	800338e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800338a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4954      	ldr	r1, [pc, #336]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003396:	428b      	cmp	r3, r1
 8003398:	d101      	bne.n	800339e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800339a:	4b54      	ldr	r3, [pc, #336]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800339c:	e001      	b.n	80033a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800339e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033a6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80033a8:	2300      	movs	r3, #0
 80033aa:	60bb      	str	r3, [r7, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	60bb      	str	r3, [r7, #8]
 80033b4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f043 0204 	orr.w	r2, r3, #4
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f7ff fe4a 	bl	8003064 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80033d0:	e084      	b.n	80034dc <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d107      	bne.n	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d002      	beq.n	80033ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8be 	bl	8003568 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d107      	bne.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d002      	beq.n	8003406 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f8fd 	bl	8003600 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800340c:	2b40      	cmp	r3, #64	; 0x40
 800340e:	d12f      	bne.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d02a      	beq.n	8003470 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685a      	ldr	r2, [r3, #4]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003428:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a2e      	ldr	r2, [pc, #184]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d101      	bne.n	8003438 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003434:	4b2d      	ldr	r3, [pc, #180]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003436:	e001      	b.n	800343c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003438:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4929      	ldr	r1, [pc, #164]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003444:	428b      	cmp	r3, r1
 8003446:	d101      	bne.n	800344c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003448:	4b28      	ldr	r3, [pc, #160]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800344a:	e001      	b.n	8003450 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800344c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003450:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003454:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7ff fdfa 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	f003 0308 	and.w	r3, r3, #8
 8003476:	2b08      	cmp	r3, #8
 8003478:	d131      	bne.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f003 0320 	and.w	r3, r3, #32
 8003480:	2b00      	cmp	r3, #0
 8003482:	d02c      	beq.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a17      	ldr	r2, [pc, #92]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d101      	bne.n	8003492 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003490:	e001      	b.n	8003496 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4912      	ldr	r1, [pc, #72]	; (80034e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800349e:	428b      	cmp	r3, r1
 80034a0:	d101      	bne.n	80034a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80034a2:	4b12      	ldr	r3, [pc, #72]	; (80034ec <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80034a4:	e001      	b.n	80034aa <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80034a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034aa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80034be:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034cc:	f043 0204 	orr.w	r2, r3, #4
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff fdc5 	bl	8003064 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80034da:	e000      	b.n	80034de <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80034dc:	bf00      	nop
}
 80034de:	bf00      	nop
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40003800 	.word	0x40003800
 80034ec:	40003400 	.word	0x40003400

080034f0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	1c99      	adds	r1, r3, #2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6251      	str	r1, [r2, #36]	; 0x24
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	3b01      	subs	r3, #1
 8003526:	b29a      	uxth	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d113      	bne.n	800355e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685a      	ldr	r2, [r3, #4]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003544:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f7ff ffc9 	bl	80034f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
	...

08003568 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	1c99      	adds	r1, r3, #2
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	6251      	str	r1, [r2, #36]	; 0x24
 800357a:	8819      	ldrh	r1, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a1d      	ldr	r2, [pc, #116]	; (80035f8 <I2SEx_TxISR_I2SExt+0x90>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <I2SEx_TxISR_I2SExt+0x22>
 8003586:	4b1d      	ldr	r3, [pc, #116]	; (80035fc <I2SEx_TxISR_I2SExt+0x94>)
 8003588:	e001      	b.n	800358e <I2SEx_TxISR_I2SExt+0x26>
 800358a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800358e:	460a      	mov	r2, r1
 8003590:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003596:	b29b      	uxth	r3, r3
 8003598:	3b01      	subs	r3, #1
 800359a:	b29a      	uxth	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d121      	bne.n	80035ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a12      	ldr	r2, [pc, #72]	; (80035f8 <I2SEx_TxISR_I2SExt+0x90>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <I2SEx_TxISR_I2SExt+0x50>
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <I2SEx_TxISR_I2SExt+0x94>)
 80035b6:	e001      	b.n	80035bc <I2SEx_TxISR_I2SExt+0x54>
 80035b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	490d      	ldr	r1, [pc, #52]	; (80035f8 <I2SEx_TxISR_I2SExt+0x90>)
 80035c4:	428b      	cmp	r3, r1
 80035c6:	d101      	bne.n	80035cc <I2SEx_TxISR_I2SExt+0x64>
 80035c8:	4b0c      	ldr	r3, [pc, #48]	; (80035fc <I2SEx_TxISR_I2SExt+0x94>)
 80035ca:	e001      	b.n	80035d0 <I2SEx_TxISR_I2SExt+0x68>
 80035cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d106      	bne.n	80035ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff ff81 	bl	80034f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40003800 	.word	0x40003800
 80035fc:	40003400 	.word	0x40003400

08003600 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68d8      	ldr	r0, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003612:	1c99      	adds	r1, r3, #2
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003618:	b282      	uxth	r2, r0
 800361a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003620:	b29b      	uxth	r3, r3
 8003622:	3b01      	subs	r3, #1
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800362e:	b29b      	uxth	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d113      	bne.n	800365c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003642:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	d106      	bne.n	800365c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff ff4a 	bl	80034f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800365c:	bf00      	nop
 800365e:	3708      	adds	r7, #8
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a20      	ldr	r2, [pc, #128]	; (80036f4 <I2SEx_RxISR_I2SExt+0x90>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d101      	bne.n	800367a <I2SEx_RxISR_I2SExt+0x16>
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <I2SEx_RxISR_I2SExt+0x94>)
 8003678:	e001      	b.n	800367e <I2SEx_RxISR_I2SExt+0x1a>
 800367a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367e:	68d8      	ldr	r0, [r3, #12]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	1c99      	adds	r1, r3, #2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	62d1      	str	r1, [r2, #44]	; 0x2c
 800368a:	b282      	uxth	r2, r0
 800368c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d121      	bne.n	80036ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a12      	ldr	r2, [pc, #72]	; (80036f4 <I2SEx_RxISR_I2SExt+0x90>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d101      	bne.n	80036b4 <I2SEx_RxISR_I2SExt+0x50>
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <I2SEx_RxISR_I2SExt+0x94>)
 80036b2:	e001      	b.n	80036b8 <I2SEx_RxISR_I2SExt+0x54>
 80036b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	490d      	ldr	r1, [pc, #52]	; (80036f4 <I2SEx_RxISR_I2SExt+0x90>)
 80036c0:	428b      	cmp	r3, r1
 80036c2:	d101      	bne.n	80036c8 <I2SEx_RxISR_I2SExt+0x64>
 80036c4:	4b0c      	ldr	r3, [pc, #48]	; (80036f8 <I2SEx_RxISR_I2SExt+0x94>)
 80036c6:	e001      	b.n	80036cc <I2SEx_RxISR_I2SExt+0x68>
 80036c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80036d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f7ff ff03 	bl	80034f0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036ea:	bf00      	nop
 80036ec:	3708      	adds	r7, #8
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40003800 	.word	0x40003800
 80036f8:	40003400 	.word	0x40003400

080036fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d101      	bne.n	800370e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e22d      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d075      	beq.n	8003806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	4ba3      	ldr	r3, [pc, #652]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d00c      	beq.n	8003740 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003726:	4ba0      	ldr	r3, [pc, #640]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800372e:	2b08      	cmp	r3, #8
 8003730:	d112      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003732:	4b9d      	ldr	r3, [pc, #628]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800373e:	d10b      	bne.n	8003758 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003740:	4b99      	ldr	r3, [pc, #612]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d05b      	beq.n	8003804 <HAL_RCC_OscConfig+0x108>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d157      	bne.n	8003804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e208      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003760:	d106      	bne.n	8003770 <HAL_RCC_OscConfig+0x74>
 8003762:	4b91      	ldr	r3, [pc, #580]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a90      	ldr	r2, [pc, #576]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003768:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	e01d      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003778:	d10c      	bne.n	8003794 <HAL_RCC_OscConfig+0x98>
 800377a:	4b8b      	ldr	r3, [pc, #556]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a8a      	ldr	r2, [pc, #552]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b88      	ldr	r3, [pc, #544]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a87      	ldr	r2, [pc, #540]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e00b      	b.n	80037ac <HAL_RCC_OscConfig+0xb0>
 8003794:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a83      	ldr	r2, [pc, #524]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800379a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800379e:	6013      	str	r3, [r2, #0]
 80037a0:	4b81      	ldr	r3, [pc, #516]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a80      	ldr	r2, [pc, #512]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d013      	beq.n	80037dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b4:	f7fc ff4a 	bl	800064c <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037bc:	f7fc ff46 	bl	800064c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b64      	cmp	r3, #100	; 0x64
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e1cd      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ce:	4b76      	ldr	r3, [pc, #472]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0xc0>
 80037da:	e014      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037dc:	f7fc ff36 	bl	800064c <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037e4:	f7fc ff32 	bl	800064c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b64      	cmp	r3, #100	; 0x64
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e1b9      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f6:	4b6c      	ldr	r3, [pc, #432]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f0      	bne.n	80037e4 <HAL_RCC_OscConfig+0xe8>
 8003802:	e000      	b.n	8003806 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d063      	beq.n	80038da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	4b65      	ldr	r3, [pc, #404]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 030c 	and.w	r3, r3, #12
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003826:	2b08      	cmp	r3, #8
 8003828:	d11c      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800382a:	4b5f      	ldr	r3, [pc, #380]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d116      	bne.n	8003864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003836:	4b5c      	ldr	r3, [pc, #368]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d001      	beq.n	800384e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e18d      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800384e:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	4952      	ldr	r1, [pc, #328]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800385e:	4313      	orrs	r3, r2
 8003860:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003862:	e03a      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800386c:	4b4f      	ldr	r3, [pc, #316]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 800386e:	2201      	movs	r2, #1
 8003870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003872:	f7fc feeb 	bl	800064c <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	e008      	b.n	800388c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800387a:	f7fc fee7 	bl	800064c <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d901      	bls.n	800388c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e16e      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800388c:	4b46      	ldr	r3, [pc, #280]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0302 	and.w	r3, r3, #2
 8003894:	2b00      	cmp	r3, #0
 8003896:	d0f0      	beq.n	800387a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003898:	4b43      	ldr	r3, [pc, #268]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	4940      	ldr	r1, [pc, #256]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]
 80038ac:	e015      	b.n	80038da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038ae:	4b3f      	ldr	r3, [pc, #252]	; (80039ac <HAL_RCC_OscConfig+0x2b0>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b4:	f7fc feca 	bl	800064c <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038bc:	f7fc fec6 	bl	800064c <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e14d      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ce:	4b36      	ldr	r3, [pc, #216]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d030      	beq.n	8003948 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d016      	beq.n	800391c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ee:	4b30      	ldr	r3, [pc, #192]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f4:	f7fc feaa 	bl	800064c <HAL_GetTick>
 80038f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	e008      	b.n	800390e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038fc:	f7fc fea6 	bl	800064c <HAL_GetTick>
 8003900:	4602      	mov	r2, r0
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e12d      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800390e:	4b26      	ldr	r3, [pc, #152]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003910:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0f0      	beq.n	80038fc <HAL_RCC_OscConfig+0x200>
 800391a:	e015      	b.n	8003948 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391c:	4b24      	ldr	r3, [pc, #144]	; (80039b0 <HAL_RCC_OscConfig+0x2b4>)
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003922:	f7fc fe93 	bl	800064c <HAL_GetTick>
 8003926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800392a:	f7fc fe8f 	bl	800064c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e116      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800393c:	4b1a      	ldr	r3, [pc, #104]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800393e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f0      	bne.n	800392a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80a0 	beq.w	8003a96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003956:	2300      	movs	r3, #0
 8003958:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d10f      	bne.n	8003986 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	4b0f      	ldr	r3, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396e:	4a0e      	ldr	r2, [pc, #56]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003974:	6413      	str	r3, [r2, #64]	; 0x40
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x2ac>)
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003982:	2301      	movs	r3, #1
 8003984:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003986:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a07      	ldr	r2, [pc, #28]	; (80039b4 <HAL_RCC_OscConfig+0x2b8>)
 8003998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800399c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800399e:	f7fc fe55 	bl	800064c <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a4:	e011      	b.n	80039ca <HAL_RCC_OscConfig+0x2ce>
 80039a6:	bf00      	nop
 80039a8:	40023800 	.word	0x40023800
 80039ac:	42470000 	.word	0x42470000
 80039b0:	42470e80 	.word	0x42470e80
 80039b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039b8:	f7fc fe48 	bl	800064c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e0cf      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039ca:	4b6a      	ldr	r3, [pc, #424]	; (8003b74 <HAL_RCC_OscConfig+0x478>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x2f0>
 80039de:	4b66      	ldr	r3, [pc, #408]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 80039e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e2:	4a65      	ldr	r2, [pc, #404]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	6713      	str	r3, [r2, #112]	; 0x70
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x312>
 80039f4:	4b60      	ldr	r3, [pc, #384]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a5f      	ldr	r2, [pc, #380]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b5d      	ldr	r3, [pc, #372]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a5c      	ldr	r2, [pc, #368]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x32a>
 8003a0e:	4b5a      	ldr	r3, [pc, #360]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a12:	4a59      	ldr	r2, [pc, #356]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1a:	4b57      	ldr	r3, [pc, #348]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a56      	ldr	r2, [pc, #344]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fc fe0d 	bl	800064c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fc fe09 	bl	800064c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e08e      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x33a>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fc fdf7 	bl	800064c <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fc fdf3 	bl	800064c <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e078      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b3f      	ldr	r3, [pc, #252]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b3b      	ldr	r3, [pc, #236]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	4a3a      	ldr	r2, [pc, #232]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d064      	beq.n	8003b68 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a9e:	4b36      	ldr	r3, [pc, #216]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b08      	cmp	r3, #8
 8003aa8:	d05c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d141      	bne.n	8003b36 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_RCC_OscConfig+0x480>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fc fdc8 	bl	800064c <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fc fdc4 	bl	800064c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e04b      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69da      	ldr	r2, [r3, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	019b      	lsls	r3, r3, #6
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	085b      	lsrs	r3, r3, #1
 8003af6:	3b01      	subs	r3, #1
 8003af8:	041b      	lsls	r3, r3, #16
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b00:	061b      	lsls	r3, r3, #24
 8003b02:	491d      	ldr	r1, [pc, #116]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b08:	4b1c      	ldr	r3, [pc, #112]	; (8003b7c <HAL_RCC_OscConfig+0x480>)
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b0e:	f7fc fd9d 	bl	800064c <HAL_GetTick>
 8003b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b14:	e008      	b.n	8003b28 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b16:	f7fc fd99 	bl	800064c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e020      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCC_OscConfig+0x41a>
 8003b34:	e018      	b.n	8003b68 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_RCC_OscConfig+0x480>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b3c:	f7fc fd86 	bl	800064c <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fc fd82 	bl	800064c <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e009      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_RCC_OscConfig+0x47c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d1f0      	bne.n	8003b44 <HAL_RCC_OscConfig+0x448>
 8003b62:	e001      	b.n	8003b68 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e000      	b.n	8003b6a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3718      	adds	r7, #24
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40007000 	.word	0x40007000
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	42470060 	.word	0x42470060

08003b80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e0ca      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b94:	4b67      	ldr	r3, [pc, #412]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d90c      	bls.n	8003bbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ba2:	4b64      	ldr	r3, [pc, #400]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003ba4:	683a      	ldr	r2, [r7, #0]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003baa:	4b62      	ldr	r3, [pc, #392]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	683a      	ldr	r2, [r7, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d001      	beq.n	8003bbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e0b6      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d020      	beq.n	8003c0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d005      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bd4:	4b58      	ldr	r3, [pc, #352]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	4a57      	ldr	r2, [pc, #348]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003bde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0308 	and.w	r3, r3, #8
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d005      	beq.n	8003bf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bec:	4b52      	ldr	r3, [pc, #328]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	4a51      	ldr	r2, [pc, #324]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003bf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bf8:	4b4f      	ldr	r3, [pc, #316]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	494c      	ldr	r1, [pc, #304]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d044      	beq.n	8003ca0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c1e:	4b46      	ldr	r3, [pc, #280]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d119      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e07d      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d003      	beq.n	8003c3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c3a:	2b03      	cmp	r3, #3
 8003c3c:	d107      	bne.n	8003c4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c3e:	4b3e      	ldr	r3, [pc, #248]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	e06d      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4e:	4b3a      	ldr	r3, [pc, #232]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e065      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c5e:	4b36      	ldr	r3, [pc, #216]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f023 0203 	bic.w	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4933      	ldr	r1, [pc, #204]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c70:	f7fc fcec 	bl	800064c <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c76:	e00a      	b.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c78:	f7fc fce8 	bl	800064c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d901      	bls.n	8003c8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e04d      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 020c 	and.w	r2, r3, #12
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d1eb      	bne.n	8003c78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f003 030f 	and.w	r3, r3, #15
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d20c      	bcs.n	8003cc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cae:	4b21      	ldr	r3, [pc, #132]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb0:	683a      	ldr	r2, [r7, #0]
 8003cb2:	b2d2      	uxtb	r2, r2
 8003cb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb6:	4b1f      	ldr	r3, [pc, #124]	; (8003d34 <HAL_RCC_ClockConfig+0x1b4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f003 030f 	and.w	r3, r3, #15
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d001      	beq.n	8003cc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e030      	b.n	8003d2a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0304 	and.w	r3, r3, #4
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d008      	beq.n	8003ce6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cd4:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	4915      	ldr	r1, [pc, #84]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0308 	and.w	r3, r3, #8
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d009      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cf2:	4b11      	ldr	r3, [pc, #68]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	00db      	lsls	r3, r3, #3
 8003d00:	490d      	ldr	r1, [pc, #52]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d06:	f000 f81d 	bl	8003d44 <HAL_RCC_GetSysClockFreq>
 8003d0a:	4601      	mov	r1, r0
 8003d0c:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	091b      	lsrs	r3, r3, #4
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	4a09      	ldr	r2, [pc, #36]	; (8003d3c <HAL_RCC_ClockConfig+0x1bc>)
 8003d18:	5cd3      	ldrb	r3, [r2, r3]
 8003d1a:	fa21 f303 	lsr.w	r3, r1, r3
 8003d1e:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <HAL_RCC_ClockConfig+0x1c0>)
 8003d20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f7fc fc4e 	bl	80005c4 <HAL_InitTick>

  return HAL_OK;
 8003d28:	2300      	movs	r3, #0
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	40023c00 	.word	0x40023c00
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08008c84 	.word	0x08008c84
 8003d40:	20000028 	.word	0x20000028

08003d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	607b      	str	r3, [r7, #4]
 8003d4e:	2300      	movs	r3, #0
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	2300      	movs	r3, #0
 8003d54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d5a:	4b63      	ldr	r3, [pc, #396]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d007      	beq.n	8003d76 <HAL_RCC_GetSysClockFreq+0x32>
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d008      	beq.n	8003d7c <HAL_RCC_GetSysClockFreq+0x38>
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	f040 80b4 	bne.w	8003ed8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d70:	4b5e      	ldr	r3, [pc, #376]	; (8003eec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003d72:	60bb      	str	r3, [r7, #8]
       break;
 8003d74:	e0b3      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d76:	4b5e      	ldr	r3, [pc, #376]	; (8003ef0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003d78:	60bb      	str	r3, [r7, #8]
      break;
 8003d7a:	e0b0      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d7c:	4b5a      	ldr	r3, [pc, #360]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d86:	4b58      	ldr	r3, [pc, #352]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d04a      	beq.n	8003e28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b55      	ldr	r3, [pc, #340]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	f04f 0400 	mov.w	r4, #0
 8003d9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003da0:	f04f 0200 	mov.w	r2, #0
 8003da4:	ea03 0501 	and.w	r5, r3, r1
 8003da8:	ea04 0602 	and.w	r6, r4, r2
 8003dac:	4629      	mov	r1, r5
 8003dae:	4632      	mov	r2, r6
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	f04f 0400 	mov.w	r4, #0
 8003db8:	0154      	lsls	r4, r2, #5
 8003dba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003dbe:	014b      	lsls	r3, r1, #5
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4622      	mov	r2, r4
 8003dc4:	1b49      	subs	r1, r1, r5
 8003dc6:	eb62 0206 	sbc.w	r2, r2, r6
 8003dca:	f04f 0300 	mov.w	r3, #0
 8003dce:	f04f 0400 	mov.w	r4, #0
 8003dd2:	0194      	lsls	r4, r2, #6
 8003dd4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dd8:	018b      	lsls	r3, r1, #6
 8003dda:	1a5b      	subs	r3, r3, r1
 8003ddc:	eb64 0402 	sbc.w	r4, r4, r2
 8003de0:	f04f 0100 	mov.w	r1, #0
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	00e2      	lsls	r2, r4, #3
 8003dea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dee:	00d9      	lsls	r1, r3, #3
 8003df0:	460b      	mov	r3, r1
 8003df2:	4614      	mov	r4, r2
 8003df4:	195b      	adds	r3, r3, r5
 8003df6:	eb44 0406 	adc.w	r4, r4, r6
 8003dfa:	f04f 0100 	mov.w	r1, #0
 8003dfe:	f04f 0200 	mov.w	r2, #0
 8003e02:	0262      	lsls	r2, r4, #9
 8003e04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003e08:	0259      	lsls	r1, r3, #9
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4614      	mov	r4, r2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	4621      	mov	r1, r4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f04f 0400 	mov.w	r4, #0
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	f7fc fa30 	bl	8000280 <__aeabi_uldivmod>
 8003e20:	4603      	mov	r3, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	60fb      	str	r3, [r7, #12]
 8003e26:	e049      	b.n	8003ebc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e28:	4b2f      	ldr	r3, [pc, #188]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	099b      	lsrs	r3, r3, #6
 8003e2e:	f04f 0400 	mov.w	r4, #0
 8003e32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	ea03 0501 	and.w	r5, r3, r1
 8003e3e:	ea04 0602 	and.w	r6, r4, r2
 8003e42:	4629      	mov	r1, r5
 8003e44:	4632      	mov	r2, r6
 8003e46:	f04f 0300 	mov.w	r3, #0
 8003e4a:	f04f 0400 	mov.w	r4, #0
 8003e4e:	0154      	lsls	r4, r2, #5
 8003e50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e54:	014b      	lsls	r3, r1, #5
 8003e56:	4619      	mov	r1, r3
 8003e58:	4622      	mov	r2, r4
 8003e5a:	1b49      	subs	r1, r1, r5
 8003e5c:	eb62 0206 	sbc.w	r2, r2, r6
 8003e60:	f04f 0300 	mov.w	r3, #0
 8003e64:	f04f 0400 	mov.w	r4, #0
 8003e68:	0194      	lsls	r4, r2, #6
 8003e6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e6e:	018b      	lsls	r3, r1, #6
 8003e70:	1a5b      	subs	r3, r3, r1
 8003e72:	eb64 0402 	sbc.w	r4, r4, r2
 8003e76:	f04f 0100 	mov.w	r1, #0
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	00e2      	lsls	r2, r4, #3
 8003e80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e84:	00d9      	lsls	r1, r3, #3
 8003e86:	460b      	mov	r3, r1
 8003e88:	4614      	mov	r4, r2
 8003e8a:	195b      	adds	r3, r3, r5
 8003e8c:	eb44 0406 	adc.w	r4, r4, r6
 8003e90:	f04f 0100 	mov.w	r1, #0
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	02a2      	lsls	r2, r4, #10
 8003e9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003e9e:	0299      	lsls	r1, r3, #10
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4614      	mov	r4, r2
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f04f 0400 	mov.w	r4, #0
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4623      	mov	r3, r4
 8003eb2:	f7fc f9e5 	bl	8000280 <__aeabi_uldivmod>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	460c      	mov	r4, r1
 8003eba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ecc:	68fa      	ldr	r2, [r7, #12]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	60bb      	str	r3, [r7, #8]
      break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003eda:	60bb      	str	r3, [r7, #8]
      break;
 8003edc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ede:	68bb      	ldr	r3, [r7, #8]
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	00f42400 	.word	0x00f42400
 8003ef0:	007a1200 	.word	0x007a1200

08003ef4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003efa:	681b      	ldr	r3, [r3, #0]
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000028 	.word	0x20000028

08003f0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003f10:	f7ff fff0 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f14:	4601      	mov	r1, r0
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	0a9b      	lsrs	r3, r3, #10
 8003f1c:	f003 0307 	and.w	r3, r3, #7
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f22:	5cd3      	ldrb	r3, [r2, r3]
 8003f24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	08008c94 	.word	0x08008c94

08003f34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003f38:	f7ff ffdc 	bl	8003ef4 <HAL_RCC_GetHCLKFreq>
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	4b05      	ldr	r3, [pc, #20]	; (8003f54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	0b5b      	lsrs	r3, r3, #13
 8003f44:	f003 0307 	and.w	r3, r3, #7
 8003f48:	4a03      	ldr	r2, [pc, #12]	; (8003f58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f4a:	5cd3      	ldrb	r3, [r2, r3]
 8003f4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	40023800 	.word	0x40023800
 8003f58:	08008c94 	.word	0x08008c94

08003f5c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d105      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d035      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f84:	4b62      	ldr	r3, [pc, #392]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f8a:	f7fc fb5f 	bl	800064c <HAL_GetTick>
 8003f8e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f90:	e008      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003f92:	f7fc fb5b 	bl	800064c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d901      	bls.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e0b0      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fa4:	4b5b      	ldr	r3, [pc, #364]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1f0      	bne.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	019a      	lsls	r2, r3, #6
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	071b      	lsls	r3, r3, #28
 8003fbc:	4955      	ldr	r1, [pc, #340]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003fc4:	4b52      	ldr	r3, [pc, #328]	; (8004110 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fca:	f7fc fb3f 	bl	800064c <HAL_GetTick>
 8003fce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003fd2:	f7fc fb3b 	bl	800064c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e090      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003fe4:	4b4b      	ldr	r3, [pc, #300]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0302 	and.w	r3, r3, #2
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	f000 8083 	beq.w	8004104 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
 8004002:	4b44      	ldr	r3, [pc, #272]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	4a43      	ldr	r2, [pc, #268]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400c:	6413      	str	r3, [r2, #64]	; 0x40
 800400e:	4b41      	ldr	r3, [pc, #260]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004016:	60fb      	str	r3, [r7, #12]
 8004018:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800401a:	4b3f      	ldr	r3, [pc, #252]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a3e      	ldr	r2, [pc, #248]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004024:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004026:	f7fc fb11 	bl	800064c <HAL_GetTick>
 800402a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800402c:	e008      	b.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800402e:	f7fc fb0d 	bl	800064c <HAL_GetTick>
 8004032:	4602      	mov	r2, r0
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	2b02      	cmp	r3, #2
 800403a:	d901      	bls.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800403c:	2303      	movs	r3, #3
 800403e:	e062      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004040:	4b35      	ldr	r3, [pc, #212]	; (8004118 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004048:	2b00      	cmp	r3, #0
 800404a:	d0f0      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800404c:	4b31      	ldr	r3, [pc, #196]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800404e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004054:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d02f      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	429a      	cmp	r2, r3
 8004068:	d028      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800406a:	4b2a      	ldr	r3, [pc, #168]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800406c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004072:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004074:	4b29      	ldr	r3, [pc, #164]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004076:	2201      	movs	r2, #1
 8004078:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800407a:	4b28      	ldr	r3, [pc, #160]	; (800411c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800407c:	2200      	movs	r2, #0
 800407e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004080:	4a24      	ldr	r2, [pc, #144]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004086:	4b23      	ldr	r3, [pc, #140]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d114      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004092:	f7fc fadb 	bl	800064c <HAL_GetTick>
 8004096:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004098:	e00a      	b.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fc fad7 	bl	800064c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d901      	bls.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e02a      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b0:	4b18      	ldr	r3, [pc, #96]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d0ee      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c8:	d10d      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80040ca:	4b12      	ldr	r3, [pc, #72]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80040da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040de:	490d      	ldr	r1, [pc, #52]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	608b      	str	r3, [r1, #8]
 80040e4:	e005      	b.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040ec:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80040f0:	6093      	str	r3, [r2, #8]
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040fe:	4905      	ldr	r1, [pc, #20]	; (8004114 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004100:	4313      	orrs	r3, r2
 8004102:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	42470068 	.word	0x42470068
 8004114:	40023800 	.word	0x40023800
 8004118:	40007000 	.word	0x40007000
 800411c:	42470e40 	.word	0x42470e40

08004120 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800412c:	2300      	movs	r3, #0
 800412e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d13d      	bne.n	80041ba <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004146:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d004      	beq.n	8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800414e:	2b01      	cmp	r3, #1
 8004150:	d12f      	bne.n	80041b2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004152:	4b1e      	ldr	r3, [pc, #120]	; (80041cc <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004154:	617b      	str	r3, [r7, #20]
          break;
 8004156:	e02f      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004158:	4b1b      	ldr	r3, [pc, #108]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004164:	d108      	bne.n	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004166:	4b18      	ldr	r3, [pc, #96]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800416e:	4a18      	ldr	r2, [pc, #96]	; (80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004170:	fbb2 f3f3 	udiv	r3, r2, r3
 8004174:	613b      	str	r3, [r7, #16]
 8004176:	e007      	b.n	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004178:	4b13      	ldr	r3, [pc, #76]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004180:	4a14      	ldr	r2, [pc, #80]	; (80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004182:	fbb2 f3f3 	udiv	r3, r2, r3
 8004186:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004188:	4b0f      	ldr	r3, [pc, #60]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800418a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418e:	099b      	lsrs	r3, r3, #6
 8004190:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800419c:	4b0a      	ldr	r3, [pc, #40]	; (80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800419e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041a2:	0f1b      	lsrs	r3, r3, #28
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ae:	617b      	str	r3, [r7, #20]
          break;
 80041b0:	e002      	b.n	80041b8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
          break;
 80041b6:	bf00      	nop
        }
      }
      break;
 80041b8:	bf00      	nop
    }
  }
  return frequency;
 80041ba:	697b      	ldr	r3, [r7, #20]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	371c      	adds	r7, #28
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00bb8000 	.word	0x00bb8000
 80041d0:	007a1200 	.word	0x007a1200
 80041d4:	00f42400 	.word	0x00f42400

080041d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e056      	b.n	8004298 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d106      	bne.n	800420a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f003 fc89 	bl	8007b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2202      	movs	r2, #2
 800420e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004220:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685a      	ldr	r2, [r3, #4]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	431a      	orrs	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	431a      	orrs	r2, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	69db      	ldr	r3, [r3, #28]
 800424c:	431a      	orrs	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	ea42 0103 	orr.w	r1, r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	699b      	ldr	r3, [r3, #24]
 8004266:	0c1b      	lsrs	r3, r3, #16
 8004268:	f003 0104 	and.w	r1, r3, #4
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	430a      	orrs	r2, r1
 8004276:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004286:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e03f      	b.n	8004332 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042b8:	b2db      	uxtb	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d106      	bne.n	80042cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f003 fc70 	bl	8007bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2224      	movs	r2, #36	; 0x24
 80042d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	68da      	ldr	r2, [r3, #12]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f000 f90b 	bl	8004500 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	691a      	ldr	r2, [r3, #16]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	695a      	ldr	r2, [r3, #20]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004308:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68da      	ldr	r2, [r3, #12]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004318:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b088      	sub	sp, #32
 800433e:	af02      	add	r7, sp, #8
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800434a:	2300      	movs	r3, #0
 800434c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004354:	b2db      	uxtb	r3, r3
 8004356:	2b20      	cmp	r3, #32
 8004358:	f040 8083 	bne.w	8004462 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d002      	beq.n	8004368 <HAL_UART_Transmit+0x2e>
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d101      	bne.n	800436c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e07b      	b.n	8004464 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004372:	2b01      	cmp	r3, #1
 8004374:	d101      	bne.n	800437a <HAL_UART_Transmit+0x40>
 8004376:	2302      	movs	r3, #2
 8004378:	e074      	b.n	8004464 <HAL_UART_Transmit+0x12a>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2201      	movs	r2, #1
 800437e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2221      	movs	r2, #33	; 0x21
 800438c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004390:	f7fc f95c 	bl	800064c <HAL_GetTick>
 8004394:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	88fa      	ldrh	r2, [r7, #6]
 800439a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	88fa      	ldrh	r2, [r7, #6]
 80043a0:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043a2:	e042      	b.n	800442a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	3b01      	subs	r3, #1
 80043ac:	b29a      	uxth	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ba:	d122      	bne.n	8004402 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	2200      	movs	r2, #0
 80043c4:	2180      	movs	r1, #128	; 0x80
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f850 	bl	800446c <UART_WaitOnFlagUntilTimeout>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e046      	b.n	8004464 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	881b      	ldrh	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043e8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	3302      	adds	r3, #2
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	e017      	b.n	800442a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	3301      	adds	r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	e013      	b.n	800442a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	2200      	movs	r2, #0
 800440a:	2180      	movs	r1, #128	; 0x80
 800440c:	68f8      	ldr	r0, [r7, #12]
 800440e:	f000 f82d 	bl	800446c <UART_WaitOnFlagUntilTimeout>
 8004412:	4603      	mov	r3, r0
 8004414:	2b00      	cmp	r3, #0
 8004416:	d001      	beq.n	800441c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e023      	b.n	8004464 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	1c5a      	adds	r2, r3, #1
 8004420:	60ba      	str	r2, [r7, #8]
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1b7      	bne.n	80043a4 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	2140      	movs	r1, #64	; 0x40
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 f814 	bl	800446c <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e00a      	b.n	8004464 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447c:	e02c      	b.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004484:	d028      	beq.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d007      	beq.n	800449c <UART_WaitOnFlagUntilTimeout+0x30>
 800448c:	f7fc f8de 	bl	800064c <HAL_GetTick>
 8004490:	4602      	mov	r2, r0
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	1ad3      	subs	r3, r2, r3
 8004496:	69ba      	ldr	r2, [r7, #24]
 8004498:	429a      	cmp	r2, r3
 800449a:	d21d      	bcs.n	80044d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80044aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0201 	bic.w	r2, r2, #1
 80044ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80044d4:	2303      	movs	r3, #3
 80044d6:	e00f      	b.n	80044f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	4013      	ands	r3, r2
 80044e2:	68ba      	ldr	r2, [r7, #8]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	bf0c      	ite	eq
 80044e8:	2301      	moveq	r3, #1
 80044ea:	2300      	movne	r3, #0
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	79fb      	ldrb	r3, [r7, #7]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d0c3      	beq.n	800447e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004500:	b5b0      	push	{r4, r5, r7, lr}
 8004502:	b084      	sub	sp, #16
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	689a      	ldr	r2, [r3, #8]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	431a      	orrs	r2, r3
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	695b      	ldr	r3, [r3, #20]
 800452c:	431a      	orrs	r2, r3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	69db      	ldr	r3, [r3, #28]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004540:	f023 030c 	bic.w	r3, r3, #12
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	68f9      	ldr	r1, [r7, #12]
 800454a:	430b      	orrs	r3, r1
 800454c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	430a      	orrs	r2, r1
 8004562:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69db      	ldr	r3, [r3, #28]
 8004568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800456c:	f040 80e4 	bne.w	8004738 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4aab      	ldr	r2, [pc, #684]	; (8004824 <UART_SetConfig+0x324>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d004      	beq.n	8004584 <UART_SetConfig+0x84>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4aaa      	ldr	r2, [pc, #680]	; (8004828 <UART_SetConfig+0x328>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d16c      	bne.n	800465e <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004584:	f7ff fcd6 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8004588:	4602      	mov	r2, r0
 800458a:	4613      	mov	r3, r2
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	009a      	lsls	r2, r3, #2
 8004592:	441a      	add	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	fbb2 f3f3 	udiv	r3, r2, r3
 800459e:	4aa3      	ldr	r2, [pc, #652]	; (800482c <UART_SetConfig+0x32c>)
 80045a0:	fba2 2303 	umull	r2, r3, r2, r3
 80045a4:	095b      	lsrs	r3, r3, #5
 80045a6:	011c      	lsls	r4, r3, #4
 80045a8:	f7ff fcc4 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 80045ac:	4602      	mov	r2, r0
 80045ae:	4613      	mov	r3, r2
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	4413      	add	r3, r2
 80045b4:	009a      	lsls	r2, r3, #2
 80045b6:	441a      	add	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fbb2 f5f3 	udiv	r5, r2, r3
 80045c2:	f7ff fcb7 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009a      	lsls	r2, r3, #2
 80045d0:	441a      	add	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045dc:	4a93      	ldr	r2, [pc, #588]	; (800482c <UART_SetConfig+0x32c>)
 80045de:	fba2 2303 	umull	r2, r3, r2, r3
 80045e2:	095b      	lsrs	r3, r3, #5
 80045e4:	2264      	movs	r2, #100	; 0x64
 80045e6:	fb02 f303 	mul.w	r3, r2, r3
 80045ea:	1aeb      	subs	r3, r5, r3
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	3332      	adds	r3, #50	; 0x32
 80045f0:	4a8e      	ldr	r2, [pc, #568]	; (800482c <UART_SetConfig+0x32c>)
 80045f2:	fba2 2303 	umull	r2, r3, r2, r3
 80045f6:	095b      	lsrs	r3, r3, #5
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045fe:	441c      	add	r4, r3
 8004600:	f7ff fc98 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8004604:	4602      	mov	r2, r0
 8004606:	4613      	mov	r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	009a      	lsls	r2, r3, #2
 800460e:	441a      	add	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	fbb2 f5f3 	udiv	r5, r2, r3
 800461a:	f7ff fc8b 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 800461e:	4602      	mov	r2, r0
 8004620:	4613      	mov	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4413      	add	r3, r2
 8004626:	009a      	lsls	r2, r3, #2
 8004628:	441a      	add	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	4a7d      	ldr	r2, [pc, #500]	; (800482c <UART_SetConfig+0x32c>)
 8004636:	fba2 2303 	umull	r2, r3, r2, r3
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2264      	movs	r2, #100	; 0x64
 800463e:	fb02 f303 	mul.w	r3, r2, r3
 8004642:	1aeb      	subs	r3, r5, r3
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	3332      	adds	r3, #50	; 0x32
 8004648:	4a78      	ldr	r2, [pc, #480]	; (800482c <UART_SetConfig+0x32c>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 0207 	and.w	r2, r3, #7
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4422      	add	r2, r4
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	e154      	b.n	8004908 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800465e:	f7ff fc55 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8004662:	4602      	mov	r2, r0
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009a      	lsls	r2, r3, #2
 800466c:	441a      	add	r2, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	005b      	lsls	r3, r3, #1
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	4a6c      	ldr	r2, [pc, #432]	; (800482c <UART_SetConfig+0x32c>)
 800467a:	fba2 2303 	umull	r2, r3, r2, r3
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	011c      	lsls	r4, r3, #4
 8004682:	f7ff fc43 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8004686:	4602      	mov	r2, r0
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009a      	lsls	r2, r3, #2
 8004690:	441a      	add	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	fbb2 f5f3 	udiv	r5, r2, r3
 800469c:	f7ff fc36 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80046a0:	4602      	mov	r2, r0
 80046a2:	4613      	mov	r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	4413      	add	r3, r2
 80046a8:	009a      	lsls	r2, r3, #2
 80046aa:	441a      	add	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b6:	4a5d      	ldr	r2, [pc, #372]	; (800482c <UART_SetConfig+0x32c>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	2264      	movs	r2, #100	; 0x64
 80046c0:	fb02 f303 	mul.w	r3, r2, r3
 80046c4:	1aeb      	subs	r3, r5, r3
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	3332      	adds	r3, #50	; 0x32
 80046ca:	4a58      	ldr	r2, [pc, #352]	; (800482c <UART_SetConfig+0x32c>)
 80046cc:	fba2 2303 	umull	r2, r3, r2, r3
 80046d0:	095b      	lsrs	r3, r3, #5
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046d8:	441c      	add	r4, r3
 80046da:	f7ff fc17 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80046de:	4602      	mov	r2, r0
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009a      	lsls	r2, r3, #2
 80046e8:	441a      	add	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	fbb2 f5f3 	udiv	r5, r2, r3
 80046f4:	f7ff fc0a 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80046f8:	4602      	mov	r2, r0
 80046fa:	4613      	mov	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	4413      	add	r3, r2
 8004700:	009a      	lsls	r2, r3, #2
 8004702:	441a      	add	r2, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	fbb2 f3f3 	udiv	r3, r2, r3
 800470e:	4a47      	ldr	r2, [pc, #284]	; (800482c <UART_SetConfig+0x32c>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	095b      	lsrs	r3, r3, #5
 8004716:	2264      	movs	r2, #100	; 0x64
 8004718:	fb02 f303 	mul.w	r3, r2, r3
 800471c:	1aeb      	subs	r3, r5, r3
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	3332      	adds	r3, #50	; 0x32
 8004722:	4a42      	ldr	r2, [pc, #264]	; (800482c <UART_SetConfig+0x32c>)
 8004724:	fba2 2303 	umull	r2, r3, r2, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	f003 0207 	and.w	r2, r3, #7
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4422      	add	r2, r4
 8004734:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004736:	e0e7      	b.n	8004908 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a39      	ldr	r2, [pc, #228]	; (8004824 <UART_SetConfig+0x324>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d004      	beq.n	800474c <UART_SetConfig+0x24c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a38      	ldr	r2, [pc, #224]	; (8004828 <UART_SetConfig+0x328>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d171      	bne.n	8004830 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800474c:	f7ff fbf2 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8004750:	4602      	mov	r2, r0
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009a      	lsls	r2, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	4a31      	ldr	r2, [pc, #196]	; (800482c <UART_SetConfig+0x32c>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	011c      	lsls	r4, r3, #4
 8004770:	f7ff fbe0 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 8004774:	4602      	mov	r2, r0
 8004776:	4613      	mov	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	4413      	add	r3, r2
 800477c:	009a      	lsls	r2, r3, #2
 800477e:	441a      	add	r2, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	fbb2 f5f3 	udiv	r5, r2, r3
 800478a:	f7ff fbd3 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 800478e:	4602      	mov	r2, r0
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009a      	lsls	r2, r3, #2
 8004798:	441a      	add	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a4:	4a21      	ldr	r2, [pc, #132]	; (800482c <UART_SetConfig+0x32c>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	2264      	movs	r2, #100	; 0x64
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	1aeb      	subs	r3, r5, r3
 80047b4:	011b      	lsls	r3, r3, #4
 80047b6:	3332      	adds	r3, #50	; 0x32
 80047b8:	4a1c      	ldr	r2, [pc, #112]	; (800482c <UART_SetConfig+0x32c>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c4:	441c      	add	r4, r3
 80047c6:	f7ff fbb5 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 80047ca:	4602      	mov	r2, r0
 80047cc:	4613      	mov	r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	009a      	lsls	r2, r3, #2
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	fbb2 f5f3 	udiv	r5, r2, r3
 80047e0:	f7ff fba8 	bl	8003f34 <HAL_RCC_GetPCLK2Freq>
 80047e4:	4602      	mov	r2, r0
 80047e6:	4613      	mov	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	4413      	add	r3, r2
 80047ec:	009a      	lsls	r2, r3, #2
 80047ee:	441a      	add	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	4a0c      	ldr	r2, [pc, #48]	; (800482c <UART_SetConfig+0x32c>)
 80047fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2264      	movs	r2, #100	; 0x64
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	1aeb      	subs	r3, r5, r3
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	3332      	adds	r3, #50	; 0x32
 800480e:	4a07      	ldr	r2, [pc, #28]	; (800482c <UART_SetConfig+0x32c>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4422      	add	r2, r4
 8004820:	609a      	str	r2, [r3, #8]
 8004822:	e071      	b.n	8004908 <UART_SetConfig+0x408>
 8004824:	40011000 	.word	0x40011000
 8004828:	40011400 	.word	0x40011400
 800482c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004830:	f7ff fb6c 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8004834:	4602      	mov	r2, r0
 8004836:	4613      	mov	r3, r2
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	009a      	lsls	r2, r3, #2
 800483e:	441a      	add	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	fbb2 f3f3 	udiv	r3, r2, r3
 800484a:	4a31      	ldr	r2, [pc, #196]	; (8004910 <UART_SetConfig+0x410>)
 800484c:	fba2 2303 	umull	r2, r3, r2, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	011c      	lsls	r4, r3, #4
 8004854:	f7ff fb5a 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8004858:	4602      	mov	r2, r0
 800485a:	4613      	mov	r3, r2
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	009a      	lsls	r2, r3, #2
 8004862:	441a      	add	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	fbb2 f5f3 	udiv	r5, r2, r3
 800486e:	f7ff fb4d 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 8004872:	4602      	mov	r2, r0
 8004874:	4613      	mov	r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4413      	add	r3, r2
 800487a:	009a      	lsls	r2, r3, #2
 800487c:	441a      	add	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	4a21      	ldr	r2, [pc, #132]	; (8004910 <UART_SetConfig+0x410>)
 800488a:	fba2 2303 	umull	r2, r3, r2, r3
 800488e:	095b      	lsrs	r3, r3, #5
 8004890:	2264      	movs	r2, #100	; 0x64
 8004892:	fb02 f303 	mul.w	r3, r2, r3
 8004896:	1aeb      	subs	r3, r5, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	3332      	adds	r3, #50	; 0x32
 800489c:	4a1c      	ldr	r2, [pc, #112]	; (8004910 <UART_SetConfig+0x410>)
 800489e:	fba2 2303 	umull	r2, r3, r2, r3
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048a8:	441c      	add	r4, r3
 80048aa:	f7ff fb2f 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80048ae:	4602      	mov	r2, r0
 80048b0:	4613      	mov	r3, r2
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	4413      	add	r3, r2
 80048b6:	009a      	lsls	r2, r3, #2
 80048b8:	441a      	add	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	fbb2 f5f3 	udiv	r5, r2, r3
 80048c4:	f7ff fb22 	bl	8003f0c <HAL_RCC_GetPCLK1Freq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009a      	lsls	r2, r3, #2
 80048d2:	441a      	add	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	009b      	lsls	r3, r3, #2
 80048da:	fbb2 f3f3 	udiv	r3, r2, r3
 80048de:	4a0c      	ldr	r2, [pc, #48]	; (8004910 <UART_SetConfig+0x410>)
 80048e0:	fba2 2303 	umull	r2, r3, r2, r3
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	2264      	movs	r2, #100	; 0x64
 80048e8:	fb02 f303 	mul.w	r3, r2, r3
 80048ec:	1aeb      	subs	r3, r5, r3
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	3332      	adds	r3, #50	; 0x32
 80048f2:	4a07      	ldr	r2, [pc, #28]	; (8004910 <UART_SetConfig+0x410>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4422      	add	r2, r4
 8004904:	609a      	str	r2, [r3, #8]
}
 8004906:	e7ff      	b.n	8004908 <UART_SetConfig+0x408>
 8004908:	bf00      	nop
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bdb0      	pop	{r4, r5, r7, pc}
 8004910:	51eb851f 	.word	0x51eb851f

08004914 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004914:	b084      	sub	sp, #16
 8004916:	b580      	push	{r7, lr}
 8004918:	b084      	sub	sp, #16
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
 800491e:	f107 001c 	add.w	r0, r7, #28
 8004922:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004928:	2b01      	cmp	r3, #1
 800492a:	d122      	bne.n	8004972 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004930:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004940:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f94a 	bl	8004c00 <USB_CoreReset>
 800496c:	4603      	mov	r3, r0
 800496e:	73fb      	strb	r3, [r7, #15]
 8004970:	e01a      	b.n	80049a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f93e 	bl	8004c00 <USB_CoreReset>
 8004984:	4603      	mov	r3, r0
 8004986:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
 800499a:	e005      	b.n	80049a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10b      	bne.n	80049c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f043 0206 	orr.w	r2, r3, #6
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f043 0220 	orr.w	r2, r3, #32
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049d2:	b004      	add	sp, #16
 80049d4:	4770      	bx	lr

080049d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f043 0201 	orr.w	r2, r3, #1
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 0201 	bic.w	r2, r3, #1
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	370c      	adds	r7, #12
 8004a12:	46bd      	mov	sp, r7
 8004a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a18:	4770      	bx	lr

08004a1a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	460b      	mov	r3, r1
 8004a24:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a32:	78fb      	ldrb	r3, [r7, #3]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d106      	bne.n	8004a46 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	e00b      	b.n	8004a5e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a46:	78fb      	ldrb	r3, [r7, #3]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d106      	bne.n	8004a5a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	e001      	b.n	8004a5e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e003      	b.n	8004a66 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004a5e:	2032      	movs	r0, #50	; 0x32
 8004a60:	f7fb fe00 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b085      	sub	sp, #20
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	019b      	lsls	r3, r3, #6
 8004a82:	f043 0220 	orr.w	r2, r3, #32
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <USB_FlushTxFifo+0x48>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d901      	bls.n	8004a9c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	e006      	b.n	8004aaa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b20      	cmp	r3, #32
 8004aa6:	d0f0      	beq.n	8004a8a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	00030d40 	.word	0x00030d40

08004abc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2210      	movs	r2, #16
 8004acc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	4a09      	ldr	r2, [pc, #36]	; (8004afc <USB_FlushRxFifo+0x40>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d901      	bls.n	8004ae0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e006      	b.n	8004aee <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d0f0      	beq.n	8004ace <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	00030d40 	.word	0x00030d40

08004b00 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b089      	sub	sp, #36	; 0x24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4611      	mov	r1, r2
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	460b      	mov	r3, r1
 8004b10:	71fb      	strb	r3, [r7, #7]
 8004b12:	4613      	mov	r3, r2
 8004b14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004b1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d11a      	bne.n	8004b5c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004b26:	88bb      	ldrh	r3, [r7, #4]
 8004b28:	3303      	adds	r3, #3
 8004b2a:	089b      	lsrs	r3, r3, #2
 8004b2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004b2e:	2300      	movs	r3, #0
 8004b30:	61bb      	str	r3, [r7, #24]
 8004b32:	e00f      	b.n	8004b54 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004b34:	79fb      	ldrb	r3, [r7, #7]
 8004b36:	031a      	lsls	r2, r3, #12
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	461a      	mov	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	3301      	adds	r3, #1
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	69ba      	ldr	r2, [r7, #24]
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d3eb      	bcc.n	8004b34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3724      	adds	r7, #36	; 0x24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b089      	sub	sp, #36	; 0x24
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	60f8      	str	r0, [r7, #12]
 8004b72:	60b9      	str	r1, [r7, #8]
 8004b74:	4613      	mov	r3, r2
 8004b76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004b80:	88fb      	ldrh	r3, [r7, #6]
 8004b82:	3303      	adds	r3, #3
 8004b84:	089b      	lsrs	r3, r3, #2
 8004b86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	61bb      	str	r3, [r7, #24]
 8004b8c:	e00b      	b.n	8004ba6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	3301      	adds	r3, #1
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d3ef      	bcc.n	8004b8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004bae:	69fb      	ldr	r3, [r7, #28]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3724      	adds	r7, #36	; 0x24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b085      	sub	sp, #20
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	699b      	ldr	r3, [r3, #24]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0301 	and.w	r3, r3, #1
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	370c      	adds	r7, #12
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a13      	ldr	r2, [pc, #76]	; (8004c64 <USB_CoreReset+0x64>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d901      	bls.n	8004c1e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e01b      	b.n	8004c56 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	daf2      	bge.n	8004c0c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c26:	2300      	movs	r3, #0
 8004c28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f043 0201 	orr.w	r2, r3, #1
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4a09      	ldr	r2, [pc, #36]	; (8004c64 <USB_CoreReset+0x64>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e006      	b.n	8004c56 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d0f0      	beq.n	8004c36 <USB_CoreReset+0x36>

  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	00030d40 	.word	0x00030d40

08004c68 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c68:	b084      	sub	sp, #16
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	f107 001c 	add.w	r0, r7, #28
 8004c76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c84:	461a      	mov	r2, r3
 8004c86:	2300      	movs	r3, #0
 8004c88:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d018      	beq.n	8004cec <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 8004cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbc:	2b03      	cmp	r3, #3
 8004cbe:	d10a      	bne.n	8004cd6 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cce:	f043 0304 	orr.w	r3, r3, #4
 8004cd2:	6013      	str	r3, [r2, #0]
 8004cd4:	e014      	b.n	8004d00 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004ce4:	f023 0304 	bic.w	r3, r3, #4
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	e009      	b.n	8004d00 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68ba      	ldr	r2, [r7, #8]
 8004cf6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004d00:	2110      	movs	r1, #16
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff feb4 	bl	8004a70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f7ff fed7 	bl	8004abc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d0e:	2300      	movs	r3, #0
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	e015      	b.n	8004d40 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d20:	461a      	mov	r2, r3
 8004d22:	f04f 33ff 	mov.w	r3, #4294967295
 8004d26:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d34:	461a      	mov	r2, r3
 8004d36:	2300      	movs	r3, #0
 8004d38:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d3e5      	bcc.n	8004d14 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004d48:	2101      	movs	r1, #1
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f000 f8ac 	bl	8004ea8 <USB_DriveVbus>

  HAL_Delay(200U);
 8004d50:	20c8      	movs	r0, #200	; 0xc8
 8004d52:	f7fb fc87 	bl	8000664 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d62:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d76:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a14      	ldr	r2, [pc, #80]	; (8004dcc <USB_HostInit+0x164>)
 8004d7c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <USB_HostInit+0x168>)
 8004d82:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004d86:	e009      	b.n	8004d9c <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2280      	movs	r2, #128	; 0x80
 8004d8c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <USB_HostInit+0x16c>)
 8004d92:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	4a10      	ldr	r2, [pc, #64]	; (8004dd8 <USB_HostInit+0x170>)
 8004d98:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d105      	bne.n	8004dae <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f043 0210 	orr.w	r2, r3, #16
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	4b0a      	ldr	r3, [pc, #40]	; (8004ddc <USB_HostInit+0x174>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004dc6:	b004      	add	sp, #16
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	01000200 	.word	0x01000200
 8004dd0:	00e00300 	.word	0x00e00300
 8004dd4:	00600080 	.word	0x00600080
 8004dd8:	004000e0 	.word	0x004000e0
 8004ddc:	a3200008 	.word	0xa3200008

08004de0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b085      	sub	sp, #20
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	78fb      	ldrb	r3, [r7, #3]
 8004e0e:	f003 0303 	and.w	r3, r3, #3
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004e1c:	78fb      	ldrb	r3, [r7, #3]
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d107      	bne.n	8004e32 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e28:	461a      	mov	r2, r3
 8004e2a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004e2e:	6053      	str	r3, [r2, #4]
 8004e30:	e009      	b.n	8004e46 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d106      	bne.n	8004e46 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f241 7370 	movw	r3, #6000	; 0x1770
 8004e44:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004e46:	2300      	movs	r3, #0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3714      	adds	r7, #20
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr

08004e54 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004e60:	2300      	movs	r3, #0
 8004e62:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004e74:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e82:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004e84:	2064      	movs	r0, #100	; 0x64
 8004e86:	f7fb fbed 	bl	8000664 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e96:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004e98:	200a      	movs	r0, #10
 8004e9a:	f7fb fbe3 	bl	8000664 <HAL_Delay>

  return HAL_OK;
 8004e9e:	2300      	movs	r3, #0
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3710      	adds	r7, #16
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004ecc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <USB_DriveVbus+0x44>
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d106      	bne.n	8004eec <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004ee6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004eea:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef6:	d109      	bne.n	8004f0c <USB_DriveVbus+0x64>
 8004ef8:	78fb      	ldrb	r3, [r7, #3]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004f06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f0a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	0c5b      	lsrs	r3, r3, #17
 8004f38:	f003 0303 	and.w	r3, r3, #3
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	b29b      	uxth	r3, r3
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3714      	adds	r7, #20
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
	...

08004f6c <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	4608      	mov	r0, r1
 8004f76:	4611      	mov	r1, r2
 8004f78:	461a      	mov	r2, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	70fb      	strb	r3, [r7, #3]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	70bb      	strb	r3, [r7, #2]
 8004f82:	4613      	mov	r3, r2
 8004f84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f86:	2300      	movs	r3, #0
 8004f88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004fa6:	2b03      	cmp	r3, #3
 8004fa8:	d87e      	bhi.n	80050a8 <USB_HC_Init+0x13c>
 8004faa:	a201      	add	r2, pc, #4	; (adr r2, 8004fb0 <USB_HC_Init+0x44>)
 8004fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb0:	08004fc1 	.word	0x08004fc1
 8004fb4:	0800506b 	.word	0x0800506b
 8004fb8:	08004fc1 	.word	0x08004fc1
 8004fbc:	0800502d 	.word	0x0800502d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f240 439d 	movw	r3, #1181	; 0x49d
 8004fd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004fd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	da10      	bge.n	8004ffe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004fdc:	78fb      	ldrb	r3, [r7, #3]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	0151      	lsls	r1, r2, #5
 8004fee:	68ba      	ldr	r2, [r7, #8]
 8004ff0:	440a      	add	r2, r1
 8004ff2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ffa:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004ffc:	e057      	b.n	80050ae <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d051      	beq.n	80050ae <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	4413      	add	r3, r2
 8005012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	78fa      	ldrb	r2, [r7, #3]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	440a      	add	r2, r1
 8005020:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005024:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005028:	60d3      	str	r3, [r2, #12]
      break;
 800502a:	e040      	b.n	80050ae <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800502c:	78fb      	ldrb	r3, [r7, #3]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	4413      	add	r3, r2
 8005034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005038:	461a      	mov	r2, r3
 800503a:	f240 639d 	movw	r3, #1693	; 0x69d
 800503e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005040:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005044:	2b00      	cmp	r3, #0
 8005046:	da34      	bge.n	80050b2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	015a      	lsls	r2, r3, #5
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4413      	add	r3, r2
 8005050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	0151      	lsls	r1, r2, #5
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	440a      	add	r2, r1
 800505e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005066:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005068:	e023      	b.n	80050b2 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005076:	461a      	mov	r2, r3
 8005078:	f240 2325 	movw	r3, #549	; 0x225
 800507c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800507e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005082:	2b00      	cmp	r3, #0
 8005084:	da17      	bge.n	80050b6 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	015a      	lsls	r2, r3, #5
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	4413      	add	r3, r2
 800508e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	0151      	lsls	r1, r2, #5
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	440a      	add	r2, r1
 800509c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050a0:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80050a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80050a6:	e006      	b.n	80050b6 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	75fb      	strb	r3, [r7, #23]
      break;
 80050ac:	e004      	b.n	80050b8 <USB_HC_Init+0x14c>
      break;
 80050ae:	bf00      	nop
 80050b0:	e002      	b.n	80050b8 <USB_HC_Init+0x14c>
      break;
 80050b2:	bf00      	nop
 80050b4:	e000      	b.n	80050b8 <USB_HC_Init+0x14c>
      break;
 80050b6:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	78fb      	ldrb	r3, [r7, #3]
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	2101      	movs	r1, #1
 80050c8:	fa01 f303 	lsl.w	r3, r1, r3
 80050cc:	68b9      	ldr	r1, [r7, #8]
 80050ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80050d2:	4313      	orrs	r3, r2
 80050d4:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80050e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	da03      	bge.n	80050f2 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80050ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ee:	613b      	str	r3, [r7, #16]
 80050f0:	e001      	b.n	80050f6 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 80050f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d103      	bne.n	8005106 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80050fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e001      	b.n	800510a <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800510a:	787b      	ldrb	r3, [r7, #1]
 800510c:	059b      	lsls	r3, r3, #22
 800510e:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005112:	78bb      	ldrb	r3, [r7, #2]
 8005114:	02db      	lsls	r3, r3, #11
 8005116:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800511a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800511c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005120:	049b      	lsls	r3, r3, #18
 8005122:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005126:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005128:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800512a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800512e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005134:	78fb      	ldrb	r3, [r7, #3]
 8005136:	0159      	lsls	r1, r3, #5
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	440b      	add	r3, r1
 800513c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005140:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005146:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8005148:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800514c:	2b03      	cmp	r3, #3
 800514e:	d10f      	bne.n	8005170 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8005150:	78fb      	ldrb	r3, [r7, #3]
 8005152:	015a      	lsls	r2, r3, #5
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4413      	add	r3, r2
 8005158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	0151      	lsls	r1, r2, #5
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	440a      	add	r2, r1
 8005166:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800516a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800516e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005170:	7dfb      	ldrb	r3, [r7, #23]
}
 8005172:	4618      	mov	r0, r3
 8005174:	371c      	adds	r7, #28
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop

08005180 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b08c      	sub	sp, #48	; 0x30
 8005184:	af02      	add	r7, sp, #8
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	60b9      	str	r1, [r7, #8]
 800518a:	4613      	mov	r3, r2
 800518c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	785b      	ldrb	r3, [r3, #1]
 8005196:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800519c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d028      	beq.n	80051fc <USB_HC_StartXfer+0x7c>
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	791b      	ldrb	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d124      	bne.n	80051fc <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d10b      	bne.n	80051d0 <USB_HC_StartXfer+0x50>
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	795b      	ldrb	r3, [r3, #5]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d107      	bne.n	80051d0 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	785b      	ldrb	r3, [r3, #1]
 80051c4:	4619      	mov	r1, r3
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f000 fa2e 	bl	8005628 <USB_DoPing>
      return HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	e112      	b.n	80053f6 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d112      	bne.n	80051fc <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	6a3b      	ldr	r3, [r7, #32]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	6a3a      	ldr	r2, [r7, #32]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051f0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80051f4:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2200      	movs	r2, #0
 80051fa:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d018      	beq.n	8005236 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	8912      	ldrh	r2, [r2, #8]
 800520c:	4413      	add	r3, r2
 800520e:	3b01      	subs	r3, #1
 8005210:	68ba      	ldr	r2, [r7, #8]
 8005212:	8912      	ldrh	r2, [r2, #8]
 8005214:	fbb3 f3f2 	udiv	r3, r3, r2
 8005218:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800521a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800521c:	8b7b      	ldrh	r3, [r7, #26]
 800521e:	429a      	cmp	r2, r3
 8005220:	d90b      	bls.n	800523a <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8005222:	8b7b      	ldrh	r3, [r7, #26]
 8005224:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005226:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005228:	68ba      	ldr	r2, [r7, #8]
 800522a:	8912      	ldrh	r2, [r2, #8]
 800522c:	fb02 f203 	mul.w	r2, r2, r3
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	611a      	str	r2, [r3, #16]
 8005234:	e001      	b.n	800523a <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8005236:	2301      	movs	r3, #1
 8005238:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	78db      	ldrb	r3, [r3, #3]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d006      	beq.n	8005250 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005244:	68ba      	ldr	r2, [r7, #8]
 8005246:	8912      	ldrh	r2, [r2, #8]
 8005248:	fb02 f203 	mul.w	r2, r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005258:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800525a:	04d9      	lsls	r1, r3, #19
 800525c:	4b68      	ldr	r3, [pc, #416]	; (8005400 <USB_HC_StartXfer+0x280>)
 800525e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8005260:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	7a9b      	ldrb	r3, [r3, #10]
 8005266:	075b      	lsls	r3, r3, #29
 8005268:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800526c:	69f9      	ldr	r1, [r7, #28]
 800526e:	0148      	lsls	r0, r1, #5
 8005270:	6a39      	ldr	r1, [r7, #32]
 8005272:	4401      	add	r1, r0
 8005274:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005278:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800527a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800527c:	79fb      	ldrb	r3, [r7, #7]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d009      	beq.n	8005296 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	68d9      	ldr	r1, [r3, #12]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	460a      	mov	r2, r1
 8005294:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	bf0c      	ite	eq
 80052a6:	2301      	moveq	r3, #1
 80052a8:	2300      	movne	r3, #0
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	0151      	lsls	r1, r2, #5
 80052c0:	6a3a      	ldr	r2, [r7, #32]
 80052c2:	440a      	add	r2, r1
 80052c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052c8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80052cc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	015a      	lsls	r2, r3, #5
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	4413      	add	r3, r2
 80052d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	7e7b      	ldrb	r3, [r7, #25]
 80052de:	075b      	lsls	r3, r3, #29
 80052e0:	69f9      	ldr	r1, [r7, #28]
 80052e2:	0148      	lsls	r0, r1, #5
 80052e4:	6a39      	ldr	r1, [r7, #32]
 80052e6:	4401      	add	r1, r0
 80052e8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80052ec:	4313      	orrs	r3, r2
 80052ee:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a41      	ldr	r2, [pc, #260]	; (8005404 <USB_HC_StartXfer+0x284>)
 8005300:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005302:	4b40      	ldr	r3, [pc, #256]	; (8005404 <USB_HC_StartXfer+0x284>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800530a:	4a3e      	ldr	r2, [pc, #248]	; (8005404 <USB_HC_StartXfer+0x284>)
 800530c:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	78db      	ldrb	r3, [r3, #3]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005316:	4b3b      	ldr	r3, [pc, #236]	; (8005404 <USB_HC_StartXfer+0x284>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800531e:	4a39      	ldr	r2, [pc, #228]	; (8005404 <USB_HC_StartXfer+0x284>)
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	e005      	b.n	8005330 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005324:	4b37      	ldr	r3, [pc, #220]	; (8005404 <USB_HC_StartXfer+0x284>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800532c:	4a35      	ldr	r2, [pc, #212]	; (8005404 <USB_HC_StartXfer+0x284>)
 800532e:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005330:	4b34      	ldr	r3, [pc, #208]	; (8005404 <USB_HC_StartXfer+0x284>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005338:	4a32      	ldr	r2, [pc, #200]	; (8005404 <USB_HC_StartXfer+0x284>)
 800533a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800533c:	69fb      	ldr	r3, [r7, #28]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	4413      	add	r3, r2
 8005344:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005348:	461a      	mov	r2, r3
 800534a:	4b2e      	ldr	r3, [pc, #184]	; (8005404 <USB_HC_StartXfer+0x284>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d14e      	bne.n	80053f4 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	78db      	ldrb	r3, [r3, #3]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d14a      	bne.n	80053f4 <USB_HC_StartXfer+0x274>
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d046      	beq.n	80053f4 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	79db      	ldrb	r3, [r3, #7]
 800536a:	2b03      	cmp	r3, #3
 800536c:	d830      	bhi.n	80053d0 <USB_HC_StartXfer+0x250>
 800536e:	a201      	add	r2, pc, #4	; (adr r2, 8005374 <USB_HC_StartXfer+0x1f4>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	08005385 	.word	0x08005385
 8005378:	080053a9 	.word	0x080053a9
 800537c:	08005385 	.word	0x08005385
 8005380:	080053a9 	.word	0x080053a9
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	3303      	adds	r3, #3
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800538e:	8afa      	ldrh	r2, [r7, #22]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005394:	b29b      	uxth	r3, r3
 8005396:	429a      	cmp	r2, r3
 8005398:	d91c      	bls.n	80053d4 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	f043 0220 	orr.w	r2, r3, #32
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	619a      	str	r2, [r3, #24]
          }
          break;
 80053a6:	e015      	b.n	80053d4 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	3303      	adds	r3, #3
 80053ae:	089b      	lsrs	r3, r3, #2
 80053b0:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80053b2:	8afa      	ldrh	r2, [r7, #22]
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	b29b      	uxth	r3, r3
 80053be:	429a      	cmp	r2, r3
 80053c0:	d90a      	bls.n	80053d8 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	619a      	str	r2, [r3, #24]
          }
          break;
 80053ce:	e003      	b.n	80053d8 <USB_HC_StartXfer+0x258>

        default:
          break;
 80053d0:	bf00      	nop
 80053d2:	e002      	b.n	80053da <USB_HC_StartXfer+0x25a>
          break;
 80053d4:	bf00      	nop
 80053d6:	e000      	b.n	80053da <USB_HC_StartXfer+0x25a>
          break;
 80053d8:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	68d9      	ldr	r1, [r3, #12]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	785a      	ldrb	r2, [r3, #1]
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	b298      	uxth	r0, r3
 80053e8:	2300      	movs	r3, #0
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	4603      	mov	r3, r0
 80053ee:	68f8      	ldr	r0, [r7, #12]
 80053f0:	f7ff fb86 	bl	8004b00 <USB_WritePacket>
    }
  }

  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3728      	adds	r7, #40	; 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	1ff80000 	.word	0x1ff80000
 8005404:	200000ac 	.word	0x200000ac

08005408 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005408:	b480      	push	{r7}
 800540a:	b085      	sub	sp, #20
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800541a:	695b      	ldr	r3, [r3, #20]
 800541c:	b29b      	uxth	r3, r3
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
 8005432:	460b      	mov	r3, r1
 8005434:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800543e:	2300      	movs	r3, #0
 8005440:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0c9b      	lsrs	r3, r3, #18
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <USB_HC_Halt+0x3a>
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	2b02      	cmp	r3, #2
 8005462:	d16c      	bne.n	800553e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	015a      	lsls	r2, r3, #5
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	4413      	add	r3, r2
 800546c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	0151      	lsls	r1, r2, #5
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	440a      	add	r2, r1
 800547a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800547e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005482:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005488:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d143      	bne.n	8005518 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	4413      	add	r3, r2
 8005498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	0151      	lsls	r1, r2, #5
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	440a      	add	r2, r1
 80054a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80054ae:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	015a      	lsls	r2, r3, #5
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	4413      	add	r3, r2
 80054b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	0151      	lsls	r1, r2, #5
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	440a      	add	r2, r1
 80054c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80054ce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054ea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054ee:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054fc:	d81d      	bhi.n	800553a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	4413      	add	r3, r2
 8005506:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005514:	d0ec      	beq.n	80054f0 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005516:	e080      	b.n	800561a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	0151      	lsls	r1, r2, #5
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	440a      	add	r2, r1
 800552e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005532:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005536:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005538:	e06f      	b.n	800561a <USB_HC_Halt+0x1f0>
          break;
 800553a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800553c:	e06d      	b.n	800561a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	440a      	add	r2, r1
 8005554:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005558:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800555c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d143      	bne.n	80055f6 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	4413      	add	r3, r2
 8005576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	0151      	lsls	r1, r2, #5
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	440a      	add	r2, r1
 8005584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800558c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	0151      	lsls	r1, r2, #5
 80055a0:	693a      	ldr	r2, [r7, #16]
 80055a2:	440a      	add	r2, r1
 80055a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055ac:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	015a      	lsls	r2, r3, #5
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4413      	add	r3, r2
 80055b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	0151      	lsls	r1, r2, #5
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	440a      	add	r2, r1
 80055c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055c8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055cc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	3301      	adds	r3, #1
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80055da:	d81d      	bhi.n	8005618 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	015a      	lsls	r2, r3, #5
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	4413      	add	r3, r2
 80055e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f2:	d0ec      	beq.n	80055ce <USB_HC_Halt+0x1a4>
 80055f4:	e011      	b.n	800561a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	015a      	lsls	r2, r3, #5
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4413      	add	r3, r2
 80055fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	0151      	lsls	r1, r2, #5
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	440a      	add	r2, r1
 800560c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	e000      	b.n	800561a <USB_HC_Halt+0x1f0>
          break;
 8005618:	bf00      	nop
    }
  }

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	371c      	adds	r7, #28
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800563c:	2301      	movs	r3, #1
 800563e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	04da      	lsls	r2, r3, #19
 8005644:	4b15      	ldr	r3, [pc, #84]	; (800569c <USB_DoPing+0x74>)
 8005646:	4013      	ands	r3, r2
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	440a      	add	r2, r1
 8005650:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005654:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005658:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005670:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005678:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	461a      	mov	r2, r3
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	1ff80000 	.word	0x1ff80000

080056a0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7ff f9a1 	bl	80049f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 80056b6:	2110      	movs	r1, #16
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff f9d9 	bl	8004a70 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff f9fc 	bl	8004abc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80056c4:	2300      	movs	r3, #0
 80056c6:	613b      	str	r3, [r7, #16]
 80056c8:	e01f      	b.n	800570a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056e0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056e8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056f0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	015a      	lsls	r2, r3, #5
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	4413      	add	r3, r2
 80056fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056fe:	461a      	mov	r2, r3
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3301      	adds	r3, #1
 8005708:	613b      	str	r3, [r7, #16]
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	2b0f      	cmp	r3, #15
 800570e:	d9dc      	bls.n	80056ca <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005710:	2300      	movs	r3, #0
 8005712:	613b      	str	r3, [r7, #16]
 8005714:	e034      	b.n	8005780 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	015a      	lsls	r2, r3, #5
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	4413      	add	r3, r2
 800571e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800572c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005734:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800573c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	015a      	lsls	r2, r3, #5
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	4413      	add	r3, r2
 8005746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574a:	461a      	mov	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	3301      	adds	r3, #1
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800575c:	d80c      	bhi.n	8005778 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005770:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005774:	d0ec      	beq.n	8005750 <USB_StopHost+0xb0>
 8005776:	e000      	b.n	800577a <USB_StopHost+0xda>
        break;
 8005778:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	3301      	adds	r3, #1
 800577e:	613b      	str	r3, [r7, #16]
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	2b0f      	cmp	r3, #15
 8005784:	d9c7      	bls.n	8005716 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578c:	461a      	mov	r2, r3
 800578e:	f04f 33ff 	mov.w	r3, #4294967295
 8005792:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f04f 32ff 	mov.w	r2, #4294967295
 800579a:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f7ff f91a 	bl	80049d6 <USB_EnableGlobalInt>

  return HAL_OK;
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3718      	adds	r7, #24
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 80057ac:	b590      	push	{r4, r7, lr}
 80057ae:	b089      	sub	sp, #36	; 0x24
 80057b0:	af04      	add	r7, sp, #16
 80057b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 80057b4:	2302      	movs	r3, #2
 80057b6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 80057b8:	2301      	movs	r3, #1
 80057ba:	2202      	movs	r2, #2
 80057bc:	2102      	movs	r1, #2
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fc3a 	bl	8006038 <USBH_FindInterface>
 80057c4:	4603      	mov	r3, r0
 80057c6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 80057c8:	7bbb      	ldrb	r3, [r7, #14]
 80057ca:	2bff      	cmp	r3, #255	; 0xff
 80057cc:	f000 812a 	beq.w	8005a24 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 80057d0:	7bbb      	ldrb	r3, [r7, #14]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fc13 	bl	8006000 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 80057e0:	2050      	movs	r0, #80	; 0x50
 80057e2:	f002 fe21 	bl	8008428 <malloc>
 80057e6:	4603      	mov	r3, r0
 80057e8:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057f0:	69db      	ldr	r3, [r3, #28]
 80057f2:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	211a      	movs	r1, #26
 80057fa:	fb01 f303 	mul.w	r3, r1, r3
 80057fe:	4413      	add	r3, r2
 8005800:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	b25b      	sxtb	r3, r3
 8005808:	2b00      	cmp	r3, #0
 800580a:	da15      	bge.n	8005838 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800580c:	7bbb      	ldrb	r3, [r7, #14]
 800580e:	687a      	ldr	r2, [r7, #4]
 8005810:	211a      	movs	r1, #26
 8005812:	fb01 f303 	mul.w	r3, r1, r3
 8005816:	4413      	add	r3, r2
 8005818:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800581c:	781a      	ldrb	r2, [r3, #0]
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	687a      	ldr	r2, [r7, #4]
 8005826:	211a      	movs	r1, #26
 8005828:	fb01 f303 	mul.w	r3, r1, r3
 800582c:	4413      	add	r3, r2
 800582e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005832:	881a      	ldrh	r2, [r3, #0]
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	785b      	ldrb	r3, [r3, #1]
 800583c:	4619      	mov	r1, r3
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 fd21 	bl	8007286 <USBH_AllocPipe>
 8005844:	4603      	mov	r3, r0
 8005846:	461a      	mov	r2, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	7819      	ldrb	r1, [r3, #0]
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	7858      	ldrb	r0, [r3, #1]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	8952      	ldrh	r2, [r2, #10]
 8005864:	9202      	str	r2, [sp, #8]
 8005866:	2203      	movs	r2, #3
 8005868:	9201      	str	r2, [sp, #4]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	4623      	mov	r3, r4
 800586e:	4602      	mov	r2, r0
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 fcd9 	bl	8007228 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f002 fcf8 	bl	8008274 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005884:	2300      	movs	r3, #0
 8005886:	2200      	movs	r2, #0
 8005888:	210a      	movs	r1, #10
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fbd4 	bl	8006038 <USBH_FindInterface>
 8005890:	4603      	mov	r3, r0
 8005892:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005894:	7bbb      	ldrb	r3, [r7, #14]
 8005896:	2bff      	cmp	r3, #255	; 0xff
 8005898:	f000 80c4 	beq.w	8005a24 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800589c:	7bbb      	ldrb	r3, [r7, #14]
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	211a      	movs	r1, #26
 80058a2:	fb01 f303 	mul.w	r3, r1, r3
 80058a6:	4413      	add	r3, r2
 80058a8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	b25b      	sxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	da16      	bge.n	80058e2 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80058b4:	7bbb      	ldrb	r3, [r7, #14]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	211a      	movs	r1, #26
 80058ba:	fb01 f303 	mul.w	r3, r1, r3
 80058be:	4413      	add	r3, r2
 80058c0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80058c4:	781a      	ldrb	r2, [r3, #0]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80058ca:	7bbb      	ldrb	r3, [r7, #14]
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	211a      	movs	r1, #26
 80058d0:	fb01 f303 	mul.w	r3, r1, r3
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80058da:	881a      	ldrh	r2, [r3, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	835a      	strh	r2, [r3, #26]
 80058e0:	e015      	b.n	800590e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	211a      	movs	r1, #26
 80058e8:	fb01 f303 	mul.w	r3, r1, r3
 80058ec:	4413      	add	r3, r2
 80058ee:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80058f8:	7bbb      	ldrb	r3, [r7, #14]
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	211a      	movs	r1, #26
 80058fe:	fb01 f303 	mul.w	r3, r1, r3
 8005902:	4413      	add	r3, r2
 8005904:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 8005908:	881a      	ldrh	r2, [r3, #0]
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800590e:	7bbb      	ldrb	r3, [r7, #14]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	211a      	movs	r1, #26
 8005914:	fb01 f303 	mul.w	r3, r1, r3
 8005918:	4413      	add	r3, r2
 800591a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b25b      	sxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	da16      	bge.n	8005954 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005926:	7bbb      	ldrb	r3, [r7, #14]
 8005928:	687a      	ldr	r2, [r7, #4]
 800592a:	211a      	movs	r1, #26
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	4413      	add	r3, r2
 8005932:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005936:	781a      	ldrb	r2, [r3, #0]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800593c:	7bbb      	ldrb	r3, [r7, #14]
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	211a      	movs	r1, #26
 8005942:	fb01 f303 	mul.w	r3, r1, r3
 8005946:	4413      	add	r3, r2
 8005948:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800594c:	881a      	ldrh	r2, [r3, #0]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	835a      	strh	r2, [r3, #26]
 8005952:	e015      	b.n	8005980 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	211a      	movs	r1, #26
 800595a:	fb01 f303 	mul.w	r3, r1, r3
 800595e:	4413      	add	r3, r2
 8005960:	f203 3352 	addw	r3, r3, #850	; 0x352
 8005964:	781a      	ldrb	r2, [r3, #0]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	687a      	ldr	r2, [r7, #4]
 800596e:	211a      	movs	r1, #26
 8005970:	fb01 f303 	mul.w	r3, r1, r3
 8005974:	4413      	add	r3, r2
 8005976:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800597a:	881a      	ldrh	r2, [r3, #0]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	7b9b      	ldrb	r3, [r3, #14]
 8005984:	4619      	mov	r1, r3
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f001 fc7d 	bl	8007286 <USBH_AllocPipe>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	7bdb      	ldrb	r3, [r3, #15]
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f001 fc73 	bl	8007286 <USBH_AllocPipe>
 80059a0:	4603      	mov	r3, r0
 80059a2:	461a      	mov	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	7b59      	ldrb	r1, [r3, #13]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	7b98      	ldrb	r0, [r3, #14]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	8b12      	ldrh	r2, [r2, #24]
 80059c0:	9202      	str	r2, [sp, #8]
 80059c2:	2202      	movs	r2, #2
 80059c4:	9201      	str	r2, [sp, #4]
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	4623      	mov	r3, r4
 80059ca:	4602      	mov	r2, r0
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f001 fc2b 	bl	8007228 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	7b19      	ldrb	r1, [r3, #12]
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	7bd8      	ldrb	r0, [r3, #15]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	8b52      	ldrh	r2, [r2, #26]
 80059ea:	9202      	str	r2, [sp, #8]
 80059ec:	2202      	movs	r2, #2
 80059ee:	9201      	str	r2, [sp, #4]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	4623      	mov	r3, r4
 80059f4:	4602      	mov	r2, r0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f001 fc16 	bl	8007228 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	7b5b      	ldrb	r3, [r3, #13]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4619      	mov	r1, r3
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f002 fc31 	bl	8008274 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	7b1b      	ldrb	r3, [r3, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f002 fc2a 	bl	8008274 <USBH_LL_SetToggle>
      status = USBH_OK;
 8005a20:	2300      	movs	r3, #0
 8005a22:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8005a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3714      	adds	r7, #20
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd90      	pop	{r4, r7, pc}

08005a2e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00e      	beq.n	8005a66 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	781b      	ldrb	r3, [r3, #0]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 fc09 	bl	8007266 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f001 fc31 	bl	80072c2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	7b1b      	ldrb	r3, [r3, #12]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	7b1b      	ldrb	r3, [r3, #12]
 8005a72:	4619      	mov	r1, r3
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fbf6 	bl	8007266 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	7b1b      	ldrb	r3, [r3, #12]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f001 fc1e 	bl	80072c2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	7b5b      	ldrb	r3, [r3, #13]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00e      	beq.n	8005ab2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	7b5b      	ldrb	r3, [r3, #13]
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f001 fbe3 	bl	8007266 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	7b5b      	ldrb	r3, [r3, #13]
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f001 fc0b 	bl	80072c2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ab8:	69db      	ldr	r3, [r3, #28]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00b      	beq.n	8005ad6 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f002 fcb6 	bl	8008438 <free>
    phost->pActiveClass->pData = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 8005ae8:	2302      	movs	r3, #2
 8005aea:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3340      	adds	r3, #64	; 0x40
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f000 f8b2 	bl	8005c66 <GetLineCoding>
 8005b02:	4603      	mov	r3, r0
 8005b04:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d105      	bne.n	8005b18 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005b12:	2102      	movs	r1, #2
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	4798      	blx	r3
  }
  return status;
 8005b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
	...

08005b24 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d877      	bhi.n	8005c38 <USBH_CDC_Process+0x114>
 8005b48:	a201      	add	r2, pc, #4	; (adr r2, 8005b50 <USBH_CDC_Process+0x2c>)
 8005b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4e:	bf00      	nop
 8005b50:	08005b65 	.word	0x08005b65
 8005b54:	08005b6b 	.word	0x08005b6b
 8005b58:	08005b9b 	.word	0x08005b9b
 8005b5c:	08005c0f 	.word	0x08005c0f
 8005b60:	08005c1d 	.word	0x08005c1d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 8005b64:	2300      	movs	r3, #0
 8005b66:	73fb      	strb	r3, [r7, #15]
    break;
 8005b68:	e06d      	b.n	8005c46 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f000 f897 	bl	8005ca4 <SetLineCoding>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005b7a:	7bbb      	ldrb	r3, [r7, #14]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005b88:	e058      	b.n	8005c3c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 8005b8a:	7bbb      	ldrb	r3, [r7, #14]
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d055      	beq.n	8005c3c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2204      	movs	r2, #4
 8005b94:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005b98:	e050      	b.n	8005c3c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	3340      	adds	r3, #64	; 0x40
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f860 	bl	8005c66 <GetLineCoding>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d126      	bne.n	8005bfe <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bc2:	791b      	ldrb	r3, [r3, #4]
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d13b      	bne.n	8005c40 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd2:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d133      	bne.n	8005c40 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005be2:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d12b      	bne.n	8005c40 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bf0:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d124      	bne.n	8005c40 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 f95a 	bl	8005eb0 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005bfc:	e020      	b.n	8005c40 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005bfe:	7bbb      	ldrb	r3, [r7, #14]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d01d      	beq.n	8005c40 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2204      	movs	r2, #4
 8005c08:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 8005c0c:	e018      	b.n	8005c40 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f867 	bl	8005ce2 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f8dc 	bl	8005dd2 <CDC_ProcessReception>
    break;
 8005c1a:	e014      	b.n	8005c46 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 8005c1c:	2100      	movs	r1, #0
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fece 	bl	80069c0 <USBH_ClrFeature>
 8005c24:	4603      	mov	r3, r0
 8005c26:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d10a      	bne.n	8005c44 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 8005c36:	e005      	b.n	8005c44 <USBH_CDC_Process+0x120>

  default:
    break;
 8005c38:	bf00      	nop
 8005c3a:	e004      	b.n	8005c46 <USBH_CDC_Process+0x122>
    break;
 8005c3c:	bf00      	nop
 8005c3e:	e002      	b.n	8005c46 <USBH_CDC_Process+0x122>
    break;
 8005c40:	bf00      	nop
 8005c42:	e000      	b.n	8005c46 <USBH_CDC_Process+0x122>
    break;
 8005c44:	bf00      	nop

  }

  return status;
 8005c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 8005c58:	2300      	movs	r3, #0
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr

08005c66 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	22a1      	movs	r2, #161	; 0xa1
 8005c74:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2221      	movs	r2, #33	; 0x21
 8005c7a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2207      	movs	r2, #7
 8005c8c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2207      	movs	r2, #7
 8005c92:	4619      	mov	r1, r3
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f001 f873 	bl	8006d80 <USBH_CtlReq>
 8005c9a:	4603      	mov	r3, r0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3708      	adds	r7, #8
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2221      	movs	r2, #33	; 0x21
 8005cb2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2207      	movs	r2, #7
 8005cca:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2207      	movs	r2, #7
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	f001 f854 	bl	8006d80 <USBH_CtlReq>
 8005cd8:	4603      	mov	r3, r0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3708      	adds	r7, #8
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}

08005ce2 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b086      	sub	sp, #24
 8005ce6:	af02      	add	r7, sp, #8
 8005ce8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d002      	beq.n	8005d08 <CDC_ProcessTransmission+0x26>
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d025      	beq.n	8005d52 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 8005d06:	e060      	b.n	8005dca <CDC_ProcessTransmission+0xe8>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	8b12      	ldrh	r2, [r2, #24]
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d90c      	bls.n	8005d2e <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	8b1a      	ldrh	r2, [r3, #24]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	7b58      	ldrb	r0, [r3, #13]
 8005d20:	2301      	movs	r3, #1
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	4603      	mov	r3, r0
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f001 fa3b 	bl	80071a2 <USBH_BulkSendData>
 8005d2c:	e00c      	b.n	8005d48 <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 8005d36:	b29a      	uxth	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	7b58      	ldrb	r0, [r3, #13]
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	4603      	mov	r3, r0
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f001 fa2d 	bl	80071a2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2202      	movs	r2, #2
 8005d4c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005d50:	e03b      	b.n	8005dca <CDC_ProcessTransmission+0xe8>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	7b5b      	ldrb	r3, [r3, #13]
 8005d56:	4619      	mov	r1, r3
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f002 fa61 	bl	8008220 <USBH_LL_GetURBState>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 8005d62:	7afb      	ldrb	r3, [r7, #11]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d128      	bne.n	8005dba <CDC_ProcessTransmission+0xd8>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	8b12      	ldrh	r2, [r2, #24]
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d90e      	bls.n	8005d92 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	68fa      	ldr	r2, [r7, #12]
 8005d7a:	8b12      	ldrh	r2, [r2, #24]
 8005d7c:	1a9a      	subs	r2, r3, r2
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	8b12      	ldrh	r2, [r2, #24]
 8005d8a:	441a      	add	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	61da      	str	r2, [r3, #28]
 8005d90:	e002      	b.n	8005d98 <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d004      	beq.n	8005daa <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005da8:	e00e      	b.n	8005dc8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f000 f868 	bl	8005e88 <USBH_CDC_TransmitCallback>
    break;
 8005db8:	e006      	b.n	8005dc8 <CDC_ProcessTransmission+0xe6>
      if (URB_Status == USBH_URB_NOTREADY)
 8005dba:	7afb      	ldrb	r3, [r7, #11]
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d103      	bne.n	8005dc8 <CDC_ProcessTransmission+0xe6>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 8005dc8:	bf00      	nop
  }
}
 8005dca:	bf00      	nop
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}

08005dd2 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005dd2:	b580      	push	{r7, lr}
 8005dd4:	b086      	sub	sp, #24
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005dee:	2b03      	cmp	r3, #3
 8005df0:	d002      	beq.n	8005df8 <CDC_ProcessReception+0x26>
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	d00e      	beq.n	8005e14 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005df6:	e043      	b.n	8005e80 <CDC_ProcessReception+0xae>
    USBH_BulkReceiveData (phost,
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	6a19      	ldr	r1, [r3, #32]
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	8b5a      	ldrh	r2, [r3, #26]
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	7b1b      	ldrb	r3, [r3, #12]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f001 f9f1 	bl	80071ec <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005e12:	e035      	b.n	8005e80 <CDC_ProcessReception+0xae>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	7b1b      	ldrb	r3, [r3, #12]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f002 fa00 	bl	8008220 <USBH_LL_GetURBState>
 8005e20:	4603      	mov	r3, r0
 8005e22:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005e24:	7cfb      	ldrb	r3, [r7, #19]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d129      	bne.n	8005e7e <CDC_ProcessReception+0xac>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	7b1b      	ldrb	r3, [r3, #12]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f002 f963 	bl	80080fc <USBH_LL_GetLastXferSize>
 8005e36:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e3c:	68fa      	ldr	r2, [r7, #12]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d016      	beq.n	8005e70 <CDC_ProcessReception+0x9e>
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	8b5b      	ldrh	r3, [r3, #26]
 8005e46:	461a      	mov	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d910      	bls.n	8005e70 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	1ad2      	subs	r2, r2, r3
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	6a1a      	ldr	r2, [r3, #32]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	441a      	add	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2203      	movs	r2, #3
 8005e6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005e6e:	e006      	b.n	8005e7e <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005e78:	6878      	ldr	r0, [r7, #4]
 8005e7a:	f000 f80f 	bl	8005e9c <USBH_CDC_ReceiveCallback>
    break;
 8005e7e:	bf00      	nop
  }
}
 8005e80:	bf00      	nop
 8005e82:	3718      	adds	r7, #24
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]

}
 8005e90:	bf00      	nop
 8005e92:	370c      	adds	r7, #12
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]

}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b083      	sub	sp, #12
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b084      	sub	sp, #16
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005ed8:	2302      	movs	r3, #2
 8005eda:	e019      	b.n	8005f10 <USBH_Init+0x4c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	79fa      	ldrb	r2, [r7, #7]
 8005ee0:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f80f 	bl	8005f18 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d003      	beq.n	8005f08 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f002 f845 	bl	8007f98 <USBH_LL_Init>

  return USBH_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005f24:	e008      	b.n	8005f38 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	32e0      	adds	r2, #224	; 0xe0
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	3301      	adds	r3, #1
 8005f36:	60fb      	str	r3, [r7, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2b0e      	cmp	r3, #14
 8005f3c:	d9f3      	bls.n	8005f26 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
 8005f42:	e009      	b.n	8005f58 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	4413      	add	r3, r2
 8005f4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005f4e:	2200      	movs	r2, #0
 8005f50:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	3301      	adds	r3, #1
 8005f56:	60fb      	str	r3, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f5e:	d3f1      	bcc.n	8005f44 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2200      	movs	r2, #0
 8005f64:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2240      	movs	r2, #64	; 0x40
 8005f84:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d017      	beq.n	8005fee <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d10f      	bne.n	8005fe8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fce:	1c59      	adds	r1, r3, #1
 8005fd0:	687a      	ldr	r2, [r7, #4]
 8005fd2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	33dc      	adds	r3, #220	; 0xdc
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	73fb      	strb	r3, [r7, #15]
 8005fe6:	e004      	b.n	8005ff2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005fe8:	2302      	movs	r3, #2
 8005fea:	73fb      	strb	r3, [r7, #15]
 8005fec:	e001      	b.n	8005ff2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005fee:	2302      	movs	r3, #2
 8005ff0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	460b      	mov	r3, r1
 800600a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8006016:	78fa      	ldrb	r2, [r7, #3]
 8006018:	429a      	cmp	r2, r3
 800601a:	d204      	bcs.n	8006026 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	78fa      	ldrb	r2, [r7, #3]
 8006020:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8006024:	e001      	b.n	800602a <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006026:	2302      	movs	r3, #2
 8006028:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800602a:	7bfb      	ldrb	r3, [r7, #15]
}
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006036:	4770      	bx	lr

08006038 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006038:	b480      	push	{r7}
 800603a:	b087      	sub	sp, #28
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	4608      	mov	r0, r1
 8006042:	4611      	mov	r1, r2
 8006044:	461a      	mov	r2, r3
 8006046:	4603      	mov	r3, r0
 8006048:	70fb      	strb	r3, [r7, #3]
 800604a:	460b      	mov	r3, r1
 800604c:	70bb      	strb	r3, [r7, #2]
 800604e:	4613      	mov	r3, r2
 8006050:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8006056:	2300      	movs	r3, #0
 8006058:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006060:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006062:	e025      	b.n	80060b0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006064:	7dfb      	ldrb	r3, [r7, #23]
 8006066:	221a      	movs	r2, #26
 8006068:	fb02 f303 	mul.w	r3, r2, r3
 800606c:	3308      	adds	r3, #8
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	3302      	adds	r3, #2
 8006074:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	795b      	ldrb	r3, [r3, #5]
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	429a      	cmp	r2, r3
 800607e:	d002      	beq.n	8006086 <USBH_FindInterface+0x4e>
 8006080:	78fb      	ldrb	r3, [r7, #3]
 8006082:	2bff      	cmp	r3, #255	; 0xff
 8006084:	d111      	bne.n	80060aa <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800608a:	78ba      	ldrb	r2, [r7, #2]
 800608c:	429a      	cmp	r2, r3
 800608e:	d002      	beq.n	8006096 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8006090:	78bb      	ldrb	r3, [r7, #2]
 8006092:	2bff      	cmp	r3, #255	; 0xff
 8006094:	d109      	bne.n	80060aa <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800609a:	787a      	ldrb	r2, [r7, #1]
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80060a0:	787b      	ldrb	r3, [r7, #1]
 80060a2:	2bff      	cmp	r3, #255	; 0xff
 80060a4:	d101      	bne.n	80060aa <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80060a6:	7dfb      	ldrb	r3, [r7, #23]
 80060a8:	e006      	b.n	80060b8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
 80060ac:	3301      	adds	r3, #1
 80060ae:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d9d6      	bls.n	8006064 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80060b6:	23ff      	movs	r3, #255	; 0xff
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	371c      	adds	r7, #28
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 ff9f 	bl	8008010 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 80060d2:	2101      	movs	r1, #1
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f002 f8b6 	bl	8008246 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3708      	adds	r7, #8
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bd80      	pop	{r7, pc}

080060e4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af04      	add	r7, sp, #16
 80060ea:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80060ec:	2302      	movs	r3, #2
 80060ee:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 faec 	bl	80066d2 <USBH_IsPortEnabled>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10c      	bne.n	800611a <USBH_Process+0x36>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d007      	beq.n	800611a <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b2db      	uxtb	r3, r3
 8006110:	2b03      	cmp	r3, #3
 8006112:	d002      	beq.n	800611a <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2203      	movs	r2, #3
 8006118:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	2b0b      	cmp	r3, #11
 8006122:	f200 814c 	bhi.w	80063be <USBH_Process+0x2da>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <USBH_Process+0x48>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	0800615d 	.word	0x0800615d
 8006130:	0800617f 	.word	0x0800617f
 8006134:	08006193 	.word	0x08006193
 8006138:	08006399 	.word	0x08006399
 800613c:	080063bf 	.word	0x080063bf
 8006140:	08006221 	.word	0x08006221
 8006144:	0800634f 	.word	0x0800634f
 8006148:	08006251 	.word	0x08006251
 800614c:	08006271 	.word	0x08006271
 8006150:	08006291 	.word	0x08006291
 8006154:	080062bf 	.word	0x080062bf
 8006158:	08006381 	.word	0x08006381
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 812c 	beq.w	80063c2 <USBH_Process+0x2de>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8006170:	20c8      	movs	r0, #200	; 0xc8
 8006172:	f002 f8b2 	bl	80082da <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f001 ffa5 	bl	80080c6 <USBH_LL_ResetPort>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800617c:	e121      	b.n	80063c2 <USBH_Process+0x2de>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006184:	2b01      	cmp	r3, #1
 8006186:	f040 811e 	bne.w	80063c6 <USBH_Process+0x2e2>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8006190:	e119      	b.n	80063c6 <USBH_Process+0x2e2>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8006192:	2064      	movs	r0, #100	; 0x64
 8006194:	f002 f8a1 	bl	80082da <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f001 ff6f 	bl	800807c <USBH_LL_GetSpeed>
 800619e:	4603      	mov	r3, r0
 80061a0:	461a      	mov	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2205      	movs	r2, #5
 80061ac:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 80061ae:	2100      	movs	r1, #0
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f001 f868 	bl	8007286 <USBH_AllocPipe>
 80061b6:	4603      	mov	r3, r0
 80061b8:	461a      	mov	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 80061be:	2180      	movs	r1, #128	; 0x80
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 f860 	bl	8007286 <USBH_AllocPipe>
 80061c6:	4603      	mov	r3, r0
 80061c8:	461a      	mov	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	7919      	ldrb	r1, [r3, #4]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 80061e2:	b292      	uxth	r2, r2
 80061e4:	9202      	str	r2, [sp, #8]
 80061e6:	2200      	movs	r2, #0
 80061e8:	9201      	str	r2, [sp, #4]
 80061ea:	9300      	str	r3, [sp, #0]
 80061ec:	4603      	mov	r3, r0
 80061ee:	2280      	movs	r2, #128	; 0x80
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f001 f819 	bl	8007228 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	7959      	ldrb	r1, [r3, #5]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800620a:	b292      	uxth	r2, r2
 800620c:	9202      	str	r2, [sp, #8]
 800620e:	2200      	movs	r2, #0
 8006210:	9201      	str	r2, [sp, #4]
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	4603      	mov	r3, r0
 8006216:	2200      	movs	r2, #0
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f001 f805 	bl	8007228 <USBH_OpenPipe>
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800621e:	e0e3      	b.n	80063e8 <USBH_Process+0x304>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f8e7 	bl	80063f4 <USBH_HandleEnum>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	f040 80ce 	bne.w	80063ca <USBH_Process+0x2e6>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800623c:	2b01      	cmp	r3, #1
 800623e:	d103      	bne.n	8006248 <USBH_Process+0x164>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2208      	movs	r2, #8
 8006244:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8006246:	e0c0      	b.n	80063ca <USBH_Process+0x2e6>
        phost->gState  = HOST_INPUT;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2207      	movs	r2, #7
 800624c:	701a      	strb	r2, [r3, #0]
    break;
 800624e:	e0bc      	b.n	80063ca <USBH_Process+0x2e6>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006256:	2b00      	cmp	r3, #0
 8006258:	f000 80b9 	beq.w	80063ce <USBH_Process+0x2ea>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006262:	2101      	movs	r1, #1
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2208      	movs	r2, #8
 800626c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800626e:	e0ae      	b.n	80063ce <USBH_Process+0x2ea>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006276:	b29b      	uxth	r3, r3
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fb59 	bl	8006932 <USBH_SetCfg>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 80a5 	bne.w	80063d2 <USBH_Process+0x2ee>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2209      	movs	r2, #9
 800628c:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800628e:	e0a0      	b.n	80063d2 <USBH_Process+0x2ee>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00b      	beq.n	80062b6 <USBH_Process+0x1d2>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800629e:	2101      	movs	r1, #1
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fb69 	bl	8006978 <USBH_SetFeature>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 8094 	bne.w	80063d6 <USBH_Process+0x2f2>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	220a      	movs	r2, #10
 80062b2:	701a      	strb	r2, [r3, #0]
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 80062b4:	e08f      	b.n	80063d6 <USBH_Process+0x2f2>
      phost->gState  = HOST_CHECK_CLASS;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	220a      	movs	r2, #10
 80062ba:	701a      	strb	r2, [r3, #0]
    break;
 80062bc:	e08b      	b.n	80063d6 <USBH_Process+0x2f2>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	f000 8088 	beq.w	80063da <USBH_Process+0x2f6>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]
 80062d6:	e017      	b.n	8006308 <USBH_Process+0x224>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	33dc      	adds	r3, #220	; 0xdc
 80062de:	009b      	lsls	r3, r3, #2
 80062e0:	4413      	add	r3, r2
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	791a      	ldrb	r2, [r3, #4]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d108      	bne.n	8006302 <USBH_Process+0x21e>
        {
          phost->pActiveClass = phost->pClass[idx];
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
 80062f2:	687a      	ldr	r2, [r7, #4]
 80062f4:	33dc      	adds	r3, #220	; 0xdc
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	3301      	adds	r3, #1
 8006306:	73fb      	strb	r3, [r7, #15]
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d0e4      	beq.n	80062d8 <USBH_Process+0x1f4>
        }
      }

      if(phost->pActiveClass != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006314:	2b00      	cmp	r3, #0
 8006316:	d016      	beq.n	8006346 <USBH_Process+0x262>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d109      	bne.n	800633e <USBH_Process+0x25a>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2206      	movs	r2, #6
 800632e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006336:	2103      	movs	r1, #3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	4798      	blx	r3
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800633c:	e04d      	b.n	80063da <USBH_Process+0x2f6>
          phost->gState  = HOST_ABORT_STATE;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	220d      	movs	r2, #13
 8006342:	701a      	strb	r2, [r3, #0]
    break;
 8006344:	e049      	b.n	80063da <USBH_Process+0x2f6>
        phost->gState  = HOST_ABORT_STATE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	220d      	movs	r2, #13
 800634a:	701a      	strb	r2, [r3, #0]
    break;
 800634c:	e045      	b.n	80063da <USBH_Process+0x2f6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00f      	beq.n	8006378 <USBH_Process+0x294>
    {
      status = phost->pActiveClass->Requests(phost);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	6878      	ldr	r0, [r7, #4]
 8006362:	4798      	blx	r3
 8006364:	4603      	mov	r3, r0
 8006366:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006368:	7bbb      	ldrb	r3, [r7, #14]
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b00      	cmp	r3, #0
 800636e:	d136      	bne.n	80063de <USBH_Process+0x2fa>
      {
        phost->gState  = HOST_CLASS;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	220b      	movs	r2, #11
 8006374:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006376:	e032      	b.n	80063de <USBH_Process+0x2fa>
      phost->gState  = HOST_ABORT_STATE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	220d      	movs	r2, #13
 800637c:	701a      	strb	r2, [r3, #0]
    break;
 800637e:	e02e      	b.n	80063de <USBH_Process+0x2fa>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006386:	2b00      	cmp	r3, #0
 8006388:	d02b      	beq.n	80063e2 <USBH_Process+0x2fe>
    {
      phost->pActiveClass->BgndProcess(phost);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006390:	695b      	ldr	r3, [r3, #20]
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	4798      	blx	r3
    }
    break;
 8006396:	e024      	b.n	80063e2 <USBH_Process+0x2fe>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f7ff fdbd 	bl	8005f18 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d01e      	beq.n	80063e6 <USBH_Process+0x302>
    {
      phost->pActiveClass->DeInit(phost);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80063ae:	68db      	ldr	r3, [r3, #12]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80063bc:	e013      	b.n	80063e6 <USBH_Process+0x302>

  case HOST_ABORT_STATE:
  default :
    break;
 80063be:	bf00      	nop
 80063c0:	e012      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063c2:	bf00      	nop
 80063c4:	e010      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063c6:	bf00      	nop
 80063c8:	e00e      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063ca:	bf00      	nop
 80063cc:	e00c      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063ce:	bf00      	nop
 80063d0:	e00a      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063d2:	bf00      	nop
 80063d4:	e008      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063d6:	bf00      	nop
 80063d8:	e006      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063da:	bf00      	nop
 80063dc:	e004      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063de:	bf00      	nop
 80063e0:	e002      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063e2:	bf00      	nop
 80063e4:	e000      	b.n	80063e8 <USBH_Process+0x304>
    break;
 80063e6:	bf00      	nop
  }
 return USBH_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b088      	sub	sp, #32
 80063f8:	af04      	add	r7, sp, #16
 80063fa:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80063fc:	2301      	movs	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	785b      	ldrb	r3, [r3, #1]
 8006404:	2b07      	cmp	r3, #7
 8006406:	f200 80f8 	bhi.w	80065fa <USBH_HandleEnum+0x206>
 800640a:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <USBH_HandleEnum+0x1c>)
 800640c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006410:	08006431 	.word	0x08006431
 8006414:	080064a3 	.word	0x080064a3
 8006418:	080064bb 	.word	0x080064bb
 800641c:	08006531 	.word	0x08006531
 8006420:	08006547 	.word	0x08006547
 8006424:	08006563 	.word	0x08006563
 8006428:	08006597 	.word	0x08006597
 800642c:	080065cb 	.word	0x080065cb
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006430:	2108      	movs	r1, #8
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f9ad 	bl	8006792 <USBH_Get_DevDesc>
 8006438:	4603      	mov	r3, r0
 800643a:	2b00      	cmp	r3, #0
 800643c:	f040 80df 	bne.w	80065fe <USBH_HandleEnum+0x20a>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	7919      	ldrb	r1, [r3, #4]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006460:	687a      	ldr	r2, [r7, #4]
 8006462:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006464:	b292      	uxth	r2, r2
 8006466:	9202      	str	r2, [sp, #8]
 8006468:	2200      	movs	r2, #0
 800646a:	9201      	str	r2, [sp, #4]
 800646c:	9300      	str	r3, [sp, #0]
 800646e:	4603      	mov	r3, r0
 8006470:	2280      	movs	r2, #128	; 0x80
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fed8 	bl	8007228 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	7959      	ldrb	r1, [r3, #5]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800648c:	b292      	uxth	r2, r2
 800648e:	9202      	str	r2, [sp, #8]
 8006490:	2200      	movs	r2, #0
 8006492:	9201      	str	r2, [sp, #4]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	4603      	mov	r3, r0
 8006498:	2200      	movs	r2, #0
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 fec4 	bl	8007228 <USBH_OpenPipe>

    }
    break;
 80064a0:	e0ad      	b.n	80065fe <USBH_HandleEnum+0x20a>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 80064a2:	2112      	movs	r1, #18
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 f974 	bl	8006792 <USBH_Get_DevDesc>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 80a8 	bne.w	8006602 <USBH_HandleEnum+0x20e>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2202      	movs	r2, #2
 80064b6:	705a      	strb	r2, [r3, #1]

    }
    break;
 80064b8:	e0a3      	b.n	8006602 <USBH_HandleEnum+0x20e>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80064ba:	2101      	movs	r1, #1
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 fa14 	bl	80068ea <USBH_SetAddress>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f040 809e 	bne.w	8006606 <USBH_HandleEnum+0x212>
    {
      USBH_Delay(2U);
 80064ca:	2002      	movs	r0, #2
 80064cc:	f001 ff05 	bl	80082da <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2203      	movs	r2, #3
 80064dc:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	7919      	ldrb	r1, [r3, #4]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80064f2:	b292      	uxth	r2, r2
 80064f4:	9202      	str	r2, [sp, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	9201      	str	r2, [sp, #4]
 80064fa:	9300      	str	r3, [sp, #0]
 80064fc:	4603      	mov	r3, r0
 80064fe:	2280      	movs	r2, #128	; 0x80
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fe91 	bl	8007228 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	7959      	ldrb	r1, [r3, #5]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800651a:	b292      	uxth	r2, r2
 800651c:	9202      	str	r2, [sp, #8]
 800651e:	2200      	movs	r2, #0
 8006520:	9201      	str	r2, [sp, #4]
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	4603      	mov	r3, r0
 8006526:	2200      	movs	r2, #0
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fe7d 	bl	8007228 <USBH_OpenPipe>
    }
    break;
 800652e:	e06a      	b.n	8006606 <USBH_HandleEnum+0x212>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006530:	2109      	movs	r1, #9
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f955 	bl	80067e2 <USBH_Get_CfgDesc>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d165      	bne.n	800660a <USBH_HandleEnum+0x216>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2204      	movs	r2, #4
 8006542:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006544:	e061      	b.n	800660a <USBH_HandleEnum+0x216>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800654c:	4619      	mov	r1, r3
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f947 	bl	80067e2 <USBH_Get_CfgDesc>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d159      	bne.n	800660e <USBH_HandleEnum+0x21a>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2205      	movs	r2, #5
 800655e:	705a      	strb	r2, [r3, #1]
    }
    break;
 8006560:	e055      	b.n	800660e <USBH_HandleEnum+0x21a>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006568:	2b00      	cmp	r3, #0
 800656a:	d010      	beq.n	800658e <USBH_HandleEnum+0x19a>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006578:	23ff      	movs	r3, #255	; 0xff
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f955 	bl	800682a <USBH_Get_StringDesc>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d145      	bne.n	8006612 <USBH_HandleEnum+0x21e>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2206      	movs	r2, #6
 800658a:	705a      	strb	r2, [r3, #1]
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800658c:	e041      	b.n	8006612 <USBH_HandleEnum+0x21e>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2206      	movs	r2, #6
 8006592:	705a      	strb	r2, [r3, #1]
    break;
 8006594:	e03d      	b.n	8006612 <USBH_HandleEnum+0x21e>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800659c:	2b00      	cmp	r3, #0
 800659e:	d010      	beq.n	80065c2 <USBH_HandleEnum+0x1ce>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80065ac:	23ff      	movs	r3, #255	; 0xff
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f93b 	bl	800682a <USBH_Get_StringDesc>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d12d      	bne.n	8006616 <USBH_HandleEnum+0x222>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2207      	movs	r2, #7
 80065be:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80065c0:	e029      	b.n	8006616 <USBH_HandleEnum+0x222>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2207      	movs	r2, #7
 80065c6:	705a      	strb	r2, [r3, #1]
    break;
 80065c8:	e025      	b.n	8006616 <USBH_HandleEnum+0x222>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00f      	beq.n	80065f4 <USBH_HandleEnum+0x200>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80065e0:	23ff      	movs	r3, #255	; 0xff
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f921 	bl	800682a <USBH_Get_StringDesc>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d115      	bne.n	800661a <USBH_HandleEnum+0x226>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 80065ee:	2300      	movs	r3, #0
 80065f0:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80065f2:	e012      	b.n	800661a <USBH_HandleEnum+0x226>
      Status = USBH_OK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	73fb      	strb	r3, [r7, #15]
    break;
 80065f8:	e00f      	b.n	800661a <USBH_HandleEnum+0x226>

  default:
    break;
 80065fa:	bf00      	nop
 80065fc:	e00e      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 80065fe:	bf00      	nop
 8006600:	e00c      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 8006602:	bf00      	nop
 8006604:	e00a      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 8006606:	bf00      	nop
 8006608:	e008      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 800660a:	bf00      	nop
 800660c:	e006      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 800660e:	bf00      	nop
 8006610:	e004      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 8006612:	bf00      	nop
 8006614:	e002      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 8006616:	bf00      	nop
 8006618:	e000      	b.n	800661c <USBH_HandleEnum+0x228>
    break;
 800661a:	bf00      	nop
  }
  return Status;
 800661c:	7bfb      	ldrb	r3, [r7, #15]
}
 800661e:	4618      	mov	r0, r3
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop

08006628 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006654:	1c5a      	adds	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f804 	bl	800666a <USBH_HandleSof>
}
 8006662:	bf00      	nop
 8006664:	3708      	adds	r7, #8
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800666a:	b580      	push	{r7, lr}
 800666c:	b082      	sub	sp, #8
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b0b      	cmp	r3, #11
 800667a:	d10a      	bne.n	8006692 <USBH_HandleSof+0x28>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006682:	2b00      	cmp	r3, #0
 8006684:	d005      	beq.n	8006692 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	4798      	blx	r3
  }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80066aa:	bf00      	nop
}
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b083      	sub	sp, #12
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 80066c6:	bf00      	nop
}
 80066c8:	370c      	adds	r7, #12
 80066ca:	46bd      	mov	sp, r7
 80066cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d0:	4770      	bx	lr

080066d2 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 80066d2:	b480      	push	{r7}
 80066d4:	b083      	sub	sp, #12
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	781b      	ldrb	r3, [r3, #0]
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10f      	bne.n	800671e <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006716:	2104      	movs	r1, #4
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	4798      	blx	r3
 800671c:	e007      	b.n	800672e <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006724:	2b01      	cmp	r3, #1
 8006726:	d102      	bne.n	800672e <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800672e:	2300      	movs	r3, #0
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}

08006738 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 fc80 	bl	8008046 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	791b      	ldrb	r3, [r3, #4]
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fdb8 	bl	80072c2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	795b      	ldrb	r3, [r3, #5]
 8006756:	4619      	mov	r1, r3
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 fdb2 	bl	80072c2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800676c:	2b00      	cmp	r3, #0
 800676e:	d005      	beq.n	800677c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006776:	2105      	movs	r1, #5
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fc47 	bl	8008010 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2203      	movs	r2, #3
 8006786:	701a      	strb	r2, [r3, #0]
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8006788:	2300      	movs	r3, #0
}
 800678a:	4618      	mov	r0, r3
 800678c:	3708      	adds	r7, #8
 800678e:	46bd      	mov	sp, r7
 8006790:	bd80      	pop	{r7, pc}

08006792 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b086      	sub	sp, #24
 8006796:	af02      	add	r7, sp, #8
 8006798:	6078      	str	r0, [r7, #4]
 800679a:	460b      	mov	r3, r1
 800679c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 80067a4:	78fb      	ldrb	r3, [r7, #3]
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	9300      	str	r3, [sp, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b0:	2100      	movs	r1, #0
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f864 	bl	8006880 <USBH_GetDescriptor>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10a      	bne.n	80067d8 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f203 3022 	addw	r0, r3, #802	; 0x322
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	b292      	uxth	r2, r2
 80067d2:	4619      	mov	r1, r3
 80067d4:	f000 f918 	bl	8006a08 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80067d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b086      	sub	sp, #24
 80067e6:	af02      	add	r7, sp, #8
 80067e8:	6078      	str	r0, [r7, #4]
 80067ea:	460b      	mov	r3, r1
 80067ec:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	331c      	adds	r3, #28
 80067f2:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80067f4:	887b      	ldrh	r3, [r7, #2]
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067fe:	2100      	movs	r1, #0
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f000 f83d 	bl	8006880 <USBH_GetDescriptor>
 8006806:	4603      	mov	r3, r0
 8006808:	72fb      	strb	r3, [r7, #11]
 800680a:	7afb      	ldrb	r3, [r7, #11]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d107      	bne.n	8006820 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006816:	887a      	ldrh	r2, [r7, #2]
 8006818:	68f9      	ldr	r1, [r7, #12]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f964 	bl	8006ae8 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 8006820:	7afb      	ldrb	r3, [r7, #11]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3710      	adds	r7, #16
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800682a:	b580      	push	{r7, lr}
 800682c:	b088      	sub	sp, #32
 800682e:	af02      	add	r7, sp, #8
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	607a      	str	r2, [r7, #4]
 8006834:	461a      	mov	r2, r3
 8006836:	460b      	mov	r3, r1
 8006838:	72fb      	strb	r3, [r7, #11]
 800683a:	4613      	mov	r3, r2
 800683c:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800683e:	7afb      	ldrb	r3, [r7, #11]
 8006840:	b29b      	uxth	r3, r3
 8006842:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006846:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800684e:	893b      	ldrh	r3, [r7, #8]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	460b      	mov	r3, r1
 8006854:	2100      	movs	r1, #0
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	f000 f812 	bl	8006880 <USBH_GetDescriptor>
 800685c:	4603      	mov	r3, r0
 800685e:	75fb      	strb	r3, [r7, #23]
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d107      	bne.n	8006876 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800686c:	893a      	ldrh	r2, [r7, #8]
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	4618      	mov	r0, r3
 8006872:	f000 fa37 	bl	8006ce4 <USBH_ParseStringDesc>
  }
  return status;
 8006876:	7dfb      	ldrb	r3, [r7, #23]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}

08006880 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b084      	sub	sp, #16
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	607b      	str	r3, [r7, #4]
 800688a:	460b      	mov	r3, r1
 800688c:	72fb      	strb	r3, [r7, #11]
 800688e:	4613      	mov	r3, r2
 8006890:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	789b      	ldrb	r3, [r3, #2]
 8006896:	2b01      	cmp	r3, #1
 8006898:	d11c      	bne.n	80068d4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2206      	movs	r2, #6
 80068aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	893a      	ldrh	r2, [r7, #8]
 80068b0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80068b2:	893b      	ldrh	r3, [r7, #8]
 80068b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80068b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068bc:	d104      	bne.n	80068c8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f240 4209 	movw	r2, #1033	; 0x409
 80068c4:	829a      	strh	r2, [r3, #20]
 80068c6:	e002      	b.n	80068ce <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	8b3a      	ldrh	r2, [r7, #24]
 80068d2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80068d4:	8b3b      	ldrh	r3, [r7, #24]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6879      	ldr	r1, [r7, #4]
 80068da:	68f8      	ldr	r0, [r7, #12]
 80068dc:	f000 fa50 	bl	8006d80 <USBH_CtlReq>
 80068e0:	4603      	mov	r3, r0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b082      	sub	sp, #8
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	789b      	ldrb	r3, [r3, #2]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d10f      	bne.n	800691e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2205      	movs	r2, #5
 8006908:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800690a:	78fb      	ldrb	r3, [r7, #3]
 800690c:	b29a      	uxth	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800691e:	2200      	movs	r2, #0
 8006920:	2100      	movs	r1, #0
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fa2c 	bl	8006d80 <USBH_CtlReq>
 8006928:	4603      	mov	r3, r0
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b082      	sub	sp, #8
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	460b      	mov	r3, r1
 800693c:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	789b      	ldrb	r3, [r3, #2]
 8006942:	2b01      	cmp	r3, #1
 8006944:	d10e      	bne.n	8006964 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2209      	movs	r2, #9
 8006950:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	887a      	ldrh	r2, [r7, #2]
 8006956:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2200      	movs	r2, #0
 800695c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006964:	2200      	movs	r2, #0
 8006966:	2100      	movs	r1, #0
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fa09 	bl	8006d80 <USBH_CtlReq>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	460b      	mov	r3, r1
 8006982:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	789b      	ldrb	r3, [r3, #2]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d10f      	bne.n	80069ac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2203      	movs	r2, #3
 8006996:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	b29a      	uxth	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2200      	movs	r2, #0
 80069a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 80069ac:	2200      	movs	r2, #0
 80069ae:	2100      	movs	r1, #0
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f9e5 	bl	8006d80 <USBH_CtlReq>
 80069b6:	4603      	mov	r3, r0
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	789b      	ldrb	r3, [r3, #2]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d10f      	bne.n	80069f4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2202      	movs	r2, #2
 80069d8:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80069e6:	78fb      	ldrb	r3, [r7, #3]
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80069f4:	2200      	movs	r2, #0
 80069f6:	2100      	movs	r1, #0
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 f9c1 	bl	8006d80 <USBH_CtlReq>
 80069fe:	4603      	mov	r3, r0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	781a      	ldrb	r2, [r3, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	785a      	ldrb	r2, [r3, #1]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	b29a      	uxth	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	3303      	adds	r3, #3
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	021b      	lsls	r3, r3, #8
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	791a      	ldrb	r2, [r3, #4]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	795a      	ldrb	r2, [r3, #5]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	799a      	ldrb	r2, [r3, #6]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	79da      	ldrb	r2, [r3, #7]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	2b08      	cmp	r3, #8
 8006a66:	d939      	bls.n	8006adc <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	3308      	adds	r3, #8
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3309      	adds	r3, #9
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	021b      	lsls	r3, r3, #8
 8006a7a:	b29b      	uxth	r3, r3
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	b29a      	uxth	r2, r3
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	330a      	adds	r3, #10
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b29a      	uxth	r2, r3
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	330b      	adds	r3, #11
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	330c      	adds	r3, #12
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	b29a      	uxth	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	330d      	adds	r3, #13
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	7b9a      	ldrb	r2, [r3, #14]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	7bda      	ldrb	r2, [r3, #15]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	7c1a      	ldrb	r2, [r3, #16]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	7c5a      	ldrb	r2, [r3, #17]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	745a      	strb	r2, [r3, #17]
  }
}
 8006adc:	bf00      	nop
 8006ade:	3714      	adds	r7, #20
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae6:	4770      	bx	lr

08006ae8 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	4613      	mov	r3, r2
 8006af4:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	781a      	ldrb	r2, [r3, #0]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	785a      	ldrb	r2, [r3, #1]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	3302      	adds	r3, #2
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	b29a      	uxth	r2, r3
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	3303      	adds	r3, #3
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	021b      	lsls	r3, r3, #8
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	b29a      	uxth	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	791a      	ldrb	r2, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	795a      	ldrb	r2, [r3, #5]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	799a      	ldrb	r2, [r3, #6]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	79da      	ldrb	r2, [r3, #7]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	7a1a      	ldrb	r2, [r3, #8]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006b5e:	88fb      	ldrh	r3, [r7, #6]
 8006b60:	2b09      	cmp	r3, #9
 8006b62:	d95f      	bls.n	8006c24 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006b64:	2309      	movs	r3, #9
 8006b66:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006b6c:	e051      	b.n	8006c12 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006b6e:	f107 0316 	add.w	r3, r7, #22
 8006b72:	4619      	mov	r1, r3
 8006b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b76:	f000 f8e8 	bl	8006d4a <USBH_GetNextDesc>
 8006b7a:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	785b      	ldrb	r3, [r3, #1]
 8006b80:	2b04      	cmp	r3, #4
 8006b82:	d146      	bne.n	8006c12 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006b84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b88:	221a      	movs	r2, #26
 8006b8a:	fb02 f303 	mul.w	r3, r2, r3
 8006b8e:	3308      	adds	r3, #8
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4413      	add	r3, r2
 8006b94:	3302      	adds	r3, #2
 8006b96:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006b98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b9a:	69f8      	ldr	r0, [r7, #28]
 8006b9c:	f000 f846 	bl	8006c2c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006baa:	e022      	b.n	8006bf2 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006bac:	f107 0316 	add.w	r3, r7, #22
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bb4:	f000 f8c9 	bl	8006d4a <USBH_GetNextDesc>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b05      	cmp	r3, #5
 8006bc0:	d117      	bne.n	8006bf2 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006bc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bc6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bca:	3201      	adds	r2, #1
 8006bcc:	00d2      	lsls	r2, r2, #3
 8006bce:	211a      	movs	r1, #26
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	68fa      	ldr	r2, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	3304      	adds	r3, #4
 8006bde:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006be0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006be2:	69b8      	ldr	r0, [r7, #24]
 8006be4:	f000 f851 	bl	8006c8a <USBH_ParseEPDesc>
            ep_ix++;
 8006be8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006bec:	3301      	adds	r3, #1
 8006bee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	791b      	ldrb	r3, [r3, #4]
 8006bf6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006bfa:	429a      	cmp	r2, r3
 8006bfc:	d204      	bcs.n	8006c08 <USBH_ParseCfgDesc+0x120>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	885a      	ldrh	r2, [r3, #2]
 8006c02:	8afb      	ldrh	r3, [r7, #22]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d8d1      	bhi.n	8006bac <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006c08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006c12:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d804      	bhi.n	8006c24 <USBH_ParseCfgDesc+0x13c>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	885a      	ldrh	r2, [r3, #2]
 8006c1e:	8afb      	ldrh	r3, [r7, #22]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d8a4      	bhi.n	8006b6e <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006c24:	bf00      	nop
 8006c26:	3728      	adds	r7, #40	; 0x28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b083      	sub	sp, #12
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	781a      	ldrb	r2, [r3, #0]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	785a      	ldrb	r2, [r3, #1]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	789a      	ldrb	r2, [r3, #2]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	78da      	ldrb	r2, [r3, #3]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	791a      	ldrb	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	795a      	ldrb	r2, [r3, #5]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	799a      	ldrb	r2, [r3, #6]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	79da      	ldrb	r2, [r3, #7]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	7a1a      	ldrb	r2, [r3, #8]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	721a      	strb	r2, [r3, #8]
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr

08006c8a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006c8a:	b480      	push	{r7}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	785a      	ldrb	r2, [r3, #1]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	789a      	ldrb	r2, [r3, #2]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	78da      	ldrb	r2, [r3, #3]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b29a      	uxth	r2, r3
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	3305      	adds	r3, #5
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	b29a      	uxth	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	799a      	ldrb	r2, [r3, #6]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	719a      	strb	r2, [r3, #6]
}
 8006cd8:	bf00      	nop
 8006cda:	370c      	adds	r7, #12
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	781b      	ldrb	r3, [r3, #0]
 8006cf8:	2b03      	cmp	r3, #3
 8006cfa:	d120      	bne.n	8006d3e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	1e9a      	subs	r2, r3, #2
 8006d02:	88fb      	ldrh	r3, [r7, #6]
 8006d04:	4293      	cmp	r3, r2
 8006d06:	bf28      	it	cs
 8006d08:	4613      	movcs	r3, r2
 8006d0a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	3302      	adds	r3, #2
 8006d10:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006d12:	2300      	movs	r3, #0
 8006d14:	82fb      	strh	r3, [r7, #22]
 8006d16:	e00b      	b.n	8006d30 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006d18:	8afb      	ldrh	r3, [r7, #22]
 8006d1a:	68fa      	ldr	r2, [r7, #12]
 8006d1c:	4413      	add	r3, r2
 8006d1e:	781a      	ldrb	r2, [r3, #0]
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	3301      	adds	r3, #1
 8006d28:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006d2a:	8afb      	ldrh	r3, [r7, #22]
 8006d2c:	3302      	adds	r3, #2
 8006d2e:	82fb      	strh	r3, [r7, #22]
 8006d30:	8afa      	ldrh	r2, [r7, #22]
 8006d32:	8abb      	ldrh	r3, [r7, #20]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d3ef      	bcc.n	8006d18 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	701a      	strb	r2, [r3, #0]
  }
}
 8006d3e:	bf00      	nop
 8006d40:	371c      	adds	r7, #28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	881a      	ldrh	r2, [r3, #0]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	4413      	add	r3, r2
 8006d60:	b29a      	uxth	r2, r3
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4413      	add	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006d72:	68fb      	ldr	r3, [r7, #12]
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	789b      	ldrb	r3, [r3, #2]
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d002      	beq.n	8006da0 <USBH_CtlReq+0x20>
 8006d9a:	2b02      	cmp	r3, #2
 8006d9c:	d00f      	beq.n	8006dbe <USBH_CtlReq+0x3e>
      }
    }
    break;

  default:
    break;
 8006d9e:	e034      	b.n	8006e0a <USBH_CtlReq+0x8a>
    phost->Control.buff = buff;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	88fa      	ldrh	r2, [r7, #6]
 8006daa:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2201      	movs	r2, #1
 8006db0:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2202      	movs	r2, #2
 8006db6:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006db8:	2301      	movs	r3, #1
 8006dba:	75fb      	strb	r3, [r7, #23]
    break;
 8006dbc:	e025      	b.n	8006e0a <USBH_CtlReq+0x8a>
    status = USBH_HandleControl(phost);
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f000 f828 	bl	8006e14 <USBH_HandleControl>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d108      	bne.n	8006de0 <USBH_CtlReq+0x60>
      phost->RequestState = CMD_SEND;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	75fb      	strb	r3, [r7, #23]
    break;
 8006dde:	e013      	b.n	8006e08 <USBH_CtlReq+0x88>
    else if (status == USBH_NOT_SUPPORTED)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b03      	cmp	r3, #3
 8006de4:	d108      	bne.n	8006df8 <USBH_CtlReq+0x78>
      phost->RequestState = CMD_SEND;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2201      	movs	r2, #1
 8006dea:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006df2:	2303      	movs	r3, #3
 8006df4:	75fb      	strb	r3, [r7, #23]
    break;
 8006df6:	e007      	b.n	8006e08 <USBH_CtlReq+0x88>
      if (status == USBH_FAIL)
 8006df8:	7dfb      	ldrb	r3, [r7, #23]
 8006dfa:	2b02      	cmp	r3, #2
 8006dfc:	d104      	bne.n	8006e08 <USBH_CtlReq+0x88>
        phost->RequestState = CMD_SEND;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2201      	movs	r2, #1
 8006e02:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006e04:	2302      	movs	r3, #2
 8006e06:	75fb      	strb	r3, [r7, #23]
    break;
 8006e08:	bf00      	nop
  }
  return status;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	7e1b      	ldrb	r3, [r3, #24]
 8006e28:	3b01      	subs	r3, #1
 8006e2a:	2b0a      	cmp	r3, #10
 8006e2c:	f200 814c 	bhi.w	80070c8 <USBH_HandleControl+0x2b4>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <USBH_HandleControl+0x24>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e65 	.word	0x08006e65
 8006e3c:	08006e7f 	.word	0x08006e7f
 8006e40:	08006ee9 	.word	0x08006ee9
 8006e44:	08006f0f 	.word	0x08006f0f
 8006e48:	08006f47 	.word	0x08006f47
 8006e4c:	08006f73 	.word	0x08006f73
 8006e50:	08006fc5 	.word	0x08006fc5
 8006e54:	08006fe7 	.word	0x08006fe7
 8006e58:	08007023 	.word	0x08007023
 8006e5c:	0800704b 	.word	0x0800704b
 8006e60:	08007089 	.word	0x08007089
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f103 0110 	add.w	r1, r3, #16
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	795b      	ldrb	r3, [r3, #5]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 f939 	bl	80070e8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2202      	movs	r2, #2
 8006e7a:	761a      	strb	r2, [r3, #24]
    break;
 8006e7c:	e12f      	b.n	80070de <USBH_HandleControl+0x2ca>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	795b      	ldrb	r3, [r3, #5]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f9cb 	bl	8008220 <USBH_LL_GetURBState>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d11e      	bne.n	8006ed2 <USBH_HandleControl+0xbe>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	7c1b      	ldrb	r3, [r3, #16]
 8006e98:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006e9c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	8adb      	ldrh	r3, [r3, #22]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006ea6:	7b7b      	ldrb	r3, [r7, #13]
 8006ea8:	2b80      	cmp	r3, #128	; 0x80
 8006eaa:	d103      	bne.n	8006eb4 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006eb2:	e10b      	b.n	80070cc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_DATA_OUT;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2205      	movs	r2, #5
 8006eb8:	761a      	strb	r2, [r3, #24]
    break;
 8006eba:	e107      	b.n	80070cc <USBH_HandleControl+0x2b8>
        if (direction == USB_D2H)
 8006ebc:	7b7b      	ldrb	r3, [r7, #13]
 8006ebe:	2b80      	cmp	r3, #128	; 0x80
 8006ec0:	d103      	bne.n	8006eca <USBH_HandleControl+0xb6>
          phost->Control.state = CTRL_STATUS_OUT;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2209      	movs	r2, #9
 8006ec6:	761a      	strb	r2, [r3, #24]
    break;
 8006ec8:	e100      	b.n	80070cc <USBH_HandleControl+0x2b8>
          phost->Control.state = CTRL_STATUS_IN;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2207      	movs	r2, #7
 8006ece:	761a      	strb	r2, [r3, #24]
    break;
 8006ed0:	e0fc      	b.n	80070cc <USBH_HandleControl+0x2b8>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006ed2:	7bbb      	ldrb	r3, [r7, #14]
 8006ed4:	2b04      	cmp	r3, #4
 8006ed6:	d003      	beq.n	8006ee0 <USBH_HandleControl+0xcc>
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b02      	cmp	r3, #2
 8006edc:	f040 80f6 	bne.w	80070cc <USBH_HandleControl+0x2b8>
        phost->Control.state = CTRL_ERROR;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	220b      	movs	r2, #11
 8006ee4:	761a      	strb	r2, [r3, #24]
    break;
 8006ee6:	e0f1      	b.n	80070cc <USBH_HandleControl+0x2b8>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6899      	ldr	r1, [r3, #8]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	899a      	ldrh	r2, [r3, #12]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	791b      	ldrb	r3, [r3, #4]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 f930 	bl	8007166 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2204      	movs	r2, #4
 8006f0a:	761a      	strb	r2, [r3, #24]
    break;
 8006f0c:	e0e7      	b.n	80070de <USBH_HandleControl+0x2ca>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	791b      	ldrb	r3, [r3, #4]
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f001 f983 	bl	8008220 <USBH_LL_GetURBState>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d102      	bne.n	8006f2a <USBH_HandleControl+0x116>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2209      	movs	r2, #9
 8006f28:	761a      	strb	r2, [r3, #24]
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006f2a:	7bbb      	ldrb	r3, [r7, #14]
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d102      	bne.n	8006f36 <USBH_HandleControl+0x122>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006f30:	2303      	movs	r3, #3
 8006f32:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f34:	e0cc      	b.n	80070d0 <USBH_HandleControl+0x2bc>
      if (URB_Status == USBH_URB_ERROR)
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	f040 80c9 	bne.w	80070d0 <USBH_HandleControl+0x2bc>
        phost->Control.state = CTRL_ERROR;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	220b      	movs	r2, #11
 8006f42:	761a      	strb	r2, [r3, #24]
    break;
 8006f44:	e0c4      	b.n	80070d0 <USBH_HandleControl+0x2bc>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6899      	ldr	r1, [r3, #8]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	899a      	ldrh	r2, [r3, #12]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	7958      	ldrb	r0, [r3, #5]
 8006f52:	2301      	movs	r3, #1
 8006f54:	9300      	str	r3, [sp, #0]
 8006f56:	4603      	mov	r3, r0
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f8df 	bl	800711c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006f64:	b29a      	uxth	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2206      	movs	r2, #6
 8006f6e:	761a      	strb	r2, [r3, #24]
    break;
 8006f70:	e0b5      	b.n	80070de <USBH_HandleControl+0x2ca>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	795b      	ldrb	r3, [r3, #5]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f001 f951 	bl	8008220 <USBH_LL_GetURBState>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006f82:	7bbb      	ldrb	r3, [r7, #14]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d103      	bne.n	8006f90 <USBH_HandleControl+0x17c>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2207      	movs	r2, #7
 8006f8c:	761a      	strb	r2, [r3, #24]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f8e:	e0a1      	b.n	80070d4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_STALL)
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d105      	bne.n	8006fa2 <USBH_HandleControl+0x18e>
      phost->Control.state = CTRL_STALLED;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	220c      	movs	r2, #12
 8006f9a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa0:	e098      	b.n	80070d4 <USBH_HandleControl+0x2c0>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006fa2:	7bbb      	ldrb	r3, [r7, #14]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d103      	bne.n	8006fb0 <USBH_HandleControl+0x19c>
      phost->Control.state = CTRL_DATA_OUT;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2205      	movs	r2, #5
 8006fac:	761a      	strb	r2, [r3, #24]
    break;
 8006fae:	e091      	b.n	80070d4 <USBH_HandleControl+0x2c0>
      if (URB_Status == USBH_URB_ERROR)
 8006fb0:	7bbb      	ldrb	r3, [r7, #14]
 8006fb2:	2b04      	cmp	r3, #4
 8006fb4:	f040 808e 	bne.w	80070d4 <USBH_HandleControl+0x2c0>
        phost->Control.state = CTRL_ERROR;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	220b      	movs	r2, #11
 8006fbc:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	73fb      	strb	r3, [r7, #15]
    break;
 8006fc2:	e087      	b.n	80070d4 <USBH_HandleControl+0x2c0>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	791b      	ldrb	r3, [r3, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	2100      	movs	r1, #0
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f8ca 	bl	8007166 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2208      	movs	r2, #8
 8006fe2:	761a      	strb	r2, [r3, #24]

    break;
 8006fe4:	e07b      	b.n	80070de <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	791b      	ldrb	r3, [r3, #4]
 8006fea:	4619      	mov	r1, r3
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f001 f917 	bl	8008220 <USBH_LL_GetURBState>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006ff6:	7bbb      	ldrb	r3, [r7, #14]
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d105      	bne.n	8007008 <USBH_HandleControl+0x1f4>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	220d      	movs	r2, #13
 8007000:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007002:	2300      	movs	r3, #0
 8007004:	73fb      	strb	r3, [r7, #15]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007006:	e067      	b.n	80070d8 <USBH_HandleControl+0x2c4>
    else if (URB_Status == USBH_URB_ERROR)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b04      	cmp	r3, #4
 800700c:	d103      	bne.n	8007016 <USBH_HandleControl+0x202>
      phost->Control.state = CTRL_ERROR;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	220b      	movs	r2, #11
 8007012:	761a      	strb	r2, [r3, #24]
    break;
 8007014:	e060      	b.n	80070d8 <USBH_HandleControl+0x2c4>
      if(URB_Status == USBH_URB_STALL)
 8007016:	7bbb      	ldrb	r3, [r7, #14]
 8007018:	2b05      	cmp	r3, #5
 800701a:	d15d      	bne.n	80070d8 <USBH_HandleControl+0x2c4>
        status = USBH_NOT_SUPPORTED;
 800701c:	2303      	movs	r3, #3
 800701e:	73fb      	strb	r3, [r7, #15]
    break;
 8007020:	e05a      	b.n	80070d8 <USBH_HandleControl+0x2c4>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	795a      	ldrb	r2, [r3, #5]
 8007026:	2301      	movs	r3, #1
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4613      	mov	r3, r2
 800702c:	2200      	movs	r2, #0
 800702e:	2100      	movs	r1, #0
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f873 	bl	800711c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800703c:	b29a      	uxth	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	220a      	movs	r2, #10
 8007046:	761a      	strb	r2, [r3, #24]
    break;
 8007048:	e049      	b.n	80070de <USBH_HandleControl+0x2ca>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	795b      	ldrb	r3, [r3, #5]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 f8e5 	bl	8008220 <USBH_LL_GetURBState>
 8007056:	4603      	mov	r3, r0
 8007058:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d105      	bne.n	800706c <USBH_HandleControl+0x258>
    {
      status = USBH_OK;
 8007060:	2300      	movs	r3, #0
 8007062:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	220d      	movs	r2, #13
 8007068:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

    }
    break;
 800706a:	e037      	b.n	80070dc <USBH_HandleControl+0x2c8>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b02      	cmp	r3, #2
 8007070:	d103      	bne.n	800707a <USBH_HandleControl+0x266>
      phost->Control.state = CTRL_STATUS_OUT;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2209      	movs	r2, #9
 8007076:	761a      	strb	r2, [r3, #24]
    break;
 8007078:	e030      	b.n	80070dc <USBH_HandleControl+0x2c8>
      if (URB_Status == USBH_URB_ERROR)
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	2b04      	cmp	r3, #4
 800707e:	d12d      	bne.n	80070dc <USBH_HandleControl+0x2c8>
        phost->Control.state = CTRL_ERROR;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	220b      	movs	r2, #11
 8007084:	761a      	strb	r2, [r3, #24]
    break;
 8007086:	e029      	b.n	80070dc <USBH_HandleControl+0x2c8>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	7e5b      	ldrb	r3, [r3, #25]
 800708c:	3301      	adds	r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	765a      	strb	r2, [r3, #25]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	7e5b      	ldrb	r3, [r3, #25]
 8007098:	2b02      	cmp	r3, #2
 800709a:	d809      	bhi.n	80070b0 <USBH_HandleControl+0x29c>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 ffd2 	bl	8008046 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2201      	movs	r2, #1
 80070a6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 80070ae:	e016      	b.n	80070de <USBH_HandleControl+0x2ca>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80070b6:	2106      	movs	r1, #6
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 80070c2:	2302      	movs	r3, #2
 80070c4:	73fb      	strb	r3, [r7, #15]
    break;
 80070c6:	e00a      	b.n	80070de <USBH_HandleControl+0x2ca>

  default:
    break;
 80070c8:	bf00      	nop
 80070ca:	e008      	b.n	80070de <USBH_HandleControl+0x2ca>
    break;
 80070cc:	bf00      	nop
 80070ce:	e006      	b.n	80070de <USBH_HandleControl+0x2ca>
    break;
 80070d0:	bf00      	nop
 80070d2:	e004      	b.n	80070de <USBH_HandleControl+0x2ca>
    break;
 80070d4:	bf00      	nop
 80070d6:	e002      	b.n	80070de <USBH_HandleControl+0x2ca>
    break;
 80070d8:	bf00      	nop
 80070da:	e000      	b.n	80070de <USBH_HandleControl+0x2ca>
    break;
 80070dc:	bf00      	nop
  }
  return status;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b088      	sub	sp, #32
 80070ec:	af04      	add	r7, sp, #16
 80070ee:	60f8      	str	r0, [r7, #12]
 80070f0:	60b9      	str	r1, [r7, #8]
 80070f2:	4613      	mov	r3, r2
 80070f4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80070f6:	79f9      	ldrb	r1, [r7, #7]
 80070f8:	2300      	movs	r3, #0
 80070fa:	9303      	str	r3, [sp, #12]
 80070fc:	2308      	movs	r3, #8
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	2300      	movs	r3, #0
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	2300      	movs	r3, #0
 800710a:	2200      	movs	r2, #0
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f001 f856 	bl	80081be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007112:	2300      	movs	r3, #0
}
 8007114:	4618      	mov	r0, r3
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af04      	add	r7, sp, #16
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	4611      	mov	r1, r2
 8007128:	461a      	mov	r2, r3
 800712a:	460b      	mov	r3, r1
 800712c:	80fb      	strh	r3, [r7, #6]
 800712e:	4613      	mov	r3, r2
 8007130:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007138:	2b00      	cmp	r3, #0
 800713a:	d001      	beq.n	8007140 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007140:	7979      	ldrb	r1, [r7, #5]
 8007142:	7e3b      	ldrb	r3, [r7, #24]
 8007144:	9303      	str	r3, [sp, #12]
 8007146:	88fb      	ldrh	r3, [r7, #6]
 8007148:	9302      	str	r3, [sp, #8]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	9301      	str	r3, [sp, #4]
 800714e:	2301      	movs	r3, #1
 8007150:	9300      	str	r3, [sp, #0]
 8007152:	2300      	movs	r3, #0
 8007154:	2200      	movs	r2, #0
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f001 f831 	bl	80081be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007166:	b580      	push	{r7, lr}
 8007168:	b088      	sub	sp, #32
 800716a:	af04      	add	r7, sp, #16
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	4611      	mov	r1, r2
 8007172:	461a      	mov	r2, r3
 8007174:	460b      	mov	r3, r1
 8007176:	80fb      	strh	r3, [r7, #6]
 8007178:	4613      	mov	r3, r2
 800717a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800717c:	7979      	ldrb	r1, [r7, #5]
 800717e:	2300      	movs	r3, #0
 8007180:	9303      	str	r3, [sp, #12]
 8007182:	88fb      	ldrh	r3, [r7, #6]
 8007184:	9302      	str	r3, [sp, #8]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	9301      	str	r3, [sp, #4]
 800718a:	2301      	movs	r3, #1
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	2300      	movs	r3, #0
 8007190:	2201      	movs	r2, #1
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f001 f813 	bl	80081be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007198:	2300      	movs	r3, #0

}
 800719a:	4618      	mov	r0, r3
 800719c:	3710      	adds	r7, #16
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b088      	sub	sp, #32
 80071a6:	af04      	add	r7, sp, #16
 80071a8:	60f8      	str	r0, [r7, #12]
 80071aa:	60b9      	str	r1, [r7, #8]
 80071ac:	4611      	mov	r1, r2
 80071ae:	461a      	mov	r2, r3
 80071b0:	460b      	mov	r3, r1
 80071b2:	80fb      	strh	r3, [r7, #6]
 80071b4:	4613      	mov	r3, r2
 80071b6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80071c2:	2300      	movs	r3, #0
 80071c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071c6:	7979      	ldrb	r1, [r7, #5]
 80071c8:	7e3b      	ldrb	r3, [r7, #24]
 80071ca:	9303      	str	r3, [sp, #12]
 80071cc:	88fb      	ldrh	r3, [r7, #6]
 80071ce:	9302      	str	r3, [sp, #8]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	9301      	str	r3, [sp, #4]
 80071d4:	2301      	movs	r3, #1
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	2302      	movs	r3, #2
 80071da:	2200      	movs	r2, #0
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 ffee 	bl	80081be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}

080071ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af04      	add	r7, sp, #16
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4611      	mov	r1, r2
 80071f8:	461a      	mov	r2, r3
 80071fa:	460b      	mov	r3, r1
 80071fc:	80fb      	strh	r3, [r7, #6]
 80071fe:	4613      	mov	r3, r2
 8007200:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007202:	7979      	ldrb	r1, [r7, #5]
 8007204:	2300      	movs	r3, #0
 8007206:	9303      	str	r3, [sp, #12]
 8007208:	88fb      	ldrh	r3, [r7, #6]
 800720a:	9302      	str	r3, [sp, #8]
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	9301      	str	r3, [sp, #4]
 8007210:	2301      	movs	r3, #1
 8007212:	9300      	str	r3, [sp, #0]
 8007214:	2302      	movs	r3, #2
 8007216:	2201      	movs	r2, #1
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 ffd0 	bl	80081be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800721e:	2300      	movs	r3, #0
}
 8007220:	4618      	mov	r0, r3
 8007222:	3710      	adds	r7, #16
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af04      	add	r7, sp, #16
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	4608      	mov	r0, r1
 8007232:	4611      	mov	r1, r2
 8007234:	461a      	mov	r2, r3
 8007236:	4603      	mov	r3, r0
 8007238:	70fb      	strb	r3, [r7, #3]
 800723a:	460b      	mov	r3, r1
 800723c:	70bb      	strb	r3, [r7, #2]
 800723e:	4613      	mov	r3, r2
 8007240:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 8007242:	7878      	ldrb	r0, [r7, #1]
 8007244:	78ba      	ldrb	r2, [r7, #2]
 8007246:	78f9      	ldrb	r1, [r7, #3]
 8007248:	8b3b      	ldrh	r3, [r7, #24]
 800724a:	9302      	str	r3, [sp, #8]
 800724c:	7d3b      	ldrb	r3, [r7, #20]
 800724e:	9301      	str	r3, [sp, #4]
 8007250:	7c3b      	ldrb	r3, [r7, #16]
 8007252:	9300      	str	r3, [sp, #0]
 8007254:	4603      	mov	r3, r0
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 ff63 	bl	8008122 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800725c:	2300      	movs	r3, #0

}
 800725e:	4618      	mov	r0, r3
 8007260:	3708      	adds	r7, #8
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b082      	sub	sp, #8
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	460b      	mov	r3, r1
 8007270:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007272:	78fb      	ldrb	r3, [r7, #3]
 8007274:	4619      	mov	r1, r3
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 ff82 	bl	8008180 <USBH_LL_ClosePipe>

  return USBH_OK;
 800727c:	2300      	movs	r3, #0

}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007286:	b580      	push	{r7, lr}
 8007288:	b084      	sub	sp, #16
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
 800728e:	460b      	mov	r3, r1
 8007290:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f831 	bl	80072fa <USBH_GetFreePipe>
 8007298:	4603      	mov	r3, r0
 800729a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800729c:	89fb      	ldrh	r3, [r7, #14]
 800729e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d007      	beq.n	80072b6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 80072a6:	78fb      	ldrb	r3, [r7, #3]
 80072a8:	89fa      	ldrh	r2, [r7, #14]
 80072aa:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	32e0      	adds	r2, #224	; 0xe0
 80072b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 80072b6:	89fb      	ldrh	r3, [r7, #14]
 80072b8:	b2db      	uxtb	r3, r3
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 80072ce:	78fb      	ldrb	r3, [r7, #3]
 80072d0:	2b0a      	cmp	r3, #10
 80072d2:	d80b      	bhi.n	80072ec <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 80072d4:	78fa      	ldrb	r2, [r7, #3]
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	32e0      	adds	r2, #224	; 0xe0
 80072da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	32e0      	adds	r2, #224	; 0xe0
 80072e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 80072ec:	2300      	movs	r3, #0
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b085      	sub	sp, #20
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8007306:	2300      	movs	r3, #0
 8007308:	73fb      	strb	r3, [r7, #15]
 800730a:	e00e      	b.n	800732a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800730c:	7bfa      	ldrb	r2, [r7, #15]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32e0      	adds	r2, #224	; 0xe0
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d102      	bne.n	8007324 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	b29b      	uxth	r3, r3
 8007322:	e007      	b.n	8007334 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	3301      	adds	r3, #1
 8007328:	73fb      	strb	r3, [r7, #15]
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2b0a      	cmp	r3, #10
 800732e:	d9ed      	bls.n	800730c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 8007330:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007334:	4618      	mov	r0, r3
 8007336:	3714      	adds	r7, #20
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b0c2      	sub	sp, #264	; 0x108
 8007344:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007346:	f7f9 f91b 	bl	8000580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800734a:	f000 f833 	bl	80073b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800734e:	f000 f9c3 	bl	80076d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8007352:	f000 f8b1 	bl	80074b8 <MX_ADC1_Init>
  MX_I2C1_Init();
 8007356:	f000 f901 	bl	800755c <MX_I2C1_Init>
  MX_I2S3_Init();
 800735a:	f000 f92d 	bl	80075b8 <MX_I2S3_Init>
  MX_SPI1_Init();
 800735e:	f000 f95b 	bl	8007618 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8007362:	f000 f98f 	bl	8007684 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8007366:	f000 fd03 	bl	8007d70 <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  /* USER CODE END WHILE */
	      MX_USB_HOST_Process();
 800736a:	f000 fd27 	bl	8007dbc <MX_USB_HOST_Process>
	      HAL_ADC_Start(&hadc1);
 800736e:	480e      	ldr	r0, [pc, #56]	; (80073a8 <main+0x68>)
 8007370:	f7f9 f9de 	bl	8000730 <HAL_ADC_Start>
	      int val = HAL_ADC_GetValue(&hadc1);
 8007374:	480c      	ldr	r0, [pc, #48]	; (80073a8 <main+0x68>)
 8007376:	f7f9 faa1 	bl	80008bc <HAL_ADC_GetValue>
 800737a:	4603      	mov	r3, r0
 800737c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	      char buffer[256];
	      sprintf(buffer, "%d\n", val);
 8007380:	1d3b      	adds	r3, r7, #4
 8007382:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8007386:	4909      	ldr	r1, [pc, #36]	; (80073ac <main+0x6c>)
 8007388:	4618      	mov	r0, r3
 800738a:	f001 f91d 	bl	80085c8 <siprintf>
	      HAL_UART_Transmit(&huart2, buffer, strlen(buffer), 1000);
 800738e:	1d3b      	adds	r3, r7, #4
 8007390:	4618      	mov	r0, r3
 8007392:	f7f8 ff1d 	bl	80001d0 <strlen>
 8007396:	4603      	mov	r3, r0
 8007398:	b29a      	uxth	r2, r3
 800739a:	1d39      	adds	r1, r7, #4
 800739c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80073a0:	4803      	ldr	r0, [pc, #12]	; (80073b0 <main+0x70>)
 80073a2:	f7fc ffca 	bl	800433a <HAL_UART_Transmit>
  {
 80073a6:	e7e0      	b.n	800736a <main+0x2a>
 80073a8:	20000118 	.word	0x20000118
 80073ac:	08008c80 	.word	0x08008c80
 80073b0:	200001b8 	.word	0x200001b8

080073b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b098      	sub	sp, #96	; 0x60
 80073b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80073ba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80073be:	2230      	movs	r2, #48	; 0x30
 80073c0:	2100      	movs	r1, #0
 80073c2:	4618      	mov	r0, r3
 80073c4:	f001 f840 	bl	8008448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80073c8:	f107 031c 	add.w	r3, r7, #28
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]
 80073d0:	605a      	str	r2, [r3, #4]
 80073d2:	609a      	str	r2, [r3, #8]
 80073d4:	60da      	str	r2, [r3, #12]
 80073d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	605a      	str	r2, [r3, #4]
 80073e2:	609a      	str	r2, [r3, #8]
 80073e4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80073e6:	2300      	movs	r3, #0
 80073e8:	60bb      	str	r3, [r7, #8]
 80073ea:	4b31      	ldr	r3, [pc, #196]	; (80074b0 <SystemClock_Config+0xfc>)
 80073ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ee:	4a30      	ldr	r2, [pc, #192]	; (80074b0 <SystemClock_Config+0xfc>)
 80073f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f4:	6413      	str	r3, [r2, #64]	; 0x40
 80073f6:	4b2e      	ldr	r3, [pc, #184]	; (80074b0 <SystemClock_Config+0xfc>)
 80073f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073fe:	60bb      	str	r3, [r7, #8]
 8007400:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
 8007406:	4b2b      	ldr	r3, [pc, #172]	; (80074b4 <SystemClock_Config+0x100>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4a2a      	ldr	r2, [pc, #168]	; (80074b4 <SystemClock_Config+0x100>)
 800740c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	4b28      	ldr	r3, [pc, #160]	; (80074b4 <SystemClock_Config+0x100>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800741a:	607b      	str	r3, [r7, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800741e:	2301      	movs	r3, #1
 8007420:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007422:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007428:	2302      	movs	r3, #2
 800742a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800742c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007430:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007432:	2308      	movs	r3, #8
 8007434:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007436:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800743a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800743c:	2302      	movs	r3, #2
 800743e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007440:	2307      	movs	r3, #7
 8007442:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007444:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007448:	4618      	mov	r0, r3
 800744a:	f7fc f957 	bl	80036fc <HAL_RCC_OscConfig>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8007454:	f000 fa3e 	bl	80078d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007458:	230f      	movs	r3, #15
 800745a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800745c:	2302      	movs	r3, #2
 800745e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007460:	2300      	movs	r3, #0
 8007462:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007464:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007468:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800746a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007470:	f107 031c 	add.w	r3, r7, #28
 8007474:	2105      	movs	r1, #5
 8007476:	4618      	mov	r0, r3
 8007478:	f7fc fb82 	bl	8003b80 <HAL_RCC_ClockConfig>
 800747c:	4603      	mov	r3, r0
 800747e:	2b00      	cmp	r3, #0
 8007480:	d001      	beq.n	8007486 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8007482:	f000 fa27 	bl	80078d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8007486:	2301      	movs	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800748a:	23c0      	movs	r3, #192	; 0xc0
 800748c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800748e:	2302      	movs	r3, #2
 8007490:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007492:	f107 030c 	add.w	r3, r7, #12
 8007496:	4618      	mov	r0, r3
 8007498:	f7fc fd60 	bl	8003f5c <HAL_RCCEx_PeriphCLKConfig>
 800749c:	4603      	mov	r3, r0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d001      	beq.n	80074a6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80074a2:	f000 fa17 	bl	80078d4 <Error_Handler>
  }
}
 80074a6:	bf00      	nop
 80074a8:	3760      	adds	r7, #96	; 0x60
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop
 80074b0:	40023800 	.word	0x40023800
 80074b4:	40007000 	.word	0x40007000

080074b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80074be:	463b      	mov	r3, r7
 80074c0:	2200      	movs	r2, #0
 80074c2:	601a      	str	r2, [r3, #0]
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	609a      	str	r2, [r3, #8]
 80074c8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80074ca:	4b21      	ldr	r3, [pc, #132]	; (8007550 <MX_ADC1_Init+0x98>)
 80074cc:	4a21      	ldr	r2, [pc, #132]	; (8007554 <MX_ADC1_Init+0x9c>)
 80074ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80074d0:	4b1f      	ldr	r3, [pc, #124]	; (8007550 <MX_ADC1_Init+0x98>)
 80074d2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80074d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80074d8:	4b1d      	ldr	r3, [pc, #116]	; (8007550 <MX_ADC1_Init+0x98>)
 80074da:	2200      	movs	r2, #0
 80074dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80074de:	4b1c      	ldr	r3, [pc, #112]	; (8007550 <MX_ADC1_Init+0x98>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <MX_ADC1_Init+0x98>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80074ea:	4b19      	ldr	r3, [pc, #100]	; (8007550 <MX_ADC1_Init+0x98>)
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80074f2:	4b17      	ldr	r3, [pc, #92]	; (8007550 <MX_ADC1_Init+0x98>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80074f8:	4b15      	ldr	r3, [pc, #84]	; (8007550 <MX_ADC1_Init+0x98>)
 80074fa:	4a17      	ldr	r2, [pc, #92]	; (8007558 <MX_ADC1_Init+0xa0>)
 80074fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80074fe:	4b14      	ldr	r3, [pc, #80]	; (8007550 <MX_ADC1_Init+0x98>)
 8007500:	2200      	movs	r2, #0
 8007502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007504:	4b12      	ldr	r3, [pc, #72]	; (8007550 <MX_ADC1_Init+0x98>)
 8007506:	2201      	movs	r2, #1
 8007508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800750a:	4b11      	ldr	r3, [pc, #68]	; (8007550 <MX_ADC1_Init+0x98>)
 800750c:	2200      	movs	r2, #0
 800750e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <MX_ADC1_Init+0x98>)
 8007514:	2201      	movs	r2, #1
 8007516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007518:	480d      	ldr	r0, [pc, #52]	; (8007550 <MX_ADC1_Init+0x98>)
 800751a:	f7f9 f8c5 	bl	80006a8 <HAL_ADC_Init>
 800751e:	4603      	mov	r3, r0
 8007520:	2b00      	cmp	r3, #0
 8007522:	d001      	beq.n	8007528 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007524:	f000 f9d6 	bl	80078d4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8007528:	2301      	movs	r3, #1
 800752a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800752c:	2301      	movs	r3, #1
 800752e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007530:	2300      	movs	r3, #0
 8007532:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007534:	463b      	mov	r3, r7
 8007536:	4619      	mov	r1, r3
 8007538:	4805      	ldr	r0, [pc, #20]	; (8007550 <MX_ADC1_Init+0x98>)
 800753a:	f7f9 f9cd 	bl	80008d8 <HAL_ADC_ConfigChannel>
 800753e:	4603      	mov	r3, r0
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007544:	f000 f9c6 	bl	80078d4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007548:	bf00      	nop
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	20000118 	.word	0x20000118
 8007554:	40012000 	.word	0x40012000
 8007558:	0f000001 	.word	0x0f000001

0800755c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007560:	4b12      	ldr	r3, [pc, #72]	; (80075ac <MX_I2C1_Init+0x50>)
 8007562:	4a13      	ldr	r2, [pc, #76]	; (80075b0 <MX_I2C1_Init+0x54>)
 8007564:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007566:	4b11      	ldr	r3, [pc, #68]	; (80075ac <MX_I2C1_Init+0x50>)
 8007568:	4a12      	ldr	r2, [pc, #72]	; (80075b4 <MX_I2C1_Init+0x58>)
 800756a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800756c:	4b0f      	ldr	r3, [pc, #60]	; (80075ac <MX_I2C1_Init+0x50>)
 800756e:	2200      	movs	r2, #0
 8007570:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007572:	4b0e      	ldr	r3, [pc, #56]	; (80075ac <MX_I2C1_Init+0x50>)
 8007574:	2200      	movs	r2, #0
 8007576:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <MX_I2C1_Init+0x50>)
 800757a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800757e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <MX_I2C1_Init+0x50>)
 8007582:	2200      	movs	r2, #0
 8007584:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <MX_I2C1_Init+0x50>)
 8007588:	2200      	movs	r2, #0
 800758a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800758c:	4b07      	ldr	r3, [pc, #28]	; (80075ac <MX_I2C1_Init+0x50>)
 800758e:	2200      	movs	r2, #0
 8007590:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007592:	4b06      	ldr	r3, [pc, #24]	; (80075ac <MX_I2C1_Init+0x50>)
 8007594:	2200      	movs	r2, #0
 8007596:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007598:	4804      	ldr	r0, [pc, #16]	; (80075ac <MX_I2C1_Init+0x50>)
 800759a:	f7fb fae7 	bl	8002b6c <HAL_I2C_Init>
 800759e:	4603      	mov	r3, r0
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d001      	beq.n	80075a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80075a4:	f000 f996 	bl	80078d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80075a8:	bf00      	nop
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	200000c4 	.word	0x200000c4
 80075b0:	40005400 	.word	0x40005400
 80075b4:	000186a0 	.word	0x000186a0

080075b8 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80075bc:	4b13      	ldr	r3, [pc, #76]	; (800760c <MX_I2S3_Init+0x54>)
 80075be:	4a14      	ldr	r2, [pc, #80]	; (8007610 <MX_I2S3_Init+0x58>)
 80075c0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80075c2:	4b12      	ldr	r3, [pc, #72]	; (800760c <MX_I2S3_Init+0x54>)
 80075c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075c8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80075ca:	4b10      	ldr	r3, [pc, #64]	; (800760c <MX_I2S3_Init+0x54>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80075d0:	4b0e      	ldr	r3, [pc, #56]	; (800760c <MX_I2S3_Init+0x54>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80075d6:	4b0d      	ldr	r3, [pc, #52]	; (800760c <MX_I2S3_Init+0x54>)
 80075d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075dc:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80075de:	4b0b      	ldr	r3, [pc, #44]	; (800760c <MX_I2S3_Init+0x54>)
 80075e0:	4a0c      	ldr	r2, [pc, #48]	; (8007614 <MX_I2S3_Init+0x5c>)
 80075e2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <MX_I2S3_Init+0x54>)
 80075e6:	2200      	movs	r2, #0
 80075e8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80075ea:	4b08      	ldr	r3, [pc, #32]	; (800760c <MX_I2S3_Init+0x54>)
 80075ec:	2200      	movs	r2, #0
 80075ee:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80075f0:	4b06      	ldr	r3, [pc, #24]	; (800760c <MX_I2S3_Init+0x54>)
 80075f2:	2200      	movs	r2, #0
 80075f4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80075f6:	4805      	ldr	r0, [pc, #20]	; (800760c <MX_I2S3_Init+0x54>)
 80075f8:	f7fb fbe0 	bl	8002dbc <HAL_I2S_Init>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d001      	beq.n	8007606 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8007602:	f000 f967 	bl	80078d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8007606:	bf00      	nop
 8007608:	bd80      	pop	{r7, pc}
 800760a:	bf00      	nop
 800760c:	200001f8 	.word	0x200001f8
 8007610:	40003c00 	.word	0x40003c00
 8007614:	00017700 	.word	0x00017700

08007618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800761c:	4b17      	ldr	r3, [pc, #92]	; (800767c <MX_SPI1_Init+0x64>)
 800761e:	4a18      	ldr	r2, [pc, #96]	; (8007680 <MX_SPI1_Init+0x68>)
 8007620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007622:	4b16      	ldr	r3, [pc, #88]	; (800767c <MX_SPI1_Init+0x64>)
 8007624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800762a:	4b14      	ldr	r3, [pc, #80]	; (800767c <MX_SPI1_Init+0x64>)
 800762c:	2200      	movs	r2, #0
 800762e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007630:	4b12      	ldr	r3, [pc, #72]	; (800767c <MX_SPI1_Init+0x64>)
 8007632:	2200      	movs	r2, #0
 8007634:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007636:	4b11      	ldr	r3, [pc, #68]	; (800767c <MX_SPI1_Init+0x64>)
 8007638:	2200      	movs	r2, #0
 800763a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800763c:	4b0f      	ldr	r3, [pc, #60]	; (800767c <MX_SPI1_Init+0x64>)
 800763e:	2200      	movs	r2, #0
 8007640:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007642:	4b0e      	ldr	r3, [pc, #56]	; (800767c <MX_SPI1_Init+0x64>)
 8007644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007648:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800764a:	4b0c      	ldr	r3, [pc, #48]	; (800767c <MX_SPI1_Init+0x64>)
 800764c:	2200      	movs	r2, #0
 800764e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007650:	4b0a      	ldr	r3, [pc, #40]	; (800767c <MX_SPI1_Init+0x64>)
 8007652:	2200      	movs	r2, #0
 8007654:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007656:	4b09      	ldr	r3, [pc, #36]	; (800767c <MX_SPI1_Init+0x64>)
 8007658:	2200      	movs	r2, #0
 800765a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800765c:	4b07      	ldr	r3, [pc, #28]	; (800767c <MX_SPI1_Init+0x64>)
 800765e:	2200      	movs	r2, #0
 8007660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <MX_SPI1_Init+0x64>)
 8007664:	220a      	movs	r2, #10
 8007666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007668:	4804      	ldr	r0, [pc, #16]	; (800767c <MX_SPI1_Init+0x64>)
 800766a:	f7fc fdb5 	bl	80041d8 <HAL_SPI_Init>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d001      	beq.n	8007678 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007674:	f000 f92e 	bl	80078d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007678:	bf00      	nop
 800767a:	bd80      	pop	{r7, pc}
 800767c:	20000160 	.word	0x20000160
 8007680:	40013000 	.word	0x40013000

08007684 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8007688:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 800768a:	4a12      	ldr	r2, [pc, #72]	; (80076d4 <MX_USART2_UART_Init+0x50>)
 800768c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800768e:	4b10      	ldr	r3, [pc, #64]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 8007690:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8007694:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007696:	4b0e      	ldr	r3, [pc, #56]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 8007698:	2200      	movs	r2, #0
 800769a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800769c:	4b0c      	ldr	r3, [pc, #48]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 800769e:	2200      	movs	r2, #0
 80076a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80076a2:	4b0b      	ldr	r3, [pc, #44]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 80076aa:	220c      	movs	r2, #12
 80076ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80076ae:	4b08      	ldr	r3, [pc, #32]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80076b4:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 80076b6:	2200      	movs	r2, #0
 80076b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80076ba:	4805      	ldr	r0, [pc, #20]	; (80076d0 <MX_USART2_UART_Init+0x4c>)
 80076bc:	f7fc fdf0 	bl	80042a0 <HAL_UART_Init>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d001      	beq.n	80076ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80076c6:	f000 f905 	bl	80078d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80076ca:	bf00      	nop
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	200001b8 	.word	0x200001b8
 80076d4:	40004400 	.word	0x40004400

080076d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	; 0x30
 80076dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80076de:	f107 031c 	add.w	r3, r7, #28
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
 80076e6:	605a      	str	r2, [r3, #4]
 80076e8:	609a      	str	r2, [r3, #8]
 80076ea:	60da      	str	r2, [r3, #12]
 80076ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	4b71      	ldr	r3, [pc, #452]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 80076f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f6:	4a70      	ldr	r2, [pc, #448]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 80076f8:	f043 0310 	orr.w	r3, r3, #16
 80076fc:	6313      	str	r3, [r2, #48]	; 0x30
 80076fe:	4b6e      	ldr	r3, [pc, #440]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	61bb      	str	r3, [r7, #24]
 8007708:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800770a:	2300      	movs	r3, #0
 800770c:	617b      	str	r3, [r7, #20]
 800770e:	4b6a      	ldr	r3, [pc, #424]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	4a69      	ldr	r2, [pc, #420]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007714:	f043 0304 	orr.w	r3, r3, #4
 8007718:	6313      	str	r3, [r2, #48]	; 0x30
 800771a:	4b67      	ldr	r3, [pc, #412]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 800771c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800771e:	f003 0304 	and.w	r3, r3, #4
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007726:	2300      	movs	r3, #0
 8007728:	613b      	str	r3, [r7, #16]
 800772a:	4b63      	ldr	r3, [pc, #396]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 800772c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772e:	4a62      	ldr	r2, [pc, #392]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007734:	6313      	str	r3, [r2, #48]	; 0x30
 8007736:	4b60      	ldr	r3, [pc, #384]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800773a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773e:	613b      	str	r3, [r7, #16]
 8007740:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007742:	2300      	movs	r3, #0
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	4b5c      	ldr	r3, [pc, #368]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	4a5b      	ldr	r2, [pc, #364]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	6313      	str	r3, [r2, #48]	; 0x30
 8007752:	4b59      	ldr	r3, [pc, #356]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800775e:	2300      	movs	r3, #0
 8007760:	60bb      	str	r3, [r7, #8]
 8007762:	4b55      	ldr	r3, [pc, #340]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	4a54      	ldr	r2, [pc, #336]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007768:	f043 0302 	orr.w	r3, r3, #2
 800776c:	6313      	str	r3, [r2, #48]	; 0x30
 800776e:	4b52      	ldr	r3, [pc, #328]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	60bb      	str	r3, [r7, #8]
 8007778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]
 800777e:	4b4e      	ldr	r3, [pc, #312]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007782:	4a4d      	ldr	r2, [pc, #308]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 8007784:	f043 0308 	orr.w	r3, r3, #8
 8007788:	6313      	str	r3, [r2, #48]	; 0x30
 800778a:	4b4b      	ldr	r3, [pc, #300]	; (80078b8 <MX_GPIO_Init+0x1e0>)
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	f003 0308 	and.w	r3, r3, #8
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8007796:	2200      	movs	r2, #0
 8007798:	2108      	movs	r1, #8
 800779a:	4848      	ldr	r0, [pc, #288]	; (80078bc <MX_GPIO_Init+0x1e4>)
 800779c:	f7f9 fd66 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80077a0:	2201      	movs	r2, #1
 80077a2:	2101      	movs	r1, #1
 80077a4:	4846      	ldr	r0, [pc, #280]	; (80078c0 <MX_GPIO_Init+0x1e8>)
 80077a6:	f7f9 fd61 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80077aa:	2200      	movs	r2, #0
 80077ac:	f24f 0110 	movw	r1, #61456	; 0xf010
 80077b0:	4844      	ldr	r0, [pc, #272]	; (80078c4 <MX_GPIO_Init+0x1ec>)
 80077b2:	f7f9 fd5b 	bl	800126c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80077b6:	2308      	movs	r3, #8
 80077b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077ba:	2301      	movs	r3, #1
 80077bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077be:	2300      	movs	r3, #0
 80077c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077c2:	2300      	movs	r3, #0
 80077c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80077c6:	f107 031c 	add.w	r3, r7, #28
 80077ca:	4619      	mov	r1, r3
 80077cc:	483b      	ldr	r0, [pc, #236]	; (80078bc <MX_GPIO_Init+0x1e4>)
 80077ce:	f7f9 fbb3 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80077d2:	2301      	movs	r3, #1
 80077d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80077d6:	2301      	movs	r3, #1
 80077d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077da:	2300      	movs	r3, #0
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077de:	2300      	movs	r3, #0
 80077e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80077e2:	f107 031c 	add.w	r3, r7, #28
 80077e6:	4619      	mov	r1, r3
 80077e8:	4835      	ldr	r0, [pc, #212]	; (80078c0 <MX_GPIO_Init+0x1e8>)
 80077ea:	f7f9 fba5 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80077ee:	2308      	movs	r3, #8
 80077f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077f2:	2302      	movs	r3, #2
 80077f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077f6:	2300      	movs	r3, #0
 80077f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80077fa:	2300      	movs	r3, #0
 80077fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80077fe:	2305      	movs	r3, #5
 8007800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8007802:	f107 031c 	add.w	r3, r7, #28
 8007806:	4619      	mov	r1, r3
 8007808:	482d      	ldr	r0, [pc, #180]	; (80078c0 <MX_GPIO_Init+0x1e8>)
 800780a:	f7f9 fb95 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800780e:	2301      	movs	r3, #1
 8007810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8007812:	4b2d      	ldr	r3, [pc, #180]	; (80078c8 <MX_GPIO_Init+0x1f0>)
 8007814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007816:	2300      	movs	r3, #0
 8007818:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800781a:	f107 031c 	add.w	r3, r7, #28
 800781e:	4619      	mov	r1, r3
 8007820:	482a      	ldr	r0, [pc, #168]	; (80078cc <MX_GPIO_Init+0x1f4>)
 8007822:	f7f9 fb89 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8007826:	2304      	movs	r3, #4
 8007828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800782a:	2300      	movs	r3, #0
 800782c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800782e:	2300      	movs	r3, #0
 8007830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8007832:	f107 031c 	add.w	r3, r7, #28
 8007836:	4619      	mov	r1, r3
 8007838:	4825      	ldr	r0, [pc, #148]	; (80078d0 <MX_GPIO_Init+0x1f8>)
 800783a:	f7f9 fb7d 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800783e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007842:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007844:	2302      	movs	r3, #2
 8007846:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007848:	2300      	movs	r3, #0
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800784c:	2300      	movs	r3, #0
 800784e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007850:	2305      	movs	r3, #5
 8007852:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8007854:	f107 031c 	add.w	r3, r7, #28
 8007858:	4619      	mov	r1, r3
 800785a:	481d      	ldr	r0, [pc, #116]	; (80078d0 <MX_GPIO_Init+0x1f8>)
 800785c:	f7f9 fb6c 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 8007860:	f24f 0310 	movw	r3, #61456	; 0xf010
 8007864:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007866:	2301      	movs	r3, #1
 8007868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800786a:	2300      	movs	r3, #0
 800786c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800786e:	2300      	movs	r3, #0
 8007870:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007872:	f107 031c 	add.w	r3, r7, #28
 8007876:	4619      	mov	r1, r3
 8007878:	4812      	ldr	r0, [pc, #72]	; (80078c4 <MX_GPIO_Init+0x1ec>)
 800787a:	f7f9 fb5d 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800787e:	2320      	movs	r3, #32
 8007880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007882:	2300      	movs	r3, #0
 8007884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007886:	2300      	movs	r3, #0
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800788a:	f107 031c 	add.w	r3, r7, #28
 800788e:	4619      	mov	r1, r3
 8007890:	480c      	ldr	r0, [pc, #48]	; (80078c4 <MX_GPIO_Init+0x1ec>)
 8007892:	f7f9 fb51 	bl	8000f38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8007896:	2302      	movs	r3, #2
 8007898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800789a:	4b0b      	ldr	r3, [pc, #44]	; (80078c8 <MX_GPIO_Init+0x1f0>)
 800789c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800789e:	2300      	movs	r3, #0
 80078a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80078a2:	f107 031c 	add.w	r3, r7, #28
 80078a6:	4619      	mov	r1, r3
 80078a8:	4804      	ldr	r0, [pc, #16]	; (80078bc <MX_GPIO_Init+0x1e4>)
 80078aa:	f7f9 fb45 	bl	8000f38 <HAL_GPIO_Init>

}
 80078ae:	bf00      	nop
 80078b0:	3730      	adds	r7, #48	; 0x30
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	40023800 	.word	0x40023800
 80078bc:	40021000 	.word	0x40021000
 80078c0:	40020800 	.word	0x40020800
 80078c4:	40020c00 	.word	0x40020c00
 80078c8:	10120000 	.word	0x10120000
 80078cc:	40020000 	.word	0x40020000
 80078d0:	40020400 	.word	0x40020400

080078d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80078d8:	bf00      	nop
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
	...

080078e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	607b      	str	r3, [r7, #4]
 80078ee:	4b10      	ldr	r3, [pc, #64]	; (8007930 <HAL_MspInit+0x4c>)
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	4a0f      	ldr	r2, [pc, #60]	; (8007930 <HAL_MspInit+0x4c>)
 80078f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078f8:	6453      	str	r3, [r2, #68]	; 0x44
 80078fa:	4b0d      	ldr	r3, [pc, #52]	; (8007930 <HAL_MspInit+0x4c>)
 80078fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007902:	607b      	str	r3, [r7, #4]
 8007904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007906:	2300      	movs	r3, #0
 8007908:	603b      	str	r3, [r7, #0]
 800790a:	4b09      	ldr	r3, [pc, #36]	; (8007930 <HAL_MspInit+0x4c>)
 800790c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790e:	4a08      	ldr	r2, [pc, #32]	; (8007930 <HAL_MspInit+0x4c>)
 8007910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007914:	6413      	str	r3, [r2, #64]	; 0x40
 8007916:	4b06      	ldr	r3, [pc, #24]	; (8007930 <HAL_MspInit+0x4c>)
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800791e:	603b      	str	r3, [r7, #0]
 8007920:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007922:	2007      	movs	r0, #7
 8007924:	f7f9 fac6 	bl	8000eb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007928:	bf00      	nop
 800792a:	3708      	adds	r7, #8
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}
 8007930:	40023800 	.word	0x40023800

08007934 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b08a      	sub	sp, #40	; 0x28
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800793c:	f107 0314 	add.w	r3, r7, #20
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	605a      	str	r2, [r3, #4]
 8007946:	609a      	str	r2, [r3, #8]
 8007948:	60da      	str	r2, [r3, #12]
 800794a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a17      	ldr	r2, [pc, #92]	; (80079b0 <HAL_ADC_MspInit+0x7c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d127      	bne.n	80079a6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007956:	2300      	movs	r3, #0
 8007958:	613b      	str	r3, [r7, #16]
 800795a:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <HAL_ADC_MspInit+0x80>)
 800795c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800795e:	4a15      	ldr	r2, [pc, #84]	; (80079b4 <HAL_ADC_MspInit+0x80>)
 8007960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007964:	6453      	str	r3, [r2, #68]	; 0x44
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <HAL_ADC_MspInit+0x80>)
 8007968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800796e:	613b      	str	r3, [r7, #16]
 8007970:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	60fb      	str	r3, [r7, #12]
 8007976:	4b0f      	ldr	r3, [pc, #60]	; (80079b4 <HAL_ADC_MspInit+0x80>)
 8007978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800797a:	4a0e      	ldr	r2, [pc, #56]	; (80079b4 <HAL_ADC_MspInit+0x80>)
 800797c:	f043 0301 	orr.w	r3, r3, #1
 8007980:	6313      	str	r3, [r2, #48]	; 0x30
 8007982:	4b0c      	ldr	r3, [pc, #48]	; (80079b4 <HAL_ADC_MspInit+0x80>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	f003 0301 	and.w	r3, r3, #1
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA1     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800798e:	2302      	movs	r3, #2
 8007990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007992:	2303      	movs	r3, #3
 8007994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007996:	2300      	movs	r3, #0
 8007998:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800799a:	f107 0314 	add.w	r3, r7, #20
 800799e:	4619      	mov	r1, r3
 80079a0:	4805      	ldr	r0, [pc, #20]	; (80079b8 <HAL_ADC_MspInit+0x84>)
 80079a2:	f7f9 fac9 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80079a6:	bf00      	nop
 80079a8:	3728      	adds	r7, #40	; 0x28
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	40012000 	.word	0x40012000
 80079b4:	40023800 	.word	0x40023800
 80079b8:	40020000 	.word	0x40020000

080079bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	; 0x28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079c4:	f107 0314 	add.w	r3, r7, #20
 80079c8:	2200      	movs	r2, #0
 80079ca:	601a      	str	r2, [r3, #0]
 80079cc:	605a      	str	r2, [r3, #4]
 80079ce:	609a      	str	r2, [r3, #8]
 80079d0:	60da      	str	r2, [r3, #12]
 80079d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a19      	ldr	r2, [pc, #100]	; (8007a40 <HAL_I2C_MspInit+0x84>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d12c      	bne.n	8007a38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80079de:	2300      	movs	r3, #0
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	4b18      	ldr	r3, [pc, #96]	; (8007a44 <HAL_I2C_MspInit+0x88>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	4a17      	ldr	r2, [pc, #92]	; (8007a44 <HAL_I2C_MspInit+0x88>)
 80079e8:	f043 0302 	orr.w	r3, r3, #2
 80079ec:	6313      	str	r3, [r2, #48]	; 0x30
 80079ee:	4b15      	ldr	r3, [pc, #84]	; (8007a44 <HAL_I2C_MspInit+0x88>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	f003 0302 	and.w	r3, r3, #2
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80079fa:	f44f 7310 	mov.w	r3, #576	; 0x240
 80079fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a00:	2312      	movs	r3, #18
 8007a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007a04:	2301      	movs	r3, #1
 8007a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a0c:	2304      	movs	r3, #4
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a10:	f107 0314 	add.w	r3, r7, #20
 8007a14:	4619      	mov	r1, r3
 8007a16:	480c      	ldr	r0, [pc, #48]	; (8007a48 <HAL_I2C_MspInit+0x8c>)
 8007a18:	f7f9 fa8e 	bl	8000f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	60fb      	str	r3, [r7, #12]
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <HAL_I2C_MspInit+0x88>)
 8007a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a24:	4a07      	ldr	r2, [pc, #28]	; (8007a44 <HAL_I2C_MspInit+0x88>)
 8007a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a2a:	6413      	str	r3, [r2, #64]	; 0x40
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <HAL_I2C_MspInit+0x88>)
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a34:	60fb      	str	r3, [r7, #12]
 8007a36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007a38:	bf00      	nop
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	40005400 	.word	0x40005400
 8007a44:	40023800 	.word	0x40023800
 8007a48:	40020400 	.word	0x40020400

08007a4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b08a      	sub	sp, #40	; 0x28
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a54:	f107 0314 	add.w	r3, r7, #20
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]
 8007a5c:	605a      	str	r2, [r3, #4]
 8007a5e:	609a      	str	r2, [r3, #8]
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a28      	ldr	r2, [pc, #160]	; (8007b0c <HAL_I2S_MspInit+0xc0>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d14a      	bne.n	8007b04 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007a6e:	2300      	movs	r3, #0
 8007a70:	613b      	str	r3, [r7, #16]
 8007a72:	4b27      	ldr	r3, [pc, #156]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	4a26      	ldr	r2, [pc, #152]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007a78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8007a7e:	4b24      	ldr	r3, [pc, #144]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a86:	613b      	str	r3, [r7, #16]
 8007a88:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60fb      	str	r3, [r7, #12]
 8007a8e:	4b20      	ldr	r3, [pc, #128]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a92:	4a1f      	ldr	r2, [pc, #124]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007a94:	f043 0301 	orr.w	r3, r3, #1
 8007a98:	6313      	str	r3, [r2, #48]	; 0x30
 8007a9a:	4b1d      	ldr	r3, [pc, #116]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9e:	f003 0301 	and.w	r3, r3, #1
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	60bb      	str	r3, [r7, #8]
 8007aaa:	4b19      	ldr	r3, [pc, #100]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aae:	4a18      	ldr	r2, [pc, #96]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007ab0:	f043 0304 	orr.w	r3, r3, #4
 8007ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ab6:	4b16      	ldr	r3, [pc, #88]	; (8007b10 <HAL_I2S_MspInit+0xc4>)
 8007ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aba:	f003 0304 	and.w	r3, r3, #4
 8007abe:	60bb      	str	r3, [r7, #8]
 8007ac0:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8007ac2:	2310      	movs	r3, #16
 8007ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ac6:	2302      	movs	r3, #2
 8007ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007ad2:	2306      	movs	r3, #6
 8007ad4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8007ad6:	f107 0314 	add.w	r3, r7, #20
 8007ada:	4619      	mov	r1, r3
 8007adc:	480d      	ldr	r0, [pc, #52]	; (8007b14 <HAL_I2S_MspInit+0xc8>)
 8007ade:	f7f9 fa2b 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8007ae2:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8007ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ae8:	2302      	movs	r3, #2
 8007aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007af0:	2300      	movs	r3, #0
 8007af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007af4:	2306      	movs	r3, #6
 8007af6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007af8:	f107 0314 	add.w	r3, r7, #20
 8007afc:	4619      	mov	r1, r3
 8007afe:	4806      	ldr	r0, [pc, #24]	; (8007b18 <HAL_I2S_MspInit+0xcc>)
 8007b00:	f7f9 fa1a 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8007b04:	bf00      	nop
 8007b06:	3728      	adds	r7, #40	; 0x28
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}
 8007b0c:	40003c00 	.word	0x40003c00
 8007b10:	40023800 	.word	0x40023800
 8007b14:	40020000 	.word	0x40020000
 8007b18:	40020800 	.word	0x40020800

08007b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08a      	sub	sp, #40	; 0x28
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b24:	f107 0314 	add.w	r3, r7, #20
 8007b28:	2200      	movs	r2, #0
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	605a      	str	r2, [r3, #4]
 8007b2e:	609a      	str	r2, [r3, #8]
 8007b30:	60da      	str	r2, [r3, #12]
 8007b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a19      	ldr	r2, [pc, #100]	; (8007ba0 <HAL_SPI_MspInit+0x84>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d12b      	bne.n	8007b96 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007b3e:	2300      	movs	r3, #0
 8007b40:	613b      	str	r3, [r7, #16]
 8007b42:	4b18      	ldr	r3, [pc, #96]	; (8007ba4 <HAL_SPI_MspInit+0x88>)
 8007b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b46:	4a17      	ldr	r2, [pc, #92]	; (8007ba4 <HAL_SPI_MspInit+0x88>)
 8007b48:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8007b4e:	4b15      	ldr	r3, [pc, #84]	; (8007ba4 <HAL_SPI_MspInit+0x88>)
 8007b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b52:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007b56:	613b      	str	r3, [r7, #16]
 8007b58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60fb      	str	r3, [r7, #12]
 8007b5e:	4b11      	ldr	r3, [pc, #68]	; (8007ba4 <HAL_SPI_MspInit+0x88>)
 8007b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b62:	4a10      	ldr	r2, [pc, #64]	; (8007ba4 <HAL_SPI_MspInit+0x88>)
 8007b64:	f043 0301 	orr.w	r3, r3, #1
 8007b68:	6313      	str	r3, [r2, #48]	; 0x30
 8007b6a:	4b0e      	ldr	r3, [pc, #56]	; (8007ba4 <HAL_SPI_MspInit+0x88>)
 8007b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6e:	f003 0301 	and.w	r3, r3, #1
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8007b76:	23e0      	movs	r3, #224	; 0xe0
 8007b78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b7a:	2302      	movs	r3, #2
 8007b7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b82:	2300      	movs	r3, #0
 8007b84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007b86:	2305      	movs	r3, #5
 8007b88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b8a:	f107 0314 	add.w	r3, r7, #20
 8007b8e:	4619      	mov	r1, r3
 8007b90:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <HAL_SPI_MspInit+0x8c>)
 8007b92:	f7f9 f9d1 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8007b96:	bf00      	nop
 8007b98:	3728      	adds	r7, #40	; 0x28
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40013000 	.word	0x40013000
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	40020000 	.word	0x40020000

08007bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b08a      	sub	sp, #40	; 0x28
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bb4:	f107 0314 	add.w	r3, r7, #20
 8007bb8:	2200      	movs	r2, #0
 8007bba:	601a      	str	r2, [r3, #0]
 8007bbc:	605a      	str	r2, [r3, #4]
 8007bbe:	609a      	str	r2, [r3, #8]
 8007bc0:	60da      	str	r2, [r3, #12]
 8007bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a19      	ldr	r2, [pc, #100]	; (8007c30 <HAL_UART_MspInit+0x84>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d12b      	bne.n	8007c26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007bce:	2300      	movs	r3, #0
 8007bd0:	613b      	str	r3, [r7, #16]
 8007bd2:	4b18      	ldr	r3, [pc, #96]	; (8007c34 <HAL_UART_MspInit+0x88>)
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd6:	4a17      	ldr	r2, [pc, #92]	; (8007c34 <HAL_UART_MspInit+0x88>)
 8007bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8007bde:	4b15      	ldr	r3, [pc, #84]	; (8007c34 <HAL_UART_MspInit+0x88>)
 8007be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007be6:	613b      	str	r3, [r7, #16]
 8007be8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bea:	2300      	movs	r3, #0
 8007bec:	60fb      	str	r3, [r7, #12]
 8007bee:	4b11      	ldr	r3, [pc, #68]	; (8007c34 <HAL_UART_MspInit+0x88>)
 8007bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bf2:	4a10      	ldr	r2, [pc, #64]	; (8007c34 <HAL_UART_MspInit+0x88>)
 8007bf4:	f043 0301 	orr.w	r3, r3, #1
 8007bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8007bfa:	4b0e      	ldr	r3, [pc, #56]	; (8007c34 <HAL_UART_MspInit+0x88>)
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8007c06:	230c      	movs	r3, #12
 8007c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c0a:	2302      	movs	r3, #2
 8007c0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c12:	2303      	movs	r3, #3
 8007c14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007c16:	2307      	movs	r3, #7
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c1a:	f107 0314 	add.w	r3, r7, #20
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4805      	ldr	r0, [pc, #20]	; (8007c38 <HAL_UART_MspInit+0x8c>)
 8007c22:	f7f9 f989 	bl	8000f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007c26:	bf00      	nop
 8007c28:	3728      	adds	r7, #40	; 0x28
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}
 8007c2e:	bf00      	nop
 8007c30:	40004400 	.word	0x40004400
 8007c34:	40023800 	.word	0x40023800
 8007c38:	40020000 	.word	0x40020000

08007c3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c40:	bf00      	nop
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c4a:	b480      	push	{r7}
 8007c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c4e:	e7fe      	b.n	8007c4e <HardFault_Handler+0x4>

08007c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c54:	e7fe      	b.n	8007c54 <MemManage_Handler+0x4>

08007c56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c56:	b480      	push	{r7}
 8007c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c5a:	e7fe      	b.n	8007c5a <BusFault_Handler+0x4>

08007c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c60:	e7fe      	b.n	8007c60 <UsageFault_Handler+0x4>

08007c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c62:	b480      	push	{r7}
 8007c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c66:	bf00      	nop
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c74:	bf00      	nop
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr

08007c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c7e:	b480      	push	{r7}
 8007c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c82:	bf00      	nop
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c90:	f7f8 fcc8 	bl	8000624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c94:	bf00      	nop
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8007c9c:	4802      	ldr	r0, [pc, #8]	; (8007ca8 <OTG_FS_IRQHandler+0x10>)
 8007c9e:	f7f9 fd83 	bl	80017a8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8007ca2:	bf00      	nop
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	2000060c 	.word	0x2000060c

08007cac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007cb4:	4b11      	ldr	r3, [pc, #68]	; (8007cfc <_sbrk+0x50>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <_sbrk+0x16>
		heap_end = &end;
 8007cbc:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <_sbrk+0x50>)
 8007cbe:	4a10      	ldr	r2, [pc, #64]	; (8007d00 <_sbrk+0x54>)
 8007cc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007cc2:	4b0e      	ldr	r3, [pc, #56]	; (8007cfc <_sbrk+0x50>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <_sbrk+0x50>)
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	4413      	add	r3, r2
 8007cd0:	466a      	mov	r2, sp
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d907      	bls.n	8007ce6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007cd6:	f000 fb7d 	bl	80083d4 <__errno>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	230c      	movs	r3, #12
 8007cde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce4:	e006      	b.n	8007cf4 <_sbrk+0x48>
	}

	heap_end += incr;
 8007ce6:	4b05      	ldr	r3, [pc, #20]	; (8007cfc <_sbrk+0x50>)
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	4413      	add	r3, r2
 8007cee:	4a03      	ldr	r2, [pc, #12]	; (8007cfc <_sbrk+0x50>)
 8007cf0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	200000b0 	.word	0x200000b0
 8007d00:	200008d8 	.word	0x200008d8

08007d04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d08:	4b16      	ldr	r3, [pc, #88]	; (8007d64 <SystemInit+0x60>)
 8007d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d0e:	4a15      	ldr	r2, [pc, #84]	; (8007d64 <SystemInit+0x60>)
 8007d10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007d14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007d18:	4b13      	ldr	r3, [pc, #76]	; (8007d68 <SystemInit+0x64>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a12      	ldr	r2, [pc, #72]	; (8007d68 <SystemInit+0x64>)
 8007d1e:	f043 0301 	orr.w	r3, r3, #1
 8007d22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007d24:	4b10      	ldr	r3, [pc, #64]	; (8007d68 <SystemInit+0x64>)
 8007d26:	2200      	movs	r2, #0
 8007d28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007d2a:	4b0f      	ldr	r3, [pc, #60]	; (8007d68 <SystemInit+0x64>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	4a0e      	ldr	r2, [pc, #56]	; (8007d68 <SystemInit+0x64>)
 8007d30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007d3a:	4b0b      	ldr	r3, [pc, #44]	; (8007d68 <SystemInit+0x64>)
 8007d3c:	4a0b      	ldr	r2, [pc, #44]	; (8007d6c <SystemInit+0x68>)
 8007d3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d40:	4b09      	ldr	r3, [pc, #36]	; (8007d68 <SystemInit+0x64>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a08      	ldr	r2, [pc, #32]	; (8007d68 <SystemInit+0x64>)
 8007d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8007d4c:	4b06      	ldr	r3, [pc, #24]	; (8007d68 <SystemInit+0x64>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d52:	4b04      	ldr	r3, [pc, #16]	; (8007d64 <SystemInit+0x60>)
 8007d54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007d58:	609a      	str	r2, [r3, #8]
#endif
}
 8007d5a:	bf00      	nop
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	e000ed00 	.word	0xe000ed00
 8007d68:	40023800 	.word	0x40023800
 8007d6c:	24003010 	.word	0x24003010

08007d70 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d74:	2201      	movs	r2, #1
 8007d76:	490e      	ldr	r1, [pc, #56]	; (8007db0 <MX_USB_HOST_Init+0x40>)
 8007d78:	480e      	ldr	r0, [pc, #56]	; (8007db4 <MX_USB_HOST_Init+0x44>)
 8007d7a:	f7fe f8a3 	bl	8005ec4 <USBH_Init>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d001      	beq.n	8007d88 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d84:	f7ff fda6 	bl	80078d4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d88:	490b      	ldr	r1, [pc, #44]	; (8007db8 <MX_USB_HOST_Init+0x48>)
 8007d8a:	480a      	ldr	r0, [pc, #40]	; (8007db4 <MX_USB_HOST_Init+0x44>)
 8007d8c:	f7fe f90d 	bl	8005faa <USBH_RegisterClass>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d96:	f7ff fd9d 	bl	80078d4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d9a:	4806      	ldr	r0, [pc, #24]	; (8007db4 <MX_USB_HOST_Init+0x44>)
 8007d9c:	f7fe f992 	bl	80060c4 <USBH_Start>
 8007da0:	4603      	mov	r3, r0
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d001      	beq.n	8007daa <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007da6:	f7ff fd95 	bl	80078d4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007daa:	bf00      	nop
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop
 8007db0:	08007dd1 	.word	0x08007dd1
 8007db4:	20000240 	.word	0x20000240
 8007db8:	20000008 	.word	0x20000008

08007dbc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007dc0:	4802      	ldr	r0, [pc, #8]	; (8007dcc <MX_USB_HOST_Process+0x10>)
 8007dc2:	f7fe f98f 	bl	80060e4 <USBH_Process>
}
 8007dc6:	bf00      	nop
 8007dc8:	bd80      	pop	{r7, pc}
 8007dca:	bf00      	nop
 8007dcc:	20000240 	.word	0x20000240

08007dd0 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	2b04      	cmp	r3, #4
 8007de2:	d819      	bhi.n	8007e18 <USBH_UserProcess+0x48>
 8007de4:	a201      	add	r2, pc, #4	; (adr r2, 8007dec <USBH_UserProcess+0x1c>)
 8007de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dea:	bf00      	nop
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	08007e09 	.word	0x08007e09
 8007df4:	08007e19 	.word	0x08007e19
 8007df8:	08007e11 	.word	0x08007e11
 8007dfc:	08007e01 	.word	0x08007e01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007e00:	4b09      	ldr	r3, [pc, #36]	; (8007e28 <USBH_UserProcess+0x58>)
 8007e02:	2203      	movs	r2, #3
 8007e04:	701a      	strb	r2, [r3, #0]
  break;
 8007e06:	e008      	b.n	8007e1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007e08:	4b07      	ldr	r3, [pc, #28]	; (8007e28 <USBH_UserProcess+0x58>)
 8007e0a:	2202      	movs	r2, #2
 8007e0c:	701a      	strb	r2, [r3, #0]
  break;
 8007e0e:	e004      	b.n	8007e1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007e10:	4b05      	ldr	r3, [pc, #20]	; (8007e28 <USBH_UserProcess+0x58>)
 8007e12:	2201      	movs	r2, #1
 8007e14:	701a      	strb	r2, [r3, #0]
  break;
 8007e16:	e000      	b.n	8007e1a <USBH_UserProcess+0x4a>

  default:
  break;
 8007e18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007e1a:	bf00      	nop
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	200000b4 	.word	0x200000b4

08007e2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08a      	sub	sp, #40	; 0x28
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	2200      	movs	r2, #0
 8007e3a:	601a      	str	r2, [r3, #0]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	609a      	str	r2, [r3, #8]
 8007e40:	60da      	str	r2, [r3, #12]
 8007e42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e4c:	d147      	bne.n	8007ede <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e4e:	2300      	movs	r3, #0
 8007e50:	613b      	str	r3, [r7, #16]
 8007e52:	4b25      	ldr	r3, [pc, #148]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e56:	4a24      	ldr	r2, [pc, #144]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007e58:	f043 0301 	orr.w	r3, r3, #1
 8007e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e5e:	4b22      	ldr	r3, [pc, #136]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	f003 0301 	and.w	r3, r3, #1
 8007e66:	613b      	str	r3, [r7, #16]
 8007e68:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e70:	2300      	movs	r3, #0
 8007e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e74:	2300      	movs	r3, #0
 8007e76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e78:	f107 0314 	add.w	r3, r7, #20
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	481b      	ldr	r0, [pc, #108]	; (8007eec <HAL_HCD_MspInit+0xc0>)
 8007e80:	f7f9 f85a 	bl	8000f38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e8a:	2302      	movs	r3, #2
 8007e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e92:	2300      	movs	r3, #0
 8007e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e96:	230a      	movs	r3, #10
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e9a:	f107 0314 	add.w	r3, r7, #20
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	4812      	ldr	r0, [pc, #72]	; (8007eec <HAL_HCD_MspInit+0xc0>)
 8007ea2:	f7f9 f849 	bl	8000f38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ea6:	4b10      	ldr	r3, [pc, #64]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eaa:	4a0f      	ldr	r2, [pc, #60]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb0:	6353      	str	r3, [r2, #52]	; 0x34
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	4b0c      	ldr	r3, [pc, #48]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	4a0b      	ldr	r2, [pc, #44]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8007ec2:	4b09      	ldr	r3, [pc, #36]	; (8007ee8 <HAL_HCD_MspInit+0xbc>)
 8007ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007eca:	60fb      	str	r3, [r7, #12]
 8007ecc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ece:	2200      	movs	r2, #0
 8007ed0:	2100      	movs	r1, #0
 8007ed2:	2043      	movs	r0, #67	; 0x43
 8007ed4:	f7f8 fff9 	bl	8000eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007ed8:	2043      	movs	r0, #67	; 0x43
 8007eda:	f7f9 f812 	bl	8000f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3728      	adds	r7, #40	; 0x28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	40020000 	.word	0x40020000

08007ef0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007efe:	4618      	mov	r0, r3
 8007f00:	f7fe fba1 	bl	8006646 <USBH_LL_IncTimer>
}
 8007f04:	bf00      	nop
 8007f06:	3708      	adds	r7, #8
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe fbe6 	bl	80066ec <USBH_LL_Connect>
}
 8007f20:	bf00      	nop
 8007f22:	3708      	adds	r7, #8
 8007f24:	46bd      	mov	sp, r7
 8007f26:	bd80      	pop	{r7, pc}

08007f28 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fbfe 	bl	8006738 <USBH_LL_Disconnect>
}
 8007f3c:	bf00      	nop
 8007f3e:	3708      	adds	r7, #8
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
 8007f50:	4613      	mov	r3, r2
 8007f52:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b082      	sub	sp, #8
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fb93 	bl	800669a <USBH_LL_PortEnabled>
} 
 8007f74:	bf00      	nop
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe fb93 	bl	80066b6 <USBH_LL_PortDisabled>
} 
 8007f90:	bf00      	nop
 8007f92:	3708      	adds	r7, #8
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d12a      	bne.n	8008000 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007faa:	4a18      	ldr	r2, [pc, #96]	; (800800c <USBH_LL_Init+0x74>)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a15      	ldr	r2, [pc, #84]	; (800800c <USBH_LL_Init+0x74>)
 8007fb6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007fba:	4b14      	ldr	r3, [pc, #80]	; (800800c <USBH_LL_Init+0x74>)
 8007fbc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007fc0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007fc2:	4b12      	ldr	r3, [pc, #72]	; (800800c <USBH_LL_Init+0x74>)
 8007fc4:	2208      	movs	r2, #8
 8007fc6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fc8:	4b10      	ldr	r3, [pc, #64]	; (800800c <USBH_LL_Init+0x74>)
 8007fca:	2201      	movs	r2, #1
 8007fcc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <USBH_LL_Init+0x74>)
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fd4:	4b0d      	ldr	r3, [pc, #52]	; (800800c <USBH_LL_Init+0x74>)
 8007fd6:	2202      	movs	r2, #2
 8007fd8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fda:	4b0c      	ldr	r3, [pc, #48]	; (800800c <USBH_LL_Init+0x74>)
 8007fdc:	2200      	movs	r2, #0
 8007fde:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007fe0:	480a      	ldr	r0, [pc, #40]	; (800800c <USBH_LL_Init+0x74>)
 8007fe2:	f7f9 f95c 	bl	800129e <HAL_HCD_Init>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d001      	beq.n	8007ff0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007fec:	f7ff fc72 	bl	80078d4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007ff0:	4806      	ldr	r0, [pc, #24]	; (800800c <USBH_LL_Init+0x74>)
 8007ff2:	f7f9 fd57 	bl	8001aa4 <HAL_HCD_GetCurrentFrame>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fe fb14 	bl	8006628 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	2000060c 	.word	0x2000060c

08008010 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008026:	4618      	mov	r0, r3
 8008028:	f7f9 fcc4 	bl	80019b4 <HAL_HCD_Start>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f95c 	bl	80082f0 <USBH_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800805c:	4618      	mov	r0, r3
 800805e:	f7f9 fccc 	bl	80019fa <HAL_HCD_Stop>
 8008062:	4603      	mov	r3, r0
 8008064:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008066:	7bfb      	ldrb	r3, [r7, #15]
 8008068:	4618      	mov	r0, r3
 800806a:	f000 f941 	bl	80082f0 <USBH_Get_USB_Status>
 800806e:	4603      	mov	r3, r0
 8008070:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8008072:	7bbb      	ldrb	r3, [r7, #14]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3710      	adds	r7, #16
 8008078:	46bd      	mov	sp, r7
 800807a:	bd80      	pop	{r7, pc}

0800807c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008084:	2301      	movs	r3, #1
 8008086:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800808e:	4618      	mov	r0, r3
 8008090:	f7f9 fd16 	bl	8001ac0 <HAL_HCD_GetCurrentSpeed>
 8008094:	4603      	mov	r3, r0
 8008096:	2b01      	cmp	r3, #1
 8008098:	d007      	beq.n	80080aa <USBH_LL_GetSpeed+0x2e>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d302      	bcc.n	80080a4 <USBH_LL_GetSpeed+0x28>
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d006      	beq.n	80080b0 <USBH_LL_GetSpeed+0x34>
 80080a2:	e008      	b.n	80080b6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80080a4:	2300      	movs	r3, #0
 80080a6:	73fb      	strb	r3, [r7, #15]
    break;
 80080a8:	e008      	b.n	80080bc <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 80080aa:	2301      	movs	r3, #1
 80080ac:	73fb      	strb	r3, [r7, #15]
    break;
 80080ae:	e005      	b.n	80080bc <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 80080b0:	2302      	movs	r3, #2
 80080b2:	73fb      	strb	r3, [r7, #15]
    break;
 80080b4:	e002      	b.n	80080bc <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 80080b6:	2301      	movs	r3, #1
 80080b8:	73fb      	strb	r3, [r7, #15]
    break;
 80080ba:	bf00      	nop
  }
  return  speed;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080d2:	2300      	movs	r3, #0
 80080d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80080dc:	4618      	mov	r0, r3
 80080de:	f7f9 fca9 	bl	8001a34 <HAL_HCD_ResetPort>
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 80080e6:	7bfb      	ldrb	r3, [r7, #15]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f000 f901 	bl	80082f0 <USBH_Get_USB_Status>
 80080ee:	4603      	mov	r3, r0
 80080f0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80080f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800810e:	78fa      	ldrb	r2, [r7, #3]
 8008110:	4611      	mov	r1, r2
 8008112:	4618      	mov	r0, r3
 8008114:	f7f9 fcb1 	bl	8001a7a <HAL_HCD_HC_GetXferCount>
 8008118:	4603      	mov	r3, r0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3708      	adds	r7, #8
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008122:	b590      	push	{r4, r7, lr}
 8008124:	b089      	sub	sp, #36	; 0x24
 8008126:	af04      	add	r7, sp, #16
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	4608      	mov	r0, r1
 800812c:	4611      	mov	r1, r2
 800812e:	461a      	mov	r2, r3
 8008130:	4603      	mov	r3, r0
 8008132:	70fb      	strb	r3, [r7, #3]
 8008134:	460b      	mov	r3, r1
 8008136:	70bb      	strb	r3, [r7, #2]
 8008138:	4613      	mov	r3, r2
 800813a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800814a:	787c      	ldrb	r4, [r7, #1]
 800814c:	78ba      	ldrb	r2, [r7, #2]
 800814e:	78f9      	ldrb	r1, [r7, #3]
 8008150:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008152:	9302      	str	r3, [sp, #8]
 8008154:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008158:	9301      	str	r3, [sp, #4]
 800815a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800815e:	9300      	str	r3, [sp, #0]
 8008160:	4623      	mov	r3, r4
 8008162:	f7f9 f8fe 	bl	8001362 <HAL_HCD_HC_Init>
 8008166:	4603      	mov	r3, r0
 8008168:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800816a:	7bfb      	ldrb	r3, [r7, #15]
 800816c:	4618      	mov	r0, r3
 800816e:	f000 f8bf 	bl	80082f0 <USBH_Get_USB_Status>
 8008172:	4603      	mov	r3, r0
 8008174:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008176:	7bbb      	ldrb	r3, [r7, #14]
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	bd90      	pop	{r4, r7, pc}

08008180 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b084      	sub	sp, #16
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	460b      	mov	r3, r1
 800818a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800818c:	2300      	movs	r3, #0
 800818e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008190:	2300      	movs	r3, #0
 8008192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800819a:	78fa      	ldrb	r2, [r7, #3]
 800819c:	4611      	mov	r1, r2
 800819e:	4618      	mov	r0, r3
 80081a0:	f7f9 f977 	bl	8001492 <HAL_HCD_HC_Halt>
 80081a4:	4603      	mov	r3, r0
 80081a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80081a8:	7bfb      	ldrb	r3, [r7, #15]
 80081aa:	4618      	mov	r0, r3
 80081ac:	f000 f8a0 	bl	80082f0 <USBH_Get_USB_Status>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80081be:	b590      	push	{r4, r7, lr}
 80081c0:	b089      	sub	sp, #36	; 0x24
 80081c2:	af04      	add	r7, sp, #16
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	4608      	mov	r0, r1
 80081c8:	4611      	mov	r1, r2
 80081ca:	461a      	mov	r2, r3
 80081cc:	4603      	mov	r3, r0
 80081ce:	70fb      	strb	r3, [r7, #3]
 80081d0:	460b      	mov	r3, r1
 80081d2:	70bb      	strb	r3, [r7, #2]
 80081d4:	4613      	mov	r3, r2
 80081d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081d8:	2300      	movs	r3, #0
 80081da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081dc:	2300      	movs	r3, #0
 80081de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 80081e6:	787c      	ldrb	r4, [r7, #1]
 80081e8:	78ba      	ldrb	r2, [r7, #2]
 80081ea:	78f9      	ldrb	r1, [r7, #3]
 80081ec:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081f0:	9303      	str	r3, [sp, #12]
 80081f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081f4:	9302      	str	r3, [sp, #8]
 80081f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f8:	9301      	str	r3, [sp, #4]
 80081fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	4623      	mov	r3, r4
 8008202:	f7f9 f969 	bl	80014d8 <HAL_HCD_HC_SubmitRequest>
 8008206:	4603      	mov	r3, r0
 8008208:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	4618      	mov	r0, r3
 800820e:	f000 f86f 	bl	80082f0 <USBH_Get_USB_Status>
 8008212:	4603      	mov	r3, r0
 8008214:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008216:	7bbb      	ldrb	r3, [r7, #14]
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	bd90      	pop	{r4, r7, pc}

08008220 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b082      	sub	sp, #8
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
 8008228:	460b      	mov	r3, r1
 800822a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008232:	78fa      	ldrb	r2, [r7, #3]
 8008234:	4611      	mov	r1, r2
 8008236:	4618      	mov	r0, r3
 8008238:	f7f9 fc0a 	bl	8001a50 <HAL_HCD_HC_GetURBState>
 800823c:	4603      	mov	r3, r0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008246:	b580      	push	{r7, lr}
 8008248:	b082      	sub	sp, #8
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	460b      	mov	r3, r1
 8008250:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8008258:	2b01      	cmp	r3, #1
 800825a:	d103      	bne.n	8008264 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800825c:	78fb      	ldrb	r3, [r7, #3]
 800825e:	4618      	mov	r0, r3
 8008260:	f000 f872 	bl	8008348 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008264:	20c8      	movs	r0, #200	; 0xc8
 8008266:	f7f8 f9fd 	bl	8000664 <HAL_Delay>
  return USBH_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
 8008280:	4613      	mov	r3, r2
 8008282:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800828a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	68f9      	ldr	r1, [r7, #12]
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	00db      	lsls	r3, r3, #3
 8008298:	440b      	add	r3, r1
 800829a:	333b      	adds	r3, #59	; 0x3b
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00a      	beq.n	80082b8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80082a2:	78fa      	ldrb	r2, [r7, #3]
 80082a4:	68f9      	ldr	r1, [r7, #12]
 80082a6:	4613      	mov	r3, r2
 80082a8:	009b      	lsls	r3, r3, #2
 80082aa:	4413      	add	r3, r2
 80082ac:	00db      	lsls	r3, r3, #3
 80082ae:	440b      	add	r3, r1
 80082b0:	3350      	adds	r3, #80	; 0x50
 80082b2:	78ba      	ldrb	r2, [r7, #2]
 80082b4:	701a      	strb	r2, [r3, #0]
 80082b6:	e009      	b.n	80082cc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80082b8:	78fa      	ldrb	r2, [r7, #3]
 80082ba:	68f9      	ldr	r1, [r7, #12]
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	00db      	lsls	r3, r3, #3
 80082c4:	440b      	add	r3, r1
 80082c6:	3351      	adds	r3, #81	; 0x51
 80082c8:	78ba      	ldrb	r2, [r7, #2]
 80082ca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082cc:	2300      	movs	r3, #0
}
 80082ce:	4618      	mov	r0, r3
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr

080082da <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b082      	sub	sp, #8
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f7f8 f9be 	bl	8000664 <HAL_Delay>
}
 80082e8:	bf00      	nop
 80082ea:	3708      	adds	r7, #8
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082fe:	79fb      	ldrb	r3, [r7, #7]
 8008300:	2b03      	cmp	r3, #3
 8008302:	d817      	bhi.n	8008334 <USBH_Get_USB_Status+0x44>
 8008304:	a201      	add	r2, pc, #4	; (adr r2, 800830c <USBH_Get_USB_Status+0x1c>)
 8008306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800830a:	bf00      	nop
 800830c:	0800831d 	.word	0x0800831d
 8008310:	08008323 	.word	0x08008323
 8008314:	08008329 	.word	0x08008329
 8008318:	0800832f 	.word	0x0800832f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]
    break;
 8008320:	e00b      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	73fb      	strb	r3, [r7, #15]
    break;
 8008326:	e008      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008328:	2301      	movs	r3, #1
 800832a:	73fb      	strb	r3, [r7, #15]
    break;
 800832c:	e005      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800832e:	2302      	movs	r3, #2
 8008330:	73fb      	strb	r3, [r7, #15]
    break;
 8008332:	e002      	b.n	800833a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	73fb      	strb	r3, [r7, #15]
    break;
 8008338:	bf00      	nop
  }
  return usb_status;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
}
 800833c:	4618      	mov	r0, r3
 800833e:	3714      	adds	r7, #20
 8008340:	46bd      	mov	sp, r7
 8008342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008346:	4770      	bx	lr

08008348 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8008352:	79fb      	ldrb	r3, [r7, #7]
 8008354:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008356:	79fb      	ldrb	r3, [r7, #7]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d102      	bne.n	8008362 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800835c:	2301      	movs	r3, #1
 800835e:	73fb      	strb	r3, [r7, #15]
 8008360:	e001      	b.n	8008366 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8008362:	2300      	movs	r3, #0
 8008364:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008366:	7bfb      	ldrb	r3, [r7, #15]
 8008368:	461a      	mov	r2, r3
 800836a:	2101      	movs	r1, #1
 800836c:	4803      	ldr	r0, [pc, #12]	; (800837c <MX_DriverVbusFS+0x34>)
 800836e:	f7f8 ff7d 	bl	800126c <HAL_GPIO_WritePin>
}
 8008372:	bf00      	nop
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	40020800 	.word	0x40020800

08008380 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80083b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008384:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008386:	e003      	b.n	8008390 <LoopCopyDataInit>

08008388 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008388:	4b0c      	ldr	r3, [pc, #48]	; (80083bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800838a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800838c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800838e:	3104      	adds	r1, #4

08008390 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008390:	480b      	ldr	r0, [pc, #44]	; (80083c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008392:	4b0c      	ldr	r3, [pc, #48]	; (80083c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008394:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008396:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008398:	d3f6      	bcc.n	8008388 <CopyDataInit>
  ldr  r2, =_sbss
 800839a:	4a0b      	ldr	r2, [pc, #44]	; (80083c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800839c:	e002      	b.n	80083a4 <LoopFillZerobss>

0800839e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800839e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80083a0:	f842 3b04 	str.w	r3, [r2], #4

080083a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80083a4:	4b09      	ldr	r3, [pc, #36]	; (80083cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80083a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80083a8:	d3f9      	bcc.n	800839e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80083aa:	f7ff fcab 	bl	8007d04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083ae:	f000 f817 	bl	80083e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80083b2:	f7fe ffc5 	bl	8007340 <main>
  bx  lr    
 80083b6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80083b8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80083bc:	08008ce0 	.word	0x08008ce0
  ldr  r0, =_sdata
 80083c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80083c4:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 80083c8:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 80083cc:	200008d4 	.word	0x200008d4

080083d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80083d0:	e7fe      	b.n	80083d0 <ADC_IRQHandler>
	...

080083d4 <__errno>:
 80083d4:	4b01      	ldr	r3, [pc, #4]	; (80083dc <__errno+0x8>)
 80083d6:	6818      	ldr	r0, [r3, #0]
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	2000002c 	.word	0x2000002c

080083e0 <__libc_init_array>:
 80083e0:	b570      	push	{r4, r5, r6, lr}
 80083e2:	4e0d      	ldr	r6, [pc, #52]	; (8008418 <__libc_init_array+0x38>)
 80083e4:	4c0d      	ldr	r4, [pc, #52]	; (800841c <__libc_init_array+0x3c>)
 80083e6:	1ba4      	subs	r4, r4, r6
 80083e8:	10a4      	asrs	r4, r4, #2
 80083ea:	2500      	movs	r5, #0
 80083ec:	42a5      	cmp	r5, r4
 80083ee:	d109      	bne.n	8008404 <__libc_init_array+0x24>
 80083f0:	4e0b      	ldr	r6, [pc, #44]	; (8008420 <__libc_init_array+0x40>)
 80083f2:	4c0c      	ldr	r4, [pc, #48]	; (8008424 <__libc_init_array+0x44>)
 80083f4:	f000 fc36 	bl	8008c64 <_init>
 80083f8:	1ba4      	subs	r4, r4, r6
 80083fa:	10a4      	asrs	r4, r4, #2
 80083fc:	2500      	movs	r5, #0
 80083fe:	42a5      	cmp	r5, r4
 8008400:	d105      	bne.n	800840e <__libc_init_array+0x2e>
 8008402:	bd70      	pop	{r4, r5, r6, pc}
 8008404:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008408:	4798      	blx	r3
 800840a:	3501      	adds	r5, #1
 800840c:	e7ee      	b.n	80083ec <__libc_init_array+0xc>
 800840e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008412:	4798      	blx	r3
 8008414:	3501      	adds	r5, #1
 8008416:	e7f2      	b.n	80083fe <__libc_init_array+0x1e>
 8008418:	08008cd8 	.word	0x08008cd8
 800841c:	08008cd8 	.word	0x08008cd8
 8008420:	08008cd8 	.word	0x08008cd8
 8008424:	08008cdc 	.word	0x08008cdc

08008428 <malloc>:
 8008428:	4b02      	ldr	r3, [pc, #8]	; (8008434 <malloc+0xc>)
 800842a:	4601      	mov	r1, r0
 800842c:	6818      	ldr	r0, [r3, #0]
 800842e:	f000 b861 	b.w	80084f4 <_malloc_r>
 8008432:	bf00      	nop
 8008434:	2000002c 	.word	0x2000002c

08008438 <free>:
 8008438:	4b02      	ldr	r3, [pc, #8]	; (8008444 <free+0xc>)
 800843a:	4601      	mov	r1, r0
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	f000 b80b 	b.w	8008458 <_free_r>
 8008442:	bf00      	nop
 8008444:	2000002c 	.word	0x2000002c

08008448 <memset>:
 8008448:	4402      	add	r2, r0
 800844a:	4603      	mov	r3, r0
 800844c:	4293      	cmp	r3, r2
 800844e:	d100      	bne.n	8008452 <memset+0xa>
 8008450:	4770      	bx	lr
 8008452:	f803 1b01 	strb.w	r1, [r3], #1
 8008456:	e7f9      	b.n	800844c <memset+0x4>

08008458 <_free_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4605      	mov	r5, r0
 800845c:	2900      	cmp	r1, #0
 800845e:	d045      	beq.n	80084ec <_free_r+0x94>
 8008460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008464:	1f0c      	subs	r4, r1, #4
 8008466:	2b00      	cmp	r3, #0
 8008468:	bfb8      	it	lt
 800846a:	18e4      	addlt	r4, r4, r3
 800846c:	f000 f8cc 	bl	8008608 <__malloc_lock>
 8008470:	4a1f      	ldr	r2, [pc, #124]	; (80084f0 <_free_r+0x98>)
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	4610      	mov	r0, r2
 8008476:	b933      	cbnz	r3, 8008486 <_free_r+0x2e>
 8008478:	6063      	str	r3, [r4, #4]
 800847a:	6014      	str	r4, [r2, #0]
 800847c:	4628      	mov	r0, r5
 800847e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008482:	f000 b8c2 	b.w	800860a <__malloc_unlock>
 8008486:	42a3      	cmp	r3, r4
 8008488:	d90c      	bls.n	80084a4 <_free_r+0x4c>
 800848a:	6821      	ldr	r1, [r4, #0]
 800848c:	1862      	adds	r2, r4, r1
 800848e:	4293      	cmp	r3, r2
 8008490:	bf04      	itt	eq
 8008492:	681a      	ldreq	r2, [r3, #0]
 8008494:	685b      	ldreq	r3, [r3, #4]
 8008496:	6063      	str	r3, [r4, #4]
 8008498:	bf04      	itt	eq
 800849a:	1852      	addeq	r2, r2, r1
 800849c:	6022      	streq	r2, [r4, #0]
 800849e:	6004      	str	r4, [r0, #0]
 80084a0:	e7ec      	b.n	800847c <_free_r+0x24>
 80084a2:	4613      	mov	r3, r2
 80084a4:	685a      	ldr	r2, [r3, #4]
 80084a6:	b10a      	cbz	r2, 80084ac <_free_r+0x54>
 80084a8:	42a2      	cmp	r2, r4
 80084aa:	d9fa      	bls.n	80084a2 <_free_r+0x4a>
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	1858      	adds	r0, r3, r1
 80084b0:	42a0      	cmp	r0, r4
 80084b2:	d10b      	bne.n	80084cc <_free_r+0x74>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	4401      	add	r1, r0
 80084b8:	1858      	adds	r0, r3, r1
 80084ba:	4282      	cmp	r2, r0
 80084bc:	6019      	str	r1, [r3, #0]
 80084be:	d1dd      	bne.n	800847c <_free_r+0x24>
 80084c0:	6810      	ldr	r0, [r2, #0]
 80084c2:	6852      	ldr	r2, [r2, #4]
 80084c4:	605a      	str	r2, [r3, #4]
 80084c6:	4401      	add	r1, r0
 80084c8:	6019      	str	r1, [r3, #0]
 80084ca:	e7d7      	b.n	800847c <_free_r+0x24>
 80084cc:	d902      	bls.n	80084d4 <_free_r+0x7c>
 80084ce:	230c      	movs	r3, #12
 80084d0:	602b      	str	r3, [r5, #0]
 80084d2:	e7d3      	b.n	800847c <_free_r+0x24>
 80084d4:	6820      	ldr	r0, [r4, #0]
 80084d6:	1821      	adds	r1, r4, r0
 80084d8:	428a      	cmp	r2, r1
 80084da:	bf04      	itt	eq
 80084dc:	6811      	ldreq	r1, [r2, #0]
 80084de:	6852      	ldreq	r2, [r2, #4]
 80084e0:	6062      	str	r2, [r4, #4]
 80084e2:	bf04      	itt	eq
 80084e4:	1809      	addeq	r1, r1, r0
 80084e6:	6021      	streq	r1, [r4, #0]
 80084e8:	605c      	str	r4, [r3, #4]
 80084ea:	e7c7      	b.n	800847c <_free_r+0x24>
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	bf00      	nop
 80084f0:	200000b8 	.word	0x200000b8

080084f4 <_malloc_r>:
 80084f4:	b570      	push	{r4, r5, r6, lr}
 80084f6:	1ccd      	adds	r5, r1, #3
 80084f8:	f025 0503 	bic.w	r5, r5, #3
 80084fc:	3508      	adds	r5, #8
 80084fe:	2d0c      	cmp	r5, #12
 8008500:	bf38      	it	cc
 8008502:	250c      	movcc	r5, #12
 8008504:	2d00      	cmp	r5, #0
 8008506:	4606      	mov	r6, r0
 8008508:	db01      	blt.n	800850e <_malloc_r+0x1a>
 800850a:	42a9      	cmp	r1, r5
 800850c:	d903      	bls.n	8008516 <_malloc_r+0x22>
 800850e:	230c      	movs	r3, #12
 8008510:	6033      	str	r3, [r6, #0]
 8008512:	2000      	movs	r0, #0
 8008514:	bd70      	pop	{r4, r5, r6, pc}
 8008516:	f000 f877 	bl	8008608 <__malloc_lock>
 800851a:	4a21      	ldr	r2, [pc, #132]	; (80085a0 <_malloc_r+0xac>)
 800851c:	6814      	ldr	r4, [r2, #0]
 800851e:	4621      	mov	r1, r4
 8008520:	b991      	cbnz	r1, 8008548 <_malloc_r+0x54>
 8008522:	4c20      	ldr	r4, [pc, #128]	; (80085a4 <_malloc_r+0xb0>)
 8008524:	6823      	ldr	r3, [r4, #0]
 8008526:	b91b      	cbnz	r3, 8008530 <_malloc_r+0x3c>
 8008528:	4630      	mov	r0, r6
 800852a:	f000 f83d 	bl	80085a8 <_sbrk_r>
 800852e:	6020      	str	r0, [r4, #0]
 8008530:	4629      	mov	r1, r5
 8008532:	4630      	mov	r0, r6
 8008534:	f000 f838 	bl	80085a8 <_sbrk_r>
 8008538:	1c43      	adds	r3, r0, #1
 800853a:	d124      	bne.n	8008586 <_malloc_r+0x92>
 800853c:	230c      	movs	r3, #12
 800853e:	6033      	str	r3, [r6, #0]
 8008540:	4630      	mov	r0, r6
 8008542:	f000 f862 	bl	800860a <__malloc_unlock>
 8008546:	e7e4      	b.n	8008512 <_malloc_r+0x1e>
 8008548:	680b      	ldr	r3, [r1, #0]
 800854a:	1b5b      	subs	r3, r3, r5
 800854c:	d418      	bmi.n	8008580 <_malloc_r+0x8c>
 800854e:	2b0b      	cmp	r3, #11
 8008550:	d90f      	bls.n	8008572 <_malloc_r+0x7e>
 8008552:	600b      	str	r3, [r1, #0]
 8008554:	50cd      	str	r5, [r1, r3]
 8008556:	18cc      	adds	r4, r1, r3
 8008558:	4630      	mov	r0, r6
 800855a:	f000 f856 	bl	800860a <__malloc_unlock>
 800855e:	f104 000b 	add.w	r0, r4, #11
 8008562:	1d23      	adds	r3, r4, #4
 8008564:	f020 0007 	bic.w	r0, r0, #7
 8008568:	1ac3      	subs	r3, r0, r3
 800856a:	d0d3      	beq.n	8008514 <_malloc_r+0x20>
 800856c:	425a      	negs	r2, r3
 800856e:	50e2      	str	r2, [r4, r3]
 8008570:	e7d0      	b.n	8008514 <_malloc_r+0x20>
 8008572:	428c      	cmp	r4, r1
 8008574:	684b      	ldr	r3, [r1, #4]
 8008576:	bf16      	itet	ne
 8008578:	6063      	strne	r3, [r4, #4]
 800857a:	6013      	streq	r3, [r2, #0]
 800857c:	460c      	movne	r4, r1
 800857e:	e7eb      	b.n	8008558 <_malloc_r+0x64>
 8008580:	460c      	mov	r4, r1
 8008582:	6849      	ldr	r1, [r1, #4]
 8008584:	e7cc      	b.n	8008520 <_malloc_r+0x2c>
 8008586:	1cc4      	adds	r4, r0, #3
 8008588:	f024 0403 	bic.w	r4, r4, #3
 800858c:	42a0      	cmp	r0, r4
 800858e:	d005      	beq.n	800859c <_malloc_r+0xa8>
 8008590:	1a21      	subs	r1, r4, r0
 8008592:	4630      	mov	r0, r6
 8008594:	f000 f808 	bl	80085a8 <_sbrk_r>
 8008598:	3001      	adds	r0, #1
 800859a:	d0cf      	beq.n	800853c <_malloc_r+0x48>
 800859c:	6025      	str	r5, [r4, #0]
 800859e:	e7db      	b.n	8008558 <_malloc_r+0x64>
 80085a0:	200000b8 	.word	0x200000b8
 80085a4:	200000bc 	.word	0x200000bc

080085a8 <_sbrk_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4c06      	ldr	r4, [pc, #24]	; (80085c4 <_sbrk_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4605      	mov	r5, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	6023      	str	r3, [r4, #0]
 80085b4:	f7ff fb7a 	bl	8007cac <_sbrk>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_sbrk_r+0x1a>
 80085bc:	6823      	ldr	r3, [r4, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_sbrk_r+0x1a>
 80085c0:	602b      	str	r3, [r5, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	200008d0 	.word	0x200008d0

080085c8 <siprintf>:
 80085c8:	b40e      	push	{r1, r2, r3}
 80085ca:	b500      	push	{lr}
 80085cc:	b09c      	sub	sp, #112	; 0x70
 80085ce:	ab1d      	add	r3, sp, #116	; 0x74
 80085d0:	9002      	str	r0, [sp, #8]
 80085d2:	9006      	str	r0, [sp, #24]
 80085d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80085d8:	4809      	ldr	r0, [pc, #36]	; (8008600 <siprintf+0x38>)
 80085da:	9107      	str	r1, [sp, #28]
 80085dc:	9104      	str	r1, [sp, #16]
 80085de:	4909      	ldr	r1, [pc, #36]	; (8008604 <siprintf+0x3c>)
 80085e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085e4:	9105      	str	r1, [sp, #20]
 80085e6:	6800      	ldr	r0, [r0, #0]
 80085e8:	9301      	str	r3, [sp, #4]
 80085ea:	a902      	add	r1, sp, #8
 80085ec:	f000 f868 	bl	80086c0 <_svfiprintf_r>
 80085f0:	9b02      	ldr	r3, [sp, #8]
 80085f2:	2200      	movs	r2, #0
 80085f4:	701a      	strb	r2, [r3, #0]
 80085f6:	b01c      	add	sp, #112	; 0x70
 80085f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80085fc:	b003      	add	sp, #12
 80085fe:	4770      	bx	lr
 8008600:	2000002c 	.word	0x2000002c
 8008604:	ffff0208 	.word	0xffff0208

08008608 <__malloc_lock>:
 8008608:	4770      	bx	lr

0800860a <__malloc_unlock>:
 800860a:	4770      	bx	lr

0800860c <__ssputs_r>:
 800860c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008610:	688e      	ldr	r6, [r1, #8]
 8008612:	429e      	cmp	r6, r3
 8008614:	4682      	mov	sl, r0
 8008616:	460c      	mov	r4, r1
 8008618:	4690      	mov	r8, r2
 800861a:	4699      	mov	r9, r3
 800861c:	d837      	bhi.n	800868e <__ssputs_r+0x82>
 800861e:	898a      	ldrh	r2, [r1, #12]
 8008620:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008624:	d031      	beq.n	800868a <__ssputs_r+0x7e>
 8008626:	6825      	ldr	r5, [r4, #0]
 8008628:	6909      	ldr	r1, [r1, #16]
 800862a:	1a6f      	subs	r7, r5, r1
 800862c:	6965      	ldr	r5, [r4, #20]
 800862e:	2302      	movs	r3, #2
 8008630:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008634:	fb95 f5f3 	sdiv	r5, r5, r3
 8008638:	f109 0301 	add.w	r3, r9, #1
 800863c:	443b      	add	r3, r7
 800863e:	429d      	cmp	r5, r3
 8008640:	bf38      	it	cc
 8008642:	461d      	movcc	r5, r3
 8008644:	0553      	lsls	r3, r2, #21
 8008646:	d530      	bpl.n	80086aa <__ssputs_r+0x9e>
 8008648:	4629      	mov	r1, r5
 800864a:	f7ff ff53 	bl	80084f4 <_malloc_r>
 800864e:	4606      	mov	r6, r0
 8008650:	b950      	cbnz	r0, 8008668 <__ssputs_r+0x5c>
 8008652:	230c      	movs	r3, #12
 8008654:	f8ca 3000 	str.w	r3, [sl]
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800865e:	81a3      	strh	r3, [r4, #12]
 8008660:	f04f 30ff 	mov.w	r0, #4294967295
 8008664:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008668:	463a      	mov	r2, r7
 800866a:	6921      	ldr	r1, [r4, #16]
 800866c:	f000 faa8 	bl	8008bc0 <memcpy>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	6126      	str	r6, [r4, #16]
 800867e:	6165      	str	r5, [r4, #20]
 8008680:	443e      	add	r6, r7
 8008682:	1bed      	subs	r5, r5, r7
 8008684:	6026      	str	r6, [r4, #0]
 8008686:	60a5      	str	r5, [r4, #8]
 8008688:	464e      	mov	r6, r9
 800868a:	454e      	cmp	r6, r9
 800868c:	d900      	bls.n	8008690 <__ssputs_r+0x84>
 800868e:	464e      	mov	r6, r9
 8008690:	4632      	mov	r2, r6
 8008692:	4641      	mov	r1, r8
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	f000 fa9e 	bl	8008bd6 <memmove>
 800869a:	68a3      	ldr	r3, [r4, #8]
 800869c:	1b9b      	subs	r3, r3, r6
 800869e:	60a3      	str	r3, [r4, #8]
 80086a0:	6823      	ldr	r3, [r4, #0]
 80086a2:	441e      	add	r6, r3
 80086a4:	6026      	str	r6, [r4, #0]
 80086a6:	2000      	movs	r0, #0
 80086a8:	e7dc      	b.n	8008664 <__ssputs_r+0x58>
 80086aa:	462a      	mov	r2, r5
 80086ac:	f000 faac 	bl	8008c08 <_realloc_r>
 80086b0:	4606      	mov	r6, r0
 80086b2:	2800      	cmp	r0, #0
 80086b4:	d1e2      	bne.n	800867c <__ssputs_r+0x70>
 80086b6:	6921      	ldr	r1, [r4, #16]
 80086b8:	4650      	mov	r0, sl
 80086ba:	f7ff fecd 	bl	8008458 <_free_r>
 80086be:	e7c8      	b.n	8008652 <__ssputs_r+0x46>

080086c0 <_svfiprintf_r>:
 80086c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086c4:	461d      	mov	r5, r3
 80086c6:	898b      	ldrh	r3, [r1, #12]
 80086c8:	061f      	lsls	r7, r3, #24
 80086ca:	b09d      	sub	sp, #116	; 0x74
 80086cc:	4680      	mov	r8, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	4616      	mov	r6, r2
 80086d2:	d50f      	bpl.n	80086f4 <_svfiprintf_r+0x34>
 80086d4:	690b      	ldr	r3, [r1, #16]
 80086d6:	b96b      	cbnz	r3, 80086f4 <_svfiprintf_r+0x34>
 80086d8:	2140      	movs	r1, #64	; 0x40
 80086da:	f7ff ff0b 	bl	80084f4 <_malloc_r>
 80086de:	6020      	str	r0, [r4, #0]
 80086e0:	6120      	str	r0, [r4, #16]
 80086e2:	b928      	cbnz	r0, 80086f0 <_svfiprintf_r+0x30>
 80086e4:	230c      	movs	r3, #12
 80086e6:	f8c8 3000 	str.w	r3, [r8]
 80086ea:	f04f 30ff 	mov.w	r0, #4294967295
 80086ee:	e0c8      	b.n	8008882 <_svfiprintf_r+0x1c2>
 80086f0:	2340      	movs	r3, #64	; 0x40
 80086f2:	6163      	str	r3, [r4, #20]
 80086f4:	2300      	movs	r3, #0
 80086f6:	9309      	str	r3, [sp, #36]	; 0x24
 80086f8:	2320      	movs	r3, #32
 80086fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80086fe:	2330      	movs	r3, #48	; 0x30
 8008700:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008704:	9503      	str	r5, [sp, #12]
 8008706:	f04f 0b01 	mov.w	fp, #1
 800870a:	4637      	mov	r7, r6
 800870c:	463d      	mov	r5, r7
 800870e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008712:	b10b      	cbz	r3, 8008718 <_svfiprintf_r+0x58>
 8008714:	2b25      	cmp	r3, #37	; 0x25
 8008716:	d13e      	bne.n	8008796 <_svfiprintf_r+0xd6>
 8008718:	ebb7 0a06 	subs.w	sl, r7, r6
 800871c:	d00b      	beq.n	8008736 <_svfiprintf_r+0x76>
 800871e:	4653      	mov	r3, sl
 8008720:	4632      	mov	r2, r6
 8008722:	4621      	mov	r1, r4
 8008724:	4640      	mov	r0, r8
 8008726:	f7ff ff71 	bl	800860c <__ssputs_r>
 800872a:	3001      	adds	r0, #1
 800872c:	f000 80a4 	beq.w	8008878 <_svfiprintf_r+0x1b8>
 8008730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008732:	4453      	add	r3, sl
 8008734:	9309      	str	r3, [sp, #36]	; 0x24
 8008736:	783b      	ldrb	r3, [r7, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	f000 809d 	beq.w	8008878 <_svfiprintf_r+0x1b8>
 800873e:	2300      	movs	r3, #0
 8008740:	f04f 32ff 	mov.w	r2, #4294967295
 8008744:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008748:	9304      	str	r3, [sp, #16]
 800874a:	9307      	str	r3, [sp, #28]
 800874c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008750:	931a      	str	r3, [sp, #104]	; 0x68
 8008752:	462f      	mov	r7, r5
 8008754:	2205      	movs	r2, #5
 8008756:	f817 1b01 	ldrb.w	r1, [r7], #1
 800875a:	4850      	ldr	r0, [pc, #320]	; (800889c <_svfiprintf_r+0x1dc>)
 800875c:	f7f7 fd40 	bl	80001e0 <memchr>
 8008760:	9b04      	ldr	r3, [sp, #16]
 8008762:	b9d0      	cbnz	r0, 800879a <_svfiprintf_r+0xda>
 8008764:	06d9      	lsls	r1, r3, #27
 8008766:	bf44      	itt	mi
 8008768:	2220      	movmi	r2, #32
 800876a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800876e:	071a      	lsls	r2, r3, #28
 8008770:	bf44      	itt	mi
 8008772:	222b      	movmi	r2, #43	; 0x2b
 8008774:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008778:	782a      	ldrb	r2, [r5, #0]
 800877a:	2a2a      	cmp	r2, #42	; 0x2a
 800877c:	d015      	beq.n	80087aa <_svfiprintf_r+0xea>
 800877e:	9a07      	ldr	r2, [sp, #28]
 8008780:	462f      	mov	r7, r5
 8008782:	2000      	movs	r0, #0
 8008784:	250a      	movs	r5, #10
 8008786:	4639      	mov	r1, r7
 8008788:	f811 3b01 	ldrb.w	r3, [r1], #1
 800878c:	3b30      	subs	r3, #48	; 0x30
 800878e:	2b09      	cmp	r3, #9
 8008790:	d94d      	bls.n	800882e <_svfiprintf_r+0x16e>
 8008792:	b1b8      	cbz	r0, 80087c4 <_svfiprintf_r+0x104>
 8008794:	e00f      	b.n	80087b6 <_svfiprintf_r+0xf6>
 8008796:	462f      	mov	r7, r5
 8008798:	e7b8      	b.n	800870c <_svfiprintf_r+0x4c>
 800879a:	4a40      	ldr	r2, [pc, #256]	; (800889c <_svfiprintf_r+0x1dc>)
 800879c:	1a80      	subs	r0, r0, r2
 800879e:	fa0b f000 	lsl.w	r0, fp, r0
 80087a2:	4318      	orrs	r0, r3
 80087a4:	9004      	str	r0, [sp, #16]
 80087a6:	463d      	mov	r5, r7
 80087a8:	e7d3      	b.n	8008752 <_svfiprintf_r+0x92>
 80087aa:	9a03      	ldr	r2, [sp, #12]
 80087ac:	1d11      	adds	r1, r2, #4
 80087ae:	6812      	ldr	r2, [r2, #0]
 80087b0:	9103      	str	r1, [sp, #12]
 80087b2:	2a00      	cmp	r2, #0
 80087b4:	db01      	blt.n	80087ba <_svfiprintf_r+0xfa>
 80087b6:	9207      	str	r2, [sp, #28]
 80087b8:	e004      	b.n	80087c4 <_svfiprintf_r+0x104>
 80087ba:	4252      	negs	r2, r2
 80087bc:	f043 0302 	orr.w	r3, r3, #2
 80087c0:	9207      	str	r2, [sp, #28]
 80087c2:	9304      	str	r3, [sp, #16]
 80087c4:	783b      	ldrb	r3, [r7, #0]
 80087c6:	2b2e      	cmp	r3, #46	; 0x2e
 80087c8:	d10c      	bne.n	80087e4 <_svfiprintf_r+0x124>
 80087ca:	787b      	ldrb	r3, [r7, #1]
 80087cc:	2b2a      	cmp	r3, #42	; 0x2a
 80087ce:	d133      	bne.n	8008838 <_svfiprintf_r+0x178>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	1d1a      	adds	r2, r3, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	9203      	str	r2, [sp, #12]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	bfb8      	it	lt
 80087dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80087e0:	3702      	adds	r7, #2
 80087e2:	9305      	str	r3, [sp, #20]
 80087e4:	4d2e      	ldr	r5, [pc, #184]	; (80088a0 <_svfiprintf_r+0x1e0>)
 80087e6:	7839      	ldrb	r1, [r7, #0]
 80087e8:	2203      	movs	r2, #3
 80087ea:	4628      	mov	r0, r5
 80087ec:	f7f7 fcf8 	bl	80001e0 <memchr>
 80087f0:	b138      	cbz	r0, 8008802 <_svfiprintf_r+0x142>
 80087f2:	2340      	movs	r3, #64	; 0x40
 80087f4:	1b40      	subs	r0, r0, r5
 80087f6:	fa03 f000 	lsl.w	r0, r3, r0
 80087fa:	9b04      	ldr	r3, [sp, #16]
 80087fc:	4303      	orrs	r3, r0
 80087fe:	3701      	adds	r7, #1
 8008800:	9304      	str	r3, [sp, #16]
 8008802:	7839      	ldrb	r1, [r7, #0]
 8008804:	4827      	ldr	r0, [pc, #156]	; (80088a4 <_svfiprintf_r+0x1e4>)
 8008806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800880a:	2206      	movs	r2, #6
 800880c:	1c7e      	adds	r6, r7, #1
 800880e:	f7f7 fce7 	bl	80001e0 <memchr>
 8008812:	2800      	cmp	r0, #0
 8008814:	d038      	beq.n	8008888 <_svfiprintf_r+0x1c8>
 8008816:	4b24      	ldr	r3, [pc, #144]	; (80088a8 <_svfiprintf_r+0x1e8>)
 8008818:	bb13      	cbnz	r3, 8008860 <_svfiprintf_r+0x1a0>
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	3307      	adds	r3, #7
 800881e:	f023 0307 	bic.w	r3, r3, #7
 8008822:	3308      	adds	r3, #8
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008828:	444b      	add	r3, r9
 800882a:	9309      	str	r3, [sp, #36]	; 0x24
 800882c:	e76d      	b.n	800870a <_svfiprintf_r+0x4a>
 800882e:	fb05 3202 	mla	r2, r5, r2, r3
 8008832:	2001      	movs	r0, #1
 8008834:	460f      	mov	r7, r1
 8008836:	e7a6      	b.n	8008786 <_svfiprintf_r+0xc6>
 8008838:	2300      	movs	r3, #0
 800883a:	3701      	adds	r7, #1
 800883c:	9305      	str	r3, [sp, #20]
 800883e:	4619      	mov	r1, r3
 8008840:	250a      	movs	r5, #10
 8008842:	4638      	mov	r0, r7
 8008844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008848:	3a30      	subs	r2, #48	; 0x30
 800884a:	2a09      	cmp	r2, #9
 800884c:	d903      	bls.n	8008856 <_svfiprintf_r+0x196>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0c8      	beq.n	80087e4 <_svfiprintf_r+0x124>
 8008852:	9105      	str	r1, [sp, #20]
 8008854:	e7c6      	b.n	80087e4 <_svfiprintf_r+0x124>
 8008856:	fb05 2101 	mla	r1, r5, r1, r2
 800885a:	2301      	movs	r3, #1
 800885c:	4607      	mov	r7, r0
 800885e:	e7f0      	b.n	8008842 <_svfiprintf_r+0x182>
 8008860:	ab03      	add	r3, sp, #12
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	4622      	mov	r2, r4
 8008866:	4b11      	ldr	r3, [pc, #68]	; (80088ac <_svfiprintf_r+0x1ec>)
 8008868:	a904      	add	r1, sp, #16
 800886a:	4640      	mov	r0, r8
 800886c:	f3af 8000 	nop.w
 8008870:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008874:	4681      	mov	r9, r0
 8008876:	d1d6      	bne.n	8008826 <_svfiprintf_r+0x166>
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	065b      	lsls	r3, r3, #25
 800887c:	f53f af35 	bmi.w	80086ea <_svfiprintf_r+0x2a>
 8008880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008882:	b01d      	add	sp, #116	; 0x74
 8008884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008888:	ab03      	add	r3, sp, #12
 800888a:	9300      	str	r3, [sp, #0]
 800888c:	4622      	mov	r2, r4
 800888e:	4b07      	ldr	r3, [pc, #28]	; (80088ac <_svfiprintf_r+0x1ec>)
 8008890:	a904      	add	r1, sp, #16
 8008892:	4640      	mov	r0, r8
 8008894:	f000 f882 	bl	800899c <_printf_i>
 8008898:	e7ea      	b.n	8008870 <_svfiprintf_r+0x1b0>
 800889a:	bf00      	nop
 800889c:	08008c9c 	.word	0x08008c9c
 80088a0:	08008ca2 	.word	0x08008ca2
 80088a4:	08008ca6 	.word	0x08008ca6
 80088a8:	00000000 	.word	0x00000000
 80088ac:	0800860d 	.word	0x0800860d

080088b0 <_printf_common>:
 80088b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088b4:	4691      	mov	r9, r2
 80088b6:	461f      	mov	r7, r3
 80088b8:	688a      	ldr	r2, [r1, #8]
 80088ba:	690b      	ldr	r3, [r1, #16]
 80088bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088c0:	4293      	cmp	r3, r2
 80088c2:	bfb8      	it	lt
 80088c4:	4613      	movlt	r3, r2
 80088c6:	f8c9 3000 	str.w	r3, [r9]
 80088ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80088ce:	4606      	mov	r6, r0
 80088d0:	460c      	mov	r4, r1
 80088d2:	b112      	cbz	r2, 80088da <_printf_common+0x2a>
 80088d4:	3301      	adds	r3, #1
 80088d6:	f8c9 3000 	str.w	r3, [r9]
 80088da:	6823      	ldr	r3, [r4, #0]
 80088dc:	0699      	lsls	r1, r3, #26
 80088de:	bf42      	ittt	mi
 80088e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80088e4:	3302      	addmi	r3, #2
 80088e6:	f8c9 3000 	strmi.w	r3, [r9]
 80088ea:	6825      	ldr	r5, [r4, #0]
 80088ec:	f015 0506 	ands.w	r5, r5, #6
 80088f0:	d107      	bne.n	8008902 <_printf_common+0x52>
 80088f2:	f104 0a19 	add.w	sl, r4, #25
 80088f6:	68e3      	ldr	r3, [r4, #12]
 80088f8:	f8d9 2000 	ldr.w	r2, [r9]
 80088fc:	1a9b      	subs	r3, r3, r2
 80088fe:	42ab      	cmp	r3, r5
 8008900:	dc28      	bgt.n	8008954 <_printf_common+0xa4>
 8008902:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008906:	6822      	ldr	r2, [r4, #0]
 8008908:	3300      	adds	r3, #0
 800890a:	bf18      	it	ne
 800890c:	2301      	movne	r3, #1
 800890e:	0692      	lsls	r2, r2, #26
 8008910:	d42d      	bmi.n	800896e <_printf_common+0xbe>
 8008912:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008916:	4639      	mov	r1, r7
 8008918:	4630      	mov	r0, r6
 800891a:	47c0      	blx	r8
 800891c:	3001      	adds	r0, #1
 800891e:	d020      	beq.n	8008962 <_printf_common+0xb2>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	68e5      	ldr	r5, [r4, #12]
 8008924:	f8d9 2000 	ldr.w	r2, [r9]
 8008928:	f003 0306 	and.w	r3, r3, #6
 800892c:	2b04      	cmp	r3, #4
 800892e:	bf08      	it	eq
 8008930:	1aad      	subeq	r5, r5, r2
 8008932:	68a3      	ldr	r3, [r4, #8]
 8008934:	6922      	ldr	r2, [r4, #16]
 8008936:	bf0c      	ite	eq
 8008938:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800893c:	2500      	movne	r5, #0
 800893e:	4293      	cmp	r3, r2
 8008940:	bfc4      	itt	gt
 8008942:	1a9b      	subgt	r3, r3, r2
 8008944:	18ed      	addgt	r5, r5, r3
 8008946:	f04f 0900 	mov.w	r9, #0
 800894a:	341a      	adds	r4, #26
 800894c:	454d      	cmp	r5, r9
 800894e:	d11a      	bne.n	8008986 <_printf_common+0xd6>
 8008950:	2000      	movs	r0, #0
 8008952:	e008      	b.n	8008966 <_printf_common+0xb6>
 8008954:	2301      	movs	r3, #1
 8008956:	4652      	mov	r2, sl
 8008958:	4639      	mov	r1, r7
 800895a:	4630      	mov	r0, r6
 800895c:	47c0      	blx	r8
 800895e:	3001      	adds	r0, #1
 8008960:	d103      	bne.n	800896a <_printf_common+0xba>
 8008962:	f04f 30ff 	mov.w	r0, #4294967295
 8008966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800896a:	3501      	adds	r5, #1
 800896c:	e7c3      	b.n	80088f6 <_printf_common+0x46>
 800896e:	18e1      	adds	r1, r4, r3
 8008970:	1c5a      	adds	r2, r3, #1
 8008972:	2030      	movs	r0, #48	; 0x30
 8008974:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008978:	4422      	add	r2, r4
 800897a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800897e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008982:	3302      	adds	r3, #2
 8008984:	e7c5      	b.n	8008912 <_printf_common+0x62>
 8008986:	2301      	movs	r3, #1
 8008988:	4622      	mov	r2, r4
 800898a:	4639      	mov	r1, r7
 800898c:	4630      	mov	r0, r6
 800898e:	47c0      	blx	r8
 8008990:	3001      	adds	r0, #1
 8008992:	d0e6      	beq.n	8008962 <_printf_common+0xb2>
 8008994:	f109 0901 	add.w	r9, r9, #1
 8008998:	e7d8      	b.n	800894c <_printf_common+0x9c>
	...

0800899c <_printf_i>:
 800899c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80089a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80089a4:	460c      	mov	r4, r1
 80089a6:	7e09      	ldrb	r1, [r1, #24]
 80089a8:	b085      	sub	sp, #20
 80089aa:	296e      	cmp	r1, #110	; 0x6e
 80089ac:	4617      	mov	r7, r2
 80089ae:	4606      	mov	r6, r0
 80089b0:	4698      	mov	r8, r3
 80089b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089b4:	f000 80b3 	beq.w	8008b1e <_printf_i+0x182>
 80089b8:	d822      	bhi.n	8008a00 <_printf_i+0x64>
 80089ba:	2963      	cmp	r1, #99	; 0x63
 80089bc:	d036      	beq.n	8008a2c <_printf_i+0x90>
 80089be:	d80a      	bhi.n	80089d6 <_printf_i+0x3a>
 80089c0:	2900      	cmp	r1, #0
 80089c2:	f000 80b9 	beq.w	8008b38 <_printf_i+0x19c>
 80089c6:	2958      	cmp	r1, #88	; 0x58
 80089c8:	f000 8083 	beq.w	8008ad2 <_printf_i+0x136>
 80089cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80089d4:	e032      	b.n	8008a3c <_printf_i+0xa0>
 80089d6:	2964      	cmp	r1, #100	; 0x64
 80089d8:	d001      	beq.n	80089de <_printf_i+0x42>
 80089da:	2969      	cmp	r1, #105	; 0x69
 80089dc:	d1f6      	bne.n	80089cc <_printf_i+0x30>
 80089de:	6820      	ldr	r0, [r4, #0]
 80089e0:	6813      	ldr	r3, [r2, #0]
 80089e2:	0605      	lsls	r5, r0, #24
 80089e4:	f103 0104 	add.w	r1, r3, #4
 80089e8:	d52a      	bpl.n	8008a40 <_printf_i+0xa4>
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6011      	str	r1, [r2, #0]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	da03      	bge.n	80089fa <_printf_i+0x5e>
 80089f2:	222d      	movs	r2, #45	; 0x2d
 80089f4:	425b      	negs	r3, r3
 80089f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80089fa:	486f      	ldr	r0, [pc, #444]	; (8008bb8 <_printf_i+0x21c>)
 80089fc:	220a      	movs	r2, #10
 80089fe:	e039      	b.n	8008a74 <_printf_i+0xd8>
 8008a00:	2973      	cmp	r1, #115	; 0x73
 8008a02:	f000 809d 	beq.w	8008b40 <_printf_i+0x1a4>
 8008a06:	d808      	bhi.n	8008a1a <_printf_i+0x7e>
 8008a08:	296f      	cmp	r1, #111	; 0x6f
 8008a0a:	d020      	beq.n	8008a4e <_printf_i+0xb2>
 8008a0c:	2970      	cmp	r1, #112	; 0x70
 8008a0e:	d1dd      	bne.n	80089cc <_printf_i+0x30>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	f043 0320 	orr.w	r3, r3, #32
 8008a16:	6023      	str	r3, [r4, #0]
 8008a18:	e003      	b.n	8008a22 <_printf_i+0x86>
 8008a1a:	2975      	cmp	r1, #117	; 0x75
 8008a1c:	d017      	beq.n	8008a4e <_printf_i+0xb2>
 8008a1e:	2978      	cmp	r1, #120	; 0x78
 8008a20:	d1d4      	bne.n	80089cc <_printf_i+0x30>
 8008a22:	2378      	movs	r3, #120	; 0x78
 8008a24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a28:	4864      	ldr	r0, [pc, #400]	; (8008bbc <_printf_i+0x220>)
 8008a2a:	e055      	b.n	8008ad8 <_printf_i+0x13c>
 8008a2c:	6813      	ldr	r3, [r2, #0]
 8008a2e:	1d19      	adds	r1, r3, #4
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	6011      	str	r1, [r2, #0]
 8008a34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e08c      	b.n	8008b5a <_printf_i+0x1be>
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	6011      	str	r1, [r2, #0]
 8008a44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008a48:	bf18      	it	ne
 8008a4a:	b21b      	sxthne	r3, r3
 8008a4c:	e7cf      	b.n	80089ee <_printf_i+0x52>
 8008a4e:	6813      	ldr	r3, [r2, #0]
 8008a50:	6825      	ldr	r5, [r4, #0]
 8008a52:	1d18      	adds	r0, r3, #4
 8008a54:	6010      	str	r0, [r2, #0]
 8008a56:	0628      	lsls	r0, r5, #24
 8008a58:	d501      	bpl.n	8008a5e <_printf_i+0xc2>
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	e002      	b.n	8008a64 <_printf_i+0xc8>
 8008a5e:	0668      	lsls	r0, r5, #25
 8008a60:	d5fb      	bpl.n	8008a5a <_printf_i+0xbe>
 8008a62:	881b      	ldrh	r3, [r3, #0]
 8008a64:	4854      	ldr	r0, [pc, #336]	; (8008bb8 <_printf_i+0x21c>)
 8008a66:	296f      	cmp	r1, #111	; 0x6f
 8008a68:	bf14      	ite	ne
 8008a6a:	220a      	movne	r2, #10
 8008a6c:	2208      	moveq	r2, #8
 8008a6e:	2100      	movs	r1, #0
 8008a70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a74:	6865      	ldr	r5, [r4, #4]
 8008a76:	60a5      	str	r5, [r4, #8]
 8008a78:	2d00      	cmp	r5, #0
 8008a7a:	f2c0 8095 	blt.w	8008ba8 <_printf_i+0x20c>
 8008a7e:	6821      	ldr	r1, [r4, #0]
 8008a80:	f021 0104 	bic.w	r1, r1, #4
 8008a84:	6021      	str	r1, [r4, #0]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d13d      	bne.n	8008b06 <_printf_i+0x16a>
 8008a8a:	2d00      	cmp	r5, #0
 8008a8c:	f040 808e 	bne.w	8008bac <_printf_i+0x210>
 8008a90:	4665      	mov	r5, ip
 8008a92:	2a08      	cmp	r2, #8
 8008a94:	d10b      	bne.n	8008aae <_printf_i+0x112>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	07db      	lsls	r3, r3, #31
 8008a9a:	d508      	bpl.n	8008aae <_printf_i+0x112>
 8008a9c:	6923      	ldr	r3, [r4, #16]
 8008a9e:	6862      	ldr	r2, [r4, #4]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	bfde      	ittt	le
 8008aa4:	2330      	movle	r3, #48	; 0x30
 8008aa6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008aaa:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008aae:	ebac 0305 	sub.w	r3, ip, r5
 8008ab2:	6123      	str	r3, [r4, #16]
 8008ab4:	f8cd 8000 	str.w	r8, [sp]
 8008ab8:	463b      	mov	r3, r7
 8008aba:	aa03      	add	r2, sp, #12
 8008abc:	4621      	mov	r1, r4
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7ff fef6 	bl	80088b0 <_printf_common>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	d14d      	bne.n	8008b64 <_printf_i+0x1c8>
 8008ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8008acc:	b005      	add	sp, #20
 8008ace:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ad2:	4839      	ldr	r0, [pc, #228]	; (8008bb8 <_printf_i+0x21c>)
 8008ad4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ad8:	6813      	ldr	r3, [r2, #0]
 8008ada:	6821      	ldr	r1, [r4, #0]
 8008adc:	1d1d      	adds	r5, r3, #4
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	6015      	str	r5, [r2, #0]
 8008ae2:	060a      	lsls	r2, r1, #24
 8008ae4:	d50b      	bpl.n	8008afe <_printf_i+0x162>
 8008ae6:	07ca      	lsls	r2, r1, #31
 8008ae8:	bf44      	itt	mi
 8008aea:	f041 0120 	orrmi.w	r1, r1, #32
 8008aee:	6021      	strmi	r1, [r4, #0]
 8008af0:	b91b      	cbnz	r3, 8008afa <_printf_i+0x15e>
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	f022 0220 	bic.w	r2, r2, #32
 8008af8:	6022      	str	r2, [r4, #0]
 8008afa:	2210      	movs	r2, #16
 8008afc:	e7b7      	b.n	8008a6e <_printf_i+0xd2>
 8008afe:	064d      	lsls	r5, r1, #25
 8008b00:	bf48      	it	mi
 8008b02:	b29b      	uxthmi	r3, r3
 8008b04:	e7ef      	b.n	8008ae6 <_printf_i+0x14a>
 8008b06:	4665      	mov	r5, ip
 8008b08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b0c:	fb02 3311 	mls	r3, r2, r1, r3
 8008b10:	5cc3      	ldrb	r3, [r0, r3]
 8008b12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008b16:	460b      	mov	r3, r1
 8008b18:	2900      	cmp	r1, #0
 8008b1a:	d1f5      	bne.n	8008b08 <_printf_i+0x16c>
 8008b1c:	e7b9      	b.n	8008a92 <_printf_i+0xf6>
 8008b1e:	6813      	ldr	r3, [r2, #0]
 8008b20:	6825      	ldr	r5, [r4, #0]
 8008b22:	6961      	ldr	r1, [r4, #20]
 8008b24:	1d18      	adds	r0, r3, #4
 8008b26:	6010      	str	r0, [r2, #0]
 8008b28:	0628      	lsls	r0, r5, #24
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	d501      	bpl.n	8008b32 <_printf_i+0x196>
 8008b2e:	6019      	str	r1, [r3, #0]
 8008b30:	e002      	b.n	8008b38 <_printf_i+0x19c>
 8008b32:	066a      	lsls	r2, r5, #25
 8008b34:	d5fb      	bpl.n	8008b2e <_printf_i+0x192>
 8008b36:	8019      	strh	r1, [r3, #0]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	6123      	str	r3, [r4, #16]
 8008b3c:	4665      	mov	r5, ip
 8008b3e:	e7b9      	b.n	8008ab4 <_printf_i+0x118>
 8008b40:	6813      	ldr	r3, [r2, #0]
 8008b42:	1d19      	adds	r1, r3, #4
 8008b44:	6011      	str	r1, [r2, #0]
 8008b46:	681d      	ldr	r5, [r3, #0]
 8008b48:	6862      	ldr	r2, [r4, #4]
 8008b4a:	2100      	movs	r1, #0
 8008b4c:	4628      	mov	r0, r5
 8008b4e:	f7f7 fb47 	bl	80001e0 <memchr>
 8008b52:	b108      	cbz	r0, 8008b58 <_printf_i+0x1bc>
 8008b54:	1b40      	subs	r0, r0, r5
 8008b56:	6060      	str	r0, [r4, #4]
 8008b58:	6863      	ldr	r3, [r4, #4]
 8008b5a:	6123      	str	r3, [r4, #16]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b62:	e7a7      	b.n	8008ab4 <_printf_i+0x118>
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	462a      	mov	r2, r5
 8008b68:	4639      	mov	r1, r7
 8008b6a:	4630      	mov	r0, r6
 8008b6c:	47c0      	blx	r8
 8008b6e:	3001      	adds	r0, #1
 8008b70:	d0aa      	beq.n	8008ac8 <_printf_i+0x12c>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	079b      	lsls	r3, r3, #30
 8008b76:	d413      	bmi.n	8008ba0 <_printf_i+0x204>
 8008b78:	68e0      	ldr	r0, [r4, #12]
 8008b7a:	9b03      	ldr	r3, [sp, #12]
 8008b7c:	4298      	cmp	r0, r3
 8008b7e:	bfb8      	it	lt
 8008b80:	4618      	movlt	r0, r3
 8008b82:	e7a3      	b.n	8008acc <_printf_i+0x130>
 8008b84:	2301      	movs	r3, #1
 8008b86:	464a      	mov	r2, r9
 8008b88:	4639      	mov	r1, r7
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	47c0      	blx	r8
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d09a      	beq.n	8008ac8 <_printf_i+0x12c>
 8008b92:	3501      	adds	r5, #1
 8008b94:	68e3      	ldr	r3, [r4, #12]
 8008b96:	9a03      	ldr	r2, [sp, #12]
 8008b98:	1a9b      	subs	r3, r3, r2
 8008b9a:	42ab      	cmp	r3, r5
 8008b9c:	dcf2      	bgt.n	8008b84 <_printf_i+0x1e8>
 8008b9e:	e7eb      	b.n	8008b78 <_printf_i+0x1dc>
 8008ba0:	2500      	movs	r5, #0
 8008ba2:	f104 0919 	add.w	r9, r4, #25
 8008ba6:	e7f5      	b.n	8008b94 <_printf_i+0x1f8>
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d1ac      	bne.n	8008b06 <_printf_i+0x16a>
 8008bac:	7803      	ldrb	r3, [r0, #0]
 8008bae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008bb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008bb6:	e76c      	b.n	8008a92 <_printf_i+0xf6>
 8008bb8:	08008cad 	.word	0x08008cad
 8008bbc:	08008cbe 	.word	0x08008cbe

08008bc0 <memcpy>:
 8008bc0:	b510      	push	{r4, lr}
 8008bc2:	1e43      	subs	r3, r0, #1
 8008bc4:	440a      	add	r2, r1
 8008bc6:	4291      	cmp	r1, r2
 8008bc8:	d100      	bne.n	8008bcc <memcpy+0xc>
 8008bca:	bd10      	pop	{r4, pc}
 8008bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bd4:	e7f7      	b.n	8008bc6 <memcpy+0x6>

08008bd6 <memmove>:
 8008bd6:	4288      	cmp	r0, r1
 8008bd8:	b510      	push	{r4, lr}
 8008bda:	eb01 0302 	add.w	r3, r1, r2
 8008bde:	d807      	bhi.n	8008bf0 <memmove+0x1a>
 8008be0:	1e42      	subs	r2, r0, #1
 8008be2:	4299      	cmp	r1, r3
 8008be4:	d00a      	beq.n	8008bfc <memmove+0x26>
 8008be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008bee:	e7f8      	b.n	8008be2 <memmove+0xc>
 8008bf0:	4283      	cmp	r3, r0
 8008bf2:	d9f5      	bls.n	8008be0 <memmove+0xa>
 8008bf4:	1881      	adds	r1, r0, r2
 8008bf6:	1ad2      	subs	r2, r2, r3
 8008bf8:	42d3      	cmn	r3, r2
 8008bfa:	d100      	bne.n	8008bfe <memmove+0x28>
 8008bfc:	bd10      	pop	{r4, pc}
 8008bfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008c02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008c06:	e7f7      	b.n	8008bf8 <memmove+0x22>

08008c08 <_realloc_r>:
 8008c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c0a:	4607      	mov	r7, r0
 8008c0c:	4614      	mov	r4, r2
 8008c0e:	460e      	mov	r6, r1
 8008c10:	b921      	cbnz	r1, 8008c1c <_realloc_r+0x14>
 8008c12:	4611      	mov	r1, r2
 8008c14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008c18:	f7ff bc6c 	b.w	80084f4 <_malloc_r>
 8008c1c:	b922      	cbnz	r2, 8008c28 <_realloc_r+0x20>
 8008c1e:	f7ff fc1b 	bl	8008458 <_free_r>
 8008c22:	4625      	mov	r5, r4
 8008c24:	4628      	mov	r0, r5
 8008c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c28:	f000 f814 	bl	8008c54 <_malloc_usable_size_r>
 8008c2c:	42a0      	cmp	r0, r4
 8008c2e:	d20f      	bcs.n	8008c50 <_realloc_r+0x48>
 8008c30:	4621      	mov	r1, r4
 8008c32:	4638      	mov	r0, r7
 8008c34:	f7ff fc5e 	bl	80084f4 <_malloc_r>
 8008c38:	4605      	mov	r5, r0
 8008c3a:	2800      	cmp	r0, #0
 8008c3c:	d0f2      	beq.n	8008c24 <_realloc_r+0x1c>
 8008c3e:	4631      	mov	r1, r6
 8008c40:	4622      	mov	r2, r4
 8008c42:	f7ff ffbd 	bl	8008bc0 <memcpy>
 8008c46:	4631      	mov	r1, r6
 8008c48:	4638      	mov	r0, r7
 8008c4a:	f7ff fc05 	bl	8008458 <_free_r>
 8008c4e:	e7e9      	b.n	8008c24 <_realloc_r+0x1c>
 8008c50:	4635      	mov	r5, r6
 8008c52:	e7e7      	b.n	8008c24 <_realloc_r+0x1c>

08008c54 <_malloc_usable_size_r>:
 8008c54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c58:	1f18      	subs	r0, r3, #4
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	bfbc      	itt	lt
 8008c5e:	580b      	ldrlt	r3, [r1, r0]
 8008c60:	18c0      	addlt	r0, r0, r3
 8008c62:	4770      	bx	lr

08008c64 <_init>:
 8008c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c66:	bf00      	nop
 8008c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c6a:	bc08      	pop	{r3}
 8008c6c:	469e      	mov	lr, r3
 8008c6e:	4770      	bx	lr

08008c70 <_fini>:
 8008c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c72:	bf00      	nop
 8008c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c76:	bc08      	pop	{r3}
 8008c78:	469e      	mov	lr, r3
 8008c7a:	4770      	bx	lr
