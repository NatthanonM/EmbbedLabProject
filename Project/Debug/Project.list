
Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b25c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4c4  0800b4c4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4c4  0800b4c4  0001b4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b4cc  0800b4cc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b4cc  0800b4cc  0001b4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b4d0  0800b4d0  0001b4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800b4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d40  20000094  0800b568  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004dd4  0800b568  00024dd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   000242f1  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004ced  00000000  00000000  000443b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001988  00000000  00000000  000490a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001790  00000000  00000000  0004aa30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026c77  00000000  00000000  0004c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001812d  00000000  00000000  00072e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d5b6d  00000000  00000000  0008af64  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00160ad1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b9c  00000000  00000000  00160b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3d4 	.word	0x0800b3d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800b3d4 	.word	0x0800b3d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b972 	b.w	80004dc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	4688      	mov	r8, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14b      	bne.n	80002b6 <__udivmoddi4+0xa6>
 800021e:	428a      	cmp	r2, r1
 8000220:	4615      	mov	r5, r2
 8000222:	d967      	bls.n	80002f4 <__udivmoddi4+0xe4>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0720 	rsb	r7, r2, #32
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	fa20 f707 	lsr.w	r7, r0, r7
 8000236:	4095      	lsls	r5, r2
 8000238:	ea47 0803 	orr.w	r8, r7, r3
 800023c:	4094      	lsls	r4, r2
 800023e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000242:	0c23      	lsrs	r3, r4, #16
 8000244:	fbb8 f7fe 	udiv	r7, r8, lr
 8000248:	fa1f fc85 	uxth.w	ip, r5
 800024c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000250:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000254:	fb07 f10c 	mul.w	r1, r7, ip
 8000258:	4299      	cmp	r1, r3
 800025a:	d909      	bls.n	8000270 <__udivmoddi4+0x60>
 800025c:	18eb      	adds	r3, r5, r3
 800025e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000262:	f080 811b 	bcs.w	800049c <__udivmoddi4+0x28c>
 8000266:	4299      	cmp	r1, r3
 8000268:	f240 8118 	bls.w	800049c <__udivmoddi4+0x28c>
 800026c:	3f02      	subs	r7, #2
 800026e:	442b      	add	r3, r5
 8000270:	1a5b      	subs	r3, r3, r1
 8000272:	b2a4      	uxth	r4, r4
 8000274:	fbb3 f0fe 	udiv	r0, r3, lr
 8000278:	fb0e 3310 	mls	r3, lr, r0, r3
 800027c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000280:	fb00 fc0c 	mul.w	ip, r0, ip
 8000284:	45a4      	cmp	ip, r4
 8000286:	d909      	bls.n	800029c <__udivmoddi4+0x8c>
 8000288:	192c      	adds	r4, r5, r4
 800028a:	f100 33ff 	add.w	r3, r0, #4294967295
 800028e:	f080 8107 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000292:	45a4      	cmp	ip, r4
 8000294:	f240 8104 	bls.w	80004a0 <__udivmoddi4+0x290>
 8000298:	3802      	subs	r0, #2
 800029a:	442c      	add	r4, r5
 800029c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a0:	eba4 040c 	sub.w	r4, r4, ip
 80002a4:	2700      	movs	r7, #0
 80002a6:	b11e      	cbz	r6, 80002b0 <__udivmoddi4+0xa0>
 80002a8:	40d4      	lsrs	r4, r2
 80002aa:	2300      	movs	r3, #0
 80002ac:	e9c6 4300 	strd	r4, r3, [r6]
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0xbe>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80eb 	beq.w	8000496 <__udivmoddi4+0x286>
 80002c0:	2700      	movs	r7, #0
 80002c2:	e9c6 0100 	strd	r0, r1, [r6]
 80002c6:	4638      	mov	r0, r7
 80002c8:	4639      	mov	r1, r7
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	fab3 f783 	clz	r7, r3
 80002d2:	2f00      	cmp	r7, #0
 80002d4:	d147      	bne.n	8000366 <__udivmoddi4+0x156>
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d302      	bcc.n	80002e0 <__udivmoddi4+0xd0>
 80002da:	4282      	cmp	r2, r0
 80002dc:	f200 80fa 	bhi.w	80004d4 <__udivmoddi4+0x2c4>
 80002e0:	1a84      	subs	r4, r0, r2
 80002e2:	eb61 0303 	sbc.w	r3, r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	4698      	mov	r8, r3
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	d0e0      	beq.n	80002b0 <__udivmoddi4+0xa0>
 80002ee:	e9c6 4800 	strd	r4, r8, [r6]
 80002f2:	e7dd      	b.n	80002b0 <__udivmoddi4+0xa0>
 80002f4:	b902      	cbnz	r2, 80002f8 <__udivmoddi4+0xe8>
 80002f6:	deff      	udf	#255	; 0xff
 80002f8:	fab2 f282 	clz	r2, r2
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f040 808f 	bne.w	8000420 <__udivmoddi4+0x210>
 8000302:	1b49      	subs	r1, r1, r5
 8000304:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000308:	fa1f f885 	uxth.w	r8, r5
 800030c:	2701      	movs	r7, #1
 800030e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fb0e 111c 	mls	r1, lr, ip, r1
 8000318:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031c:	fb08 f10c 	mul.w	r1, r8, ip
 8000320:	4299      	cmp	r1, r3
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x124>
 8000324:	18eb      	adds	r3, r5, r3
 8000326:	f10c 30ff 	add.w	r0, ip, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4299      	cmp	r1, r3
 800032e:	f200 80cd 	bhi.w	80004cc <__udivmoddi4+0x2bc>
 8000332:	4684      	mov	ip, r0
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb1 f0fe 	udiv	r0, r1, lr
 800033c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000340:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000344:	fb08 f800 	mul.w	r8, r8, r0
 8000348:	45a0      	cmp	r8, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x14c>
 800034c:	192c      	adds	r4, r5, r4
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x14a>
 8000354:	45a0      	cmp	r8, r4
 8000356:	f200 80b6 	bhi.w	80004c6 <__udivmoddi4+0x2b6>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 0408 	sub.w	r4, r4, r8
 8000360:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000364:	e79f      	b.n	80002a6 <__udivmoddi4+0x96>
 8000366:	f1c7 0c20 	rsb	ip, r7, #32
 800036a:	40bb      	lsls	r3, r7
 800036c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000370:	ea4e 0e03 	orr.w	lr, lr, r3
 8000374:	fa01 f407 	lsl.w	r4, r1, r7
 8000378:	fa20 f50c 	lsr.w	r5, r0, ip
 800037c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000380:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000384:	4325      	orrs	r5, r4
 8000386:	fbb3 f9f8 	udiv	r9, r3, r8
 800038a:	0c2c      	lsrs	r4, r5, #16
 800038c:	fb08 3319 	mls	r3, r8, r9, r3
 8000390:	fa1f fa8e 	uxth.w	sl, lr
 8000394:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000398:	fb09 f40a 	mul.w	r4, r9, sl
 800039c:	429c      	cmp	r4, r3
 800039e:	fa02 f207 	lsl.w	r2, r2, r7
 80003a2:	fa00 f107 	lsl.w	r1, r0, r7
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b0:	f080 8087 	bcs.w	80004c2 <__udivmoddi4+0x2b2>
 80003b4:	429c      	cmp	r4, r3
 80003b6:	f240 8084 	bls.w	80004c2 <__udivmoddi4+0x2b2>
 80003ba:	f1a9 0902 	sub.w	r9, r9, #2
 80003be:	4473      	add	r3, lr
 80003c0:	1b1b      	subs	r3, r3, r4
 80003c2:	b2ad      	uxth	r5, r5
 80003c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c8:	fb08 3310 	mls	r3, r8, r0, r3
 80003cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1e 0404 	adds.w	r4, lr, r4
 80003dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e0:	d26b      	bcs.n	80004ba <__udivmoddi4+0x2aa>
 80003e2:	45a2      	cmp	sl, r4
 80003e4:	d969      	bls.n	80004ba <__udivmoddi4+0x2aa>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4474      	add	r4, lr
 80003ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003ee:	fba0 8902 	umull	r8, r9, r0, r2
 80003f2:	eba4 040a 	sub.w	r4, r4, sl
 80003f6:	454c      	cmp	r4, r9
 80003f8:	46c2      	mov	sl, r8
 80003fa:	464b      	mov	r3, r9
 80003fc:	d354      	bcc.n	80004a8 <__udivmoddi4+0x298>
 80003fe:	d051      	beq.n	80004a4 <__udivmoddi4+0x294>
 8000400:	2e00      	cmp	r6, #0
 8000402:	d069      	beq.n	80004d8 <__udivmoddi4+0x2c8>
 8000404:	ebb1 050a 	subs.w	r5, r1, sl
 8000408:	eb64 0403 	sbc.w	r4, r4, r3
 800040c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000410:	40fd      	lsrs	r5, r7
 8000412:	40fc      	lsrs	r4, r7
 8000414:	ea4c 0505 	orr.w	r5, ip, r5
 8000418:	e9c6 5400 	strd	r5, r4, [r6]
 800041c:	2700      	movs	r7, #0
 800041e:	e747      	b.n	80002b0 <__udivmoddi4+0xa0>
 8000420:	f1c2 0320 	rsb	r3, r2, #32
 8000424:	fa20 f703 	lsr.w	r7, r0, r3
 8000428:	4095      	lsls	r5, r2
 800042a:	fa01 f002 	lsl.w	r0, r1, r2
 800042e:	fa21 f303 	lsr.w	r3, r1, r3
 8000432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000436:	4338      	orrs	r0, r7
 8000438:	0c01      	lsrs	r1, r0, #16
 800043a:	fbb3 f7fe 	udiv	r7, r3, lr
 800043e:	fa1f f885 	uxth.w	r8, r5
 8000442:	fb0e 3317 	mls	r3, lr, r7, r3
 8000446:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044a:	fb07 f308 	mul.w	r3, r7, r8
 800044e:	428b      	cmp	r3, r1
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x256>
 8000456:	1869      	adds	r1, r5, r1
 8000458:	f107 3cff 	add.w	ip, r7, #4294967295
 800045c:	d22f      	bcs.n	80004be <__udivmoddi4+0x2ae>
 800045e:	428b      	cmp	r3, r1
 8000460:	d92d      	bls.n	80004be <__udivmoddi4+0x2ae>
 8000462:	3f02      	subs	r7, #2
 8000464:	4429      	add	r1, r5
 8000466:	1acb      	subs	r3, r1, r3
 8000468:	b281      	uxth	r1, r0
 800046a:	fbb3 f0fe 	udiv	r0, r3, lr
 800046e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb00 f308 	mul.w	r3, r0, r8
 800047a:	428b      	cmp	r3, r1
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x27e>
 800047e:	1869      	adds	r1, r5, r1
 8000480:	f100 3cff 	add.w	ip, r0, #4294967295
 8000484:	d217      	bcs.n	80004b6 <__udivmoddi4+0x2a6>
 8000486:	428b      	cmp	r3, r1
 8000488:	d915      	bls.n	80004b6 <__udivmoddi4+0x2a6>
 800048a:	3802      	subs	r0, #2
 800048c:	4429      	add	r1, r5
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000494:	e73b      	b.n	800030e <__udivmoddi4+0xfe>
 8000496:	4637      	mov	r7, r6
 8000498:	4630      	mov	r0, r6
 800049a:	e709      	b.n	80002b0 <__udivmoddi4+0xa0>
 800049c:	4607      	mov	r7, r0
 800049e:	e6e7      	b.n	8000270 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fb      	b.n	800029c <__udivmoddi4+0x8c>
 80004a4:	4541      	cmp	r1, r8
 80004a6:	d2ab      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ac:	eb69 020e 	sbc.w	r2, r9, lr
 80004b0:	3801      	subs	r0, #1
 80004b2:	4613      	mov	r3, r2
 80004b4:	e7a4      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b6:	4660      	mov	r0, ip
 80004b8:	e7e9      	b.n	800048e <__udivmoddi4+0x27e>
 80004ba:	4618      	mov	r0, r3
 80004bc:	e795      	b.n	80003ea <__udivmoddi4+0x1da>
 80004be:	4667      	mov	r7, ip
 80004c0:	e7d1      	b.n	8000466 <__udivmoddi4+0x256>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e77c      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c6:	3802      	subs	r0, #2
 80004c8:	442c      	add	r4, r5
 80004ca:	e747      	b.n	800035c <__udivmoddi4+0x14c>
 80004cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d0:	442b      	add	r3, r5
 80004d2:	e72f      	b.n	8000334 <__udivmoddi4+0x124>
 80004d4:	4638      	mov	r0, r7
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xda>
 80004d8:	4637      	mov	r7, r6
 80004da:	e6e9      	b.n	80002b0 <__udivmoddi4+0xa0>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e4:	4b0e      	ldr	r3, [pc, #56]	; (8000520 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	; (8000520 <HAL_Init+0x40>)
 80004ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <HAL_Init+0x40>)
 80004f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a07      	ldr	r2, [pc, #28]	; (8000520 <HAL_Init+0x40>)
 8000502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000506:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000508:	2003      	movs	r0, #3
 800050a:	f000 f94d 	bl	80007a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800050e:	200f      	movs	r0, #15
 8000510:	f000 f808 	bl	8000524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000514:	f00a f94a 	bl	800a7ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000518:	2300      	movs	r3, #0
}
 800051a:	4618      	mov	r0, r3
 800051c:	bd80      	pop	{r7, pc}
 800051e:	bf00      	nop
 8000520:	40023c00 	.word	0x40023c00

08000524 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800052c:	4b12      	ldr	r3, [pc, #72]	; (8000578 <HAL_InitTick+0x54>)
 800052e:	681a      	ldr	r2, [r3, #0]
 8000530:	4b12      	ldr	r3, [pc, #72]	; (800057c <HAL_InitTick+0x58>)
 8000532:	781b      	ldrb	r3, [r3, #0]
 8000534:	4619      	mov	r1, r3
 8000536:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800053a:	fbb3 f3f1 	udiv	r3, r3, r1
 800053e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f000 f965 	bl	8000812 <HAL_SYSTICK_Config>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800054e:	2301      	movs	r3, #1
 8000550:	e00e      	b.n	8000570 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	2b0f      	cmp	r3, #15
 8000556:	d80a      	bhi.n	800056e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000558:	2200      	movs	r2, #0
 800055a:	6879      	ldr	r1, [r7, #4]
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f000 f92d 	bl	80007be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000564:	4a06      	ldr	r2, [pc, #24]	; (8000580 <HAL_InitTick+0x5c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800056a:	2300      	movs	r3, #0
 800056c:	e000      	b.n	8000570 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800056e:	2301      	movs	r3, #1
}
 8000570:	4618      	mov	r0, r3
 8000572:	3708      	adds	r7, #8
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	2000002c 	.word	0x2000002c
 800057c:	20000004 	.word	0x20000004
 8000580:	20000000 	.word	0x20000000

08000584 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <HAL_IncTick+0x20>)
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_IncTick+0x24>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4413      	add	r3, r2
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HAL_IncTick+0x24>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	20000004 	.word	0x20000004
 80005a8:	200045b4 	.word	0x200045b4

080005ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  return uwTick;
 80005b0:	4b03      	ldr	r3, [pc, #12]	; (80005c0 <HAL_GetTick+0x14>)
 80005b2:	681b      	ldr	r3, [r3, #0]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	200045b4 	.word	0x200045b4

080005c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005cc:	f7ff ffee 	bl	80005ac <HAL_GetTick>
 80005d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005dc:	d005      	beq.n	80005ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005de:	4b09      	ldr	r3, [pc, #36]	; (8000604 <HAL_Delay+0x40>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	461a      	mov	r2, r3
 80005e4:	68fb      	ldr	r3, [r7, #12]
 80005e6:	4413      	add	r3, r2
 80005e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ea:	bf00      	nop
 80005ec:	f7ff ffde 	bl	80005ac <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	68fa      	ldr	r2, [r7, #12]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8f7      	bhi.n	80005ec <HAL_Delay+0x28>
  {
  }
}
 80005fc:	bf00      	nop
 80005fe:	3710      	adds	r7, #16
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000004 	.word	0x20000004

08000608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f003 0307 	and.w	r3, r3, #7
 8000616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800061a:	68db      	ldr	r3, [r3, #12]
 800061c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000624:	4013      	ands	r3, r2
 8000626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800062c:	68bb      	ldr	r3, [r7, #8]
 800062e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000630:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800063a:	4a04      	ldr	r2, [pc, #16]	; (800064c <__NVIC_SetPriorityGrouping+0x44>)
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	60d3      	str	r3, [r2, #12]
}
 8000640:	bf00      	nop
 8000642:	3714      	adds	r7, #20
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	e000ed00 	.word	0xe000ed00

08000650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <__NVIC_GetPriorityGrouping+0x18>)
 8000656:	68db      	ldr	r3, [r3, #12]
 8000658:	0a1b      	lsrs	r3, r3, #8
 800065a:	f003 0307 	and.w	r3, r3, #7
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	2b00      	cmp	r3, #0
 800067c:	db0b      	blt.n	8000696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f003 021f 	and.w	r2, r3, #31
 8000684:	4907      	ldr	r1, [pc, #28]	; (80006a4 <__NVIC_EnableIRQ+0x38>)
 8000686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800068a:	095b      	lsrs	r3, r3, #5
 800068c:	2001      	movs	r0, #1
 800068e:	fa00 f202 	lsl.w	r2, r0, r2
 8000692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	6039      	str	r1, [r7, #0]
 80006b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	db0a      	blt.n	80006d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	490c      	ldr	r1, [pc, #48]	; (80006f4 <__NVIC_SetPriority+0x4c>)
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	0112      	lsls	r2, r2, #4
 80006c8:	b2d2      	uxtb	r2, r2
 80006ca:	440b      	add	r3, r1
 80006cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006d0:	e00a      	b.n	80006e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	b2da      	uxtb	r2, r3
 80006d6:	4908      	ldr	r1, [pc, #32]	; (80006f8 <__NVIC_SetPriority+0x50>)
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	f003 030f 	and.w	r3, r3, #15
 80006de:	3b04      	subs	r3, #4
 80006e0:	0112      	lsls	r2, r2, #4
 80006e2:	b2d2      	uxtb	r2, r2
 80006e4:	440b      	add	r3, r1
 80006e6:	761a      	strb	r2, [r3, #24]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000e100 	.word	0xe000e100
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b089      	sub	sp, #36	; 0x24
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f003 0307 	and.w	r3, r3, #7
 800070e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000710:	69fb      	ldr	r3, [r7, #28]
 8000712:	f1c3 0307 	rsb	r3, r3, #7
 8000716:	2b04      	cmp	r3, #4
 8000718:	bf28      	it	cs
 800071a:	2304      	movcs	r3, #4
 800071c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800071e:	69fb      	ldr	r3, [r7, #28]
 8000720:	3304      	adds	r3, #4
 8000722:	2b06      	cmp	r3, #6
 8000724:	d902      	bls.n	800072c <NVIC_EncodePriority+0x30>
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3b03      	subs	r3, #3
 800072a:	e000      	b.n	800072e <NVIC_EncodePriority+0x32>
 800072c:	2300      	movs	r3, #0
 800072e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000730:	f04f 32ff 	mov.w	r2, #4294967295
 8000734:	69bb      	ldr	r3, [r7, #24]
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43da      	mvns	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	401a      	ands	r2, r3
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000744:	f04f 31ff 	mov.w	r1, #4294967295
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa01 f303 	lsl.w	r3, r1, r3
 800074e:	43d9      	mvns	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	4313      	orrs	r3, r2
         );
}
 8000756:	4618      	mov	r0, r3
 8000758:	3724      	adds	r7, #36	; 0x24
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
	...

08000764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	3b01      	subs	r3, #1
 8000770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000774:	d301      	bcc.n	800077a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000776:	2301      	movs	r3, #1
 8000778:	e00f      	b.n	800079a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <SysTick_Config+0x40>)
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	3b01      	subs	r3, #1
 8000780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000782:	210f      	movs	r1, #15
 8000784:	f04f 30ff 	mov.w	r0, #4294967295
 8000788:	f7ff ff8e 	bl	80006a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <SysTick_Config+0x40>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SysTick_Config+0x40>)
 8000794:	2207      	movs	r2, #7
 8000796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000798:	2300      	movs	r3, #0
}
 800079a:	4618      	mov	r0, r3
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	e000e010 	.word	0xe000e010

080007a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007b0:	6878      	ldr	r0, [r7, #4]
 80007b2:	f7ff ff29 	bl	8000608 <__NVIC_SetPriorityGrouping>
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007be:	b580      	push	{r7, lr}
 80007c0:	b086      	sub	sp, #24
 80007c2:	af00      	add	r7, sp, #0
 80007c4:	4603      	mov	r3, r0
 80007c6:	60b9      	str	r1, [r7, #8]
 80007c8:	607a      	str	r2, [r7, #4]
 80007ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007cc:	2300      	movs	r3, #0
 80007ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007d0:	f7ff ff3e 	bl	8000650 <__NVIC_GetPriorityGrouping>
 80007d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007d6:	687a      	ldr	r2, [r7, #4]
 80007d8:	68b9      	ldr	r1, [r7, #8]
 80007da:	6978      	ldr	r0, [r7, #20]
 80007dc:	f7ff ff8e 	bl	80006fc <NVIC_EncodePriority>
 80007e0:	4602      	mov	r2, r0
 80007e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007e6:	4611      	mov	r1, r2
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff ff5d 	bl	80006a8 <__NVIC_SetPriority>
}
 80007ee:	bf00      	nop
 80007f0:	3718      	adds	r7, #24
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}

080007f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007f6:	b580      	push	{r7, lr}
 80007f8:	b082      	sub	sp, #8
 80007fa:	af00      	add	r7, sp, #0
 80007fc:	4603      	mov	r3, r0
 80007fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ff31 	bl	800066c <__NVIC_EnableIRQ>
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000812:	b580      	push	{r7, lr}
 8000814:	b082      	sub	sp, #8
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800081a:	6878      	ldr	r0, [r7, #4]
 800081c:	f7ff ffa2 	bl	8000764 <SysTick_Config>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
	...

0800082c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
 8000846:	e16b      	b.n	8000b20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000848:	2201      	movs	r2, #1
 800084a:	69fb      	ldr	r3, [r7, #28]
 800084c:	fa02 f303 	lsl.w	r3, r2, r3
 8000850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	697a      	ldr	r2, [r7, #20]
 8000858:	4013      	ands	r3, r2
 800085a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800085c:	693a      	ldr	r2, [r7, #16]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	429a      	cmp	r2, r3
 8000862:	f040 815a 	bne.w	8000b1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	685b      	ldr	r3, [r3, #4]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d00b      	beq.n	8000886 <HAL_GPIO_Init+0x5a>
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	685b      	ldr	r3, [r3, #4]
 8000872:	2b02      	cmp	r3, #2
 8000874:	d007      	beq.n	8000886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800087a:	2b11      	cmp	r3, #17
 800087c:	d003      	beq.n	8000886 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	2b12      	cmp	r3, #18
 8000884:	d130      	bne.n	80008e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	689b      	ldr	r3, [r3, #8]
 800088a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800088c:	69fb      	ldr	r3, [r7, #28]
 800088e:	005b      	lsls	r3, r3, #1
 8000890:	2203      	movs	r2, #3
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	4013      	ands	r3, r2
 800089c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	68da      	ldr	r2, [r3, #12]
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	fa02 f303 	lsl.w	r3, r2, r3
 80008aa:	69ba      	ldr	r2, [r7, #24]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	69ba      	ldr	r2, [r7, #24]
 80008b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008bc:	2201      	movs	r2, #1
 80008be:	69fb      	ldr	r3, [r7, #28]
 80008c0:	fa02 f303 	lsl.w	r3, r2, r3
 80008c4:	43db      	mvns	r3, r3
 80008c6:	69ba      	ldr	r2, [r7, #24]
 80008c8:	4013      	ands	r3, r2
 80008ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	091b      	lsrs	r3, r3, #4
 80008d2:	f003 0201 	and.w	r2, r3, #1
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	69ba      	ldr	r2, [r7, #24]
 80008de:	4313      	orrs	r3, r2
 80008e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	69ba      	ldr	r2, [r7, #24]
 80008e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	2203      	movs	r2, #3
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	689a      	ldr	r2, [r3, #8]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	fa02 f303 	lsl.w	r3, r2, r3
 800090c:	69ba      	ldr	r2, [r7, #24]
 800090e:	4313      	orrs	r3, r2
 8000910:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d003      	beq.n	8000928 <HAL_GPIO_Init+0xfc>
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	2b12      	cmp	r3, #18
 8000926:	d123      	bne.n	8000970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	08da      	lsrs	r2, r3, #3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	3208      	adds	r2, #8
 8000930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	f003 0307 	and.w	r3, r3, #7
 800093c:	009b      	lsls	r3, r3, #2
 800093e:	220f      	movs	r2, #15
 8000940:	fa02 f303 	lsl.w	r3, r2, r3
 8000944:	43db      	mvns	r3, r3
 8000946:	69ba      	ldr	r2, [r7, #24]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	691a      	ldr	r2, [r3, #16]
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	009b      	lsls	r3, r3, #2
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	69ba      	ldr	r2, [r7, #24]
 800095e:	4313      	orrs	r3, r2
 8000960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	08da      	lsrs	r2, r3, #3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3208      	adds	r2, #8
 800096a:	69b9      	ldr	r1, [r7, #24]
 800096c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	005b      	lsls	r3, r3, #1
 800097a:	2203      	movs	r2, #3
 800097c:	fa02 f303 	lsl.w	r3, r2, r3
 8000980:	43db      	mvns	r3, r3
 8000982:	69ba      	ldr	r2, [r7, #24]
 8000984:	4013      	ands	r3, r2
 8000986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f003 0203 	and.w	r2, r3, #3
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	69ba      	ldr	r2, [r7, #24]
 800099a:	4313      	orrs	r3, r2
 800099c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	685b      	ldr	r3, [r3, #4]
 80009a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	f000 80b4 	beq.w	8000b1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	4b5f      	ldr	r3, [pc, #380]	; (8000b34 <HAL_GPIO_Init+0x308>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ba:	4a5e      	ldr	r2, [pc, #376]	; (8000b34 <HAL_GPIO_Init+0x308>)
 80009bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009c0:	6453      	str	r3, [r2, #68]	; 0x44
 80009c2:	4b5c      	ldr	r3, [pc, #368]	; (8000b34 <HAL_GPIO_Init+0x308>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009ce:	4a5a      	ldr	r2, [pc, #360]	; (8000b38 <HAL_GPIO_Init+0x30c>)
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	089b      	lsrs	r3, r3, #2
 80009d4:	3302      	adds	r3, #2
 80009d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	f003 0303 	and.w	r3, r3, #3
 80009e2:	009b      	lsls	r3, r3, #2
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ea:	43db      	mvns	r3, r3
 80009ec:	69ba      	ldr	r2, [r7, #24]
 80009ee:	4013      	ands	r3, r2
 80009f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4a51      	ldr	r2, [pc, #324]	; (8000b3c <HAL_GPIO_Init+0x310>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d02b      	beq.n	8000a52 <HAL_GPIO_Init+0x226>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	4a50      	ldr	r2, [pc, #320]	; (8000b40 <HAL_GPIO_Init+0x314>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d025      	beq.n	8000a4e <HAL_GPIO_Init+0x222>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a4f      	ldr	r2, [pc, #316]	; (8000b44 <HAL_GPIO_Init+0x318>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d01f      	beq.n	8000a4a <HAL_GPIO_Init+0x21e>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4a4e      	ldr	r2, [pc, #312]	; (8000b48 <HAL_GPIO_Init+0x31c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d019      	beq.n	8000a46 <HAL_GPIO_Init+0x21a>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a4d      	ldr	r2, [pc, #308]	; (8000b4c <HAL_GPIO_Init+0x320>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d013      	beq.n	8000a42 <HAL_GPIO_Init+0x216>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <HAL_GPIO_Init+0x324>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d00d      	beq.n	8000a3e <HAL_GPIO_Init+0x212>
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	4a4b      	ldr	r2, [pc, #300]	; (8000b54 <HAL_GPIO_Init+0x328>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d007      	beq.n	8000a3a <HAL_GPIO_Init+0x20e>
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4a4a      	ldr	r2, [pc, #296]	; (8000b58 <HAL_GPIO_Init+0x32c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d101      	bne.n	8000a36 <HAL_GPIO_Init+0x20a>
 8000a32:	2307      	movs	r3, #7
 8000a34:	e00e      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a36:	2308      	movs	r3, #8
 8000a38:	e00c      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	e00a      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a3e:	2305      	movs	r3, #5
 8000a40:	e008      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a42:	2304      	movs	r3, #4
 8000a44:	e006      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a46:	2303      	movs	r3, #3
 8000a48:	e004      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	e002      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x228>
 8000a52:	2300      	movs	r3, #0
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	f002 0203 	and.w	r2, r2, #3
 8000a5a:	0092      	lsls	r2, r2, #2
 8000a5c:	4093      	lsls	r3, r2
 8000a5e:	69ba      	ldr	r2, [r7, #24]
 8000a60:	4313      	orrs	r3, r2
 8000a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a64:	4934      	ldr	r1, [pc, #208]	; (8000b38 <HAL_GPIO_Init+0x30c>)
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	089b      	lsrs	r3, r3, #2
 8000a6a:	3302      	adds	r3, #2
 8000a6c:	69ba      	ldr	r2, [r7, #24]
 8000a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a72:	4b3a      	ldr	r3, [pc, #232]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	43db      	mvns	r3, r3
 8000a7c:	69ba      	ldr	r2, [r7, #24]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d003      	beq.n	8000a96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000a8e:	69ba      	ldr	r2, [r7, #24]
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	4313      	orrs	r3, r2
 8000a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a96:	4a31      	ldr	r2, [pc, #196]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000a98:	69bb      	ldr	r3, [r7, #24]
 8000a9a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aa2:	693b      	ldr	r3, [r7, #16]
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	685b      	ldr	r3, [r3, #4]
 8000ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d003      	beq.n	8000ac0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ab8:	69ba      	ldr	r2, [r7, #24]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000ac2:	69bb      	ldr	r3, [r7, #24]
 8000ac4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ac6:	4b25      	ldr	r3, [pc, #148]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	43db      	mvns	r3, r3
 8000ad0:	69ba      	ldr	r2, [r7, #24]
 8000ad2:	4013      	ands	r3, r2
 8000ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d003      	beq.n	8000aea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ae2:	69ba      	ldr	r2, [r7, #24]
 8000ae4:	693b      	ldr	r3, [r7, #16]
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000aea:	4a1c      	ldr	r2, [pc, #112]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000af6:	693b      	ldr	r3, [r7, #16]
 8000af8:	43db      	mvns	r3, r3
 8000afa:	69ba      	ldr	r2, [r7, #24]
 8000afc:	4013      	ands	r3, r2
 8000afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	685b      	ldr	r3, [r3, #4]
 8000b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d003      	beq.n	8000b14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000b0c:	69ba      	ldr	r2, [r7, #24]
 8000b0e:	693b      	ldr	r3, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b14:	4a11      	ldr	r2, [pc, #68]	; (8000b5c <HAL_GPIO_Init+0x330>)
 8000b16:	69bb      	ldr	r3, [r7, #24]
 8000b18:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b1a:	69fb      	ldr	r3, [r7, #28]
 8000b1c:	3301      	adds	r3, #1
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	69fb      	ldr	r3, [r7, #28]
 8000b22:	2b0f      	cmp	r3, #15
 8000b24:	f67f ae90 	bls.w	8000848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b28:	bf00      	nop
 8000b2a:	3724      	adds	r7, #36	; 0x24
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40013800 	.word	0x40013800
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40021000 	.word	0x40021000
 8000b50:	40021400 	.word	0x40021400
 8000b54:	40021800 	.word	0x40021800
 8000b58:	40021c00 	.word	0x40021c00
 8000b5c:	40013c00 	.word	0x40013c00

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	619a      	str	r2, [r3, #24]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b92:	b480      	push	{r7}
 8000b94:	b083      	sub	sp, #12
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	695a      	ldr	r2, [r3, #20]
 8000ba2:	887b      	ldrh	r3, [r7, #2]
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	887b      	ldrh	r3, [r7, #2]
 8000ba8:	429a      	cmp	r2, r3
 8000baa:	d104      	bne.n	8000bb6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000bac:	887b      	ldrh	r3, [r7, #2]
 8000bae:	041a      	lsls	r2, r3, #16
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bb4:	e002      	b.n	8000bbc <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bb6:	887a      	ldrh	r2, [r7, #2]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	619a      	str	r2, [r3, #24]
}
 8000bbc:	bf00      	nop
 8000bbe:	370c      	adds	r7, #12
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8000bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bca:	b08f      	sub	sp, #60	; 0x3c
 8000bcc:	af0a      	add	r7, sp, #40	; 0x28
 8000bce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e054      	b.n	8000c84 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d106      	bne.n	8000bfa <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f00a f80d 	bl	800ac14 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2200      	movs	r2, #0
 8000c12:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f003 fd37 	bl	800468c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	603b      	str	r3, [r7, #0]
 8000c24:	687e      	ldr	r6, [r7, #4]
 8000c26:	466d      	mov	r5, sp
 8000c28:	f106 0410 	add.w	r4, r6, #16
 8000c2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c30:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c34:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c38:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c3c:	1d33      	adds	r3, r6, #4
 8000c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c40:	6838      	ldr	r0, [r7, #0]
 8000c42:	f003 fcb1 	bl	80045a8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	2101      	movs	r1, #1
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fd2e 	bl	80046ae <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	687e      	ldr	r6, [r7, #4]
 8000c5a:	466d      	mov	r5, sp
 8000c5c:	f106 0410 	add.w	r4, r6, #16
 8000c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c64:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000c66:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000c68:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000c6c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000c70:	1d33      	adds	r3, r6, #4
 8000c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f003 fe41 	bl	80048fc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c8c <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b089      	sub	sp, #36	; 0x24
 8000c90:	af04      	add	r7, sp, #16
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	4608      	mov	r0, r1
 8000c96:	4611      	mov	r1, r2
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	70fb      	strb	r3, [r7, #3]
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	70bb      	strb	r3, [r7, #2]
 8000ca2:	4613      	mov	r3, r2
 8000ca4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d101      	bne.n	8000cb4 <HAL_HCD_HC_Init+0x28>
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	e07f      	b.n	8000db4 <HAL_HCD_HC_Init+0x128>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8000cbc:	78fa      	ldrb	r2, [r7, #3]
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	4413      	add	r3, r2
 8000cc6:	00db      	lsls	r3, r3, #3
 8000cc8:	440b      	add	r3, r1
 8000cca:	333d      	adds	r3, #61	; 0x3d
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000cd0:	78fa      	ldrb	r2, [r7, #3]
 8000cd2:	6879      	ldr	r1, [r7, #4]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	4413      	add	r3, r2
 8000cda:	00db      	lsls	r3, r3, #3
 8000cdc:	440b      	add	r3, r1
 8000cde:	3338      	adds	r3, #56	; 0x38
 8000ce0:	787a      	ldrb	r2, [r7, #1]
 8000ce2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8000ce4:	78fa      	ldrb	r2, [r7, #3]
 8000ce6:	6879      	ldr	r1, [r7, #4]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	009b      	lsls	r3, r3, #2
 8000cec:	4413      	add	r3, r2
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	440b      	add	r3, r1
 8000cf2:	3340      	adds	r3, #64	; 0x40
 8000cf4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8000cf6:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cf8:	78fa      	ldrb	r2, [r7, #3]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	4413      	add	r3, r2
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	440b      	add	r3, r1
 8000d06:	3339      	adds	r3, #57	; 0x39
 8000d08:	78fa      	ldrb	r2, [r7, #3]
 8000d0a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8000d0c:	78fa      	ldrb	r2, [r7, #3]
 8000d0e:	6879      	ldr	r1, [r7, #4]
 8000d10:	4613      	mov	r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	4413      	add	r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	440b      	add	r3, r1
 8000d1a:	333f      	adds	r3, #63	; 0x3f
 8000d1c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8000d20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	78bb      	ldrb	r3, [r7, #2]
 8000d26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d2a:	b2d8      	uxtb	r0, r3
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	440b      	add	r3, r1
 8000d38:	333a      	adds	r3, #58	; 0x3a
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8000d3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	da0a      	bge.n	8000d5c <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000d46:	78fa      	ldrb	r2, [r7, #3]
 8000d48:	6879      	ldr	r1, [r7, #4]
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	440b      	add	r3, r1
 8000d54:	333b      	adds	r3, #59	; 0x3b
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
 8000d5a:	e009      	b.n	8000d70 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8000d5c:	78fa      	ldrb	r2, [r7, #3]
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	440b      	add	r3, r1
 8000d6a:	333b      	adds	r3, #59	; 0x3b
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8000d70:	78fa      	ldrb	r2, [r7, #3]
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	4613      	mov	r3, r2
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	4413      	add	r3, r2
 8000d7a:	00db      	lsls	r3, r3, #3
 8000d7c:	440b      	add	r3, r1
 8000d7e:	333c      	adds	r3, #60	; 0x3c
 8000d80:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000d84:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	6818      	ldr	r0, [r3, #0]
 8000d8a:	787c      	ldrb	r4, [r7, #1]
 8000d8c:	78ba      	ldrb	r2, [r7, #2]
 8000d8e:	78f9      	ldrb	r1, [r7, #3]
 8000d90:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000d92:	9302      	str	r3, [sp, #8]
 8000d94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d98:	9301      	str	r3, [sp, #4]
 8000d9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000d9e:	9300      	str	r3, [sp, #0]
 8000da0:	4623      	mov	r3, r4
 8000da2:	f003 ff2d 	bl	8004c00 <USB_HC_Init>
 8000da6:	4603      	mov	r3, r0
 8000da8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	2200      	movs	r2, #0
 8000dae:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3714      	adds	r7, #20
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd90      	pop	{r4, r7, pc}

08000dbc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d101      	bne.n	8000dda <HAL_HCD_HC_Halt+0x1e>
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	e00f      	b.n	8000dfa <HAL_HCD_HC_Halt+0x3e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2201      	movs	r2, #1
 8000dde:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	78fa      	ldrb	r2, [r7, #3]
 8000de8:	4611      	mov	r1, r2
 8000dea:	4618      	mov	r0, r3
 8000dec:	f004 f967 	bl	80050be <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2200      	movs	r2, #0
 8000df4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	4611      	mov	r1, r2
 8000e10:	461a      	mov	r2, r3
 8000e12:	4603      	mov	r3, r0
 8000e14:	70fb      	strb	r3, [r7, #3]
 8000e16:	460b      	mov	r3, r1
 8000e18:	70bb      	strb	r3, [r7, #2]
 8000e1a:	4613      	mov	r3, r2
 8000e1c:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8000e1e:	78fa      	ldrb	r2, [r7, #3]
 8000e20:	6879      	ldr	r1, [r7, #4]
 8000e22:	4613      	mov	r3, r2
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	4413      	add	r3, r2
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	440b      	add	r3, r1
 8000e2c:	333b      	adds	r3, #59	; 0x3b
 8000e2e:	78ba      	ldrb	r2, [r7, #2]
 8000e30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	6879      	ldr	r1, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	4413      	add	r3, r2
 8000e3c:	00db      	lsls	r3, r3, #3
 8000e3e:	440b      	add	r3, r1
 8000e40:	333f      	adds	r3, #63	; 0x3f
 8000e42:	787a      	ldrb	r2, [r7, #1]
 8000e44:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8000e46:	7c3b      	ldrb	r3, [r7, #16]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10a      	bne.n	8000e62 <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000e4c:	78fa      	ldrb	r2, [r7, #3]
 8000e4e:	6879      	ldr	r1, [r7, #4]
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	440b      	add	r3, r1
 8000e5a:	3342      	adds	r3, #66	; 0x42
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	701a      	strb	r2, [r3, #0]
 8000e60:	e009      	b.n	8000e76 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e62:	78fa      	ldrb	r2, [r7, #3]
 8000e64:	6879      	ldr	r1, [r7, #4]
 8000e66:	4613      	mov	r3, r2
 8000e68:	009b      	lsls	r3, r3, #2
 8000e6a:	4413      	add	r3, r2
 8000e6c:	00db      	lsls	r3, r3, #3
 8000e6e:	440b      	add	r3, r1
 8000e70:	3342      	adds	r3, #66	; 0x42
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000e76:	787b      	ldrb	r3, [r7, #1]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	f200 80d6 	bhi.w	800102a <HAL_HCD_HC_SubmitRequest+0x226>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <HAL_HCD_HC_SubmitRequest+0x80>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e95 	.word	0x08000e95
 8000e88:	08001015 	.word	0x08001015
 8000e8c:	08000f01 	.word	0x08000f01
 8000e90:	08000f8b 	.word	0x08000f8b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000e94:	7c3b      	ldrb	r3, [r7, #16]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	f040 80c9 	bne.w	800102e <HAL_HCD_HC_SubmitRequest+0x22a>
 8000e9c:	78bb      	ldrb	r3, [r7, #2]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f040 80c5 	bne.w	800102e <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8000ea4:	8b3b      	ldrh	r3, [r7, #24]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d109      	bne.n	8000ebe <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8000eaa:	78fa      	ldrb	r2, [r7, #3]
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4613      	mov	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	4413      	add	r3, r2
 8000eb4:	00db      	lsls	r3, r3, #3
 8000eb6:	440b      	add	r3, r1
 8000eb8:	3351      	adds	r3, #81	; 0x51
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	4413      	add	r3, r2
 8000ec8:	00db      	lsls	r3, r3, #3
 8000eca:	440b      	add	r3, r1
 8000ecc:	3351      	adds	r3, #81	; 0x51
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d10a      	bne.n	8000eea <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000ed4:	78fa      	ldrb	r2, [r7, #3]
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	4613      	mov	r3, r2
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	4413      	add	r3, r2
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	440b      	add	r3, r1
 8000ee2:	3342      	adds	r3, #66	; 0x42
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000ee8:	e0a1      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000eea:	78fa      	ldrb	r2, [r7, #3]
 8000eec:	6879      	ldr	r1, [r7, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	00db      	lsls	r3, r3, #3
 8000ef6:	440b      	add	r3, r1
 8000ef8:	3342      	adds	r3, #66	; 0x42
 8000efa:	2202      	movs	r2, #2
 8000efc:	701a      	strb	r2, [r3, #0]
      break;
 8000efe:	e096      	b.n	800102e <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d120      	bne.n	8000f48 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	4413      	add	r3, r2
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	440b      	add	r3, r1
 8000f14:	3351      	adds	r3, #81	; 0x51
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d10a      	bne.n	8000f32 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4613      	mov	r3, r2
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	440b      	add	r3, r1
 8000f2a:	3342      	adds	r3, #66	; 0x42
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8000f30:	e07e      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f32:	78fa      	ldrb	r2, [r7, #3]
 8000f34:	6879      	ldr	r1, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	00db      	lsls	r3, r3, #3
 8000f3e:	440b      	add	r3, r1
 8000f40:	3342      	adds	r3, #66	; 0x42
 8000f42:	2202      	movs	r2, #2
 8000f44:	701a      	strb	r2, [r3, #0]
      break;
 8000f46:	e073      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000f48:	78fa      	ldrb	r2, [r7, #3]
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	440b      	add	r3, r1
 8000f56:	3350      	adds	r3, #80	; 0x50
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d10a      	bne.n	8000f74 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000f5e:	78fa      	ldrb	r2, [r7, #3]
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	440b      	add	r3, r1
 8000f6c:	3342      	adds	r3, #66	; 0x42
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
      break;
 8000f72:	e05d      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000f74:	78fa      	ldrb	r2, [r7, #3]
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	4413      	add	r3, r2
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	440b      	add	r3, r1
 8000f82:	3342      	adds	r3, #66	; 0x42
 8000f84:	2202      	movs	r2, #2
 8000f86:	701a      	strb	r2, [r3, #0]
      break;
 8000f88:	e052      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8000f8a:	78bb      	ldrb	r3, [r7, #2]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d120      	bne.n	8000fd2 <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000f90:	78fa      	ldrb	r2, [r7, #3]
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	4613      	mov	r3, r2
 8000f96:	009b      	lsls	r3, r3, #2
 8000f98:	4413      	add	r3, r2
 8000f9a:	00db      	lsls	r3, r3, #3
 8000f9c:	440b      	add	r3, r1
 8000f9e:	3351      	adds	r3, #81	; 0x51
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d10a      	bne.n	8000fbc <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fa6:	78fa      	ldrb	r2, [r7, #3]
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3342      	adds	r3, #66	; 0x42
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8000fba:	e039      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	4613      	mov	r3, r2
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	3342      	adds	r3, #66	; 0x42
 8000fcc:	2202      	movs	r2, #2
 8000fce:	701a      	strb	r2, [r3, #0]
      break;
 8000fd0:	e02e      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000fd2:	78fa      	ldrb	r2, [r7, #3]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4413      	add	r3, r2
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	440b      	add	r3, r1
 8000fe0:	3350      	adds	r3, #80	; 0x50
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d10a      	bne.n	8000ffe <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000fe8:	78fa      	ldrb	r2, [r7, #3]
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	4613      	mov	r3, r2
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4413      	add	r3, r2
 8000ff2:	00db      	lsls	r3, r3, #3
 8000ff4:	440b      	add	r3, r1
 8000ff6:	3342      	adds	r3, #66	; 0x42
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
      break;
 8000ffc:	e018      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000ffe:	78fa      	ldrb	r2, [r7, #3]
 8001000:	6879      	ldr	r1, [r7, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	440b      	add	r3, r1
 800100c:	3342      	adds	r3, #66	; 0x42
 800100e:	2202      	movs	r2, #2
 8001010:	701a      	strb	r2, [r3, #0]
      break;
 8001012:	e00d      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001014:	78fa      	ldrb	r2, [r7, #3]
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	00db      	lsls	r3, r3, #3
 8001020:	440b      	add	r3, r1
 8001022:	3342      	adds	r3, #66	; 0x42
 8001024:	2200      	movs	r2, #0
 8001026:	701a      	strb	r2, [r3, #0]
      break;
 8001028:	e002      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 800102a:	bf00      	nop
 800102c:	e000      	b.n	8001030 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800102e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001030:	78fa      	ldrb	r2, [r7, #3]
 8001032:	6879      	ldr	r1, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	4413      	add	r3, r2
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	440b      	add	r3, r1
 800103e:	3344      	adds	r3, #68	; 0x44
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001044:	78fa      	ldrb	r2, [r7, #3]
 8001046:	8b39      	ldrh	r1, [r7, #24]
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	4613      	mov	r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4413      	add	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4403      	add	r3, r0
 8001054:	3348      	adds	r3, #72	; 0x48
 8001056:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001058:	78fa      	ldrb	r2, [r7, #3]
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	4613      	mov	r3, r2
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	4413      	add	r3, r2
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	440b      	add	r3, r1
 8001066:	335c      	adds	r3, #92	; 0x5c
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800106c:	78fa      	ldrb	r2, [r7, #3]
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	4613      	mov	r3, r2
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	4413      	add	r3, r2
 8001076:	00db      	lsls	r3, r3, #3
 8001078:	440b      	add	r3, r1
 800107a:	334c      	adds	r3, #76	; 0x4c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001080:	78fa      	ldrb	r2, [r7, #3]
 8001082:	6879      	ldr	r1, [r7, #4]
 8001084:	4613      	mov	r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	4413      	add	r3, r2
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	440b      	add	r3, r1
 800108e:	3339      	adds	r3, #57	; 0x39
 8001090:	78fa      	ldrb	r2, [r7, #3]
 8001092:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001094:	78fa      	ldrb	r2, [r7, #3]
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	4413      	add	r3, r2
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	440b      	add	r3, r1
 80010a2:	335d      	adds	r3, #93	; 0x5d
 80010a4:	2200      	movs	r2, #0
 80010a6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	78fa      	ldrb	r2, [r7, #3]
 80010ae:	4613      	mov	r3, r2
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	3338      	adds	r3, #56	; 0x38
 80010b8:	687a      	ldr	r2, [r7, #4]
 80010ba:	18d1      	adds	r1, r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	f003 fea6 	bl	8004e14 <USB_HC_StartXfer>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop

080010d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 fbc3 	bl	8004876 <USB_GetMode>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	f040 80f1 	bne.w	80012da <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4618      	mov	r0, r3
 80010fe:	f003 fba7 	bl	8004850 <USB_ReadInterrupts>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	f000 80e7 	beq.w	80012d8 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f003 fb9e 	bl	8004850 <USB_ReadInterrupts>
 8001114:	4603      	mov	r3, r0
 8001116:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800111a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800111e:	d104      	bne.n	800112a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001128:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fb8e 	bl	8004850 <USB_ReadInterrupts>
 8001134:	4603      	mov	r3, r0
 8001136:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800113e:	d104      	bne.n	800114a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001148:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fb7e 	bl	8004850 <USB_ReadInterrupts>
 8001154:	4603      	mov	r3, r0
 8001156:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800115a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800115e:	d104      	bne.n	800116a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001168:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fb6e 	bl	8004850 <USB_ReadInterrupts>
 8001174:	4603      	mov	r3, r0
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b02      	cmp	r3, #2
 800117c:	d103      	bne.n	8001186 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2202      	movs	r2, #2
 8001184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f003 fb60 	bl	8004850 <USB_ReadInterrupts>
 8001190:	4603      	mov	r3, r0
 8001192:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001196:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800119a:	d117      	bne.n	80011cc <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80011aa:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80011ae:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f009 fdad 	bl	800ad10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2101      	movs	r1, #1
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fc59 	bl	8004a74 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80011ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fb3d 	bl	8004850 <USB_ReadInterrupts>
 80011d6:	4603      	mov	r3, r0
 80011d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80011dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011e0:	d102      	bne.n	80011e8 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f001 f8c8 	bl	8002378 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f003 fb2f 	bl	8004850 <USB_ReadInterrupts>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	2b08      	cmp	r3, #8
 80011fa:	d106      	bne.n	800120a <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f009 fd6b 	bl	800acd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2208      	movs	r2, #8
 8001208:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f003 fb1e 	bl	8004850 <USB_ReadInterrupts>
 8001214:	4603      	mov	r3, r0
 8001216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800121e:	d138      	bne.n	8001292 <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f003 ff39 	bl	800509c <USB_HC_ReadInterrupt>
 800122a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	e025      	b.n	800127e <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	f003 030f 	and.w	r3, r3, #15
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	fa22 f303 	lsr.w	r3, r2, r3
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d018      	beq.n	8001278 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	015a      	lsls	r2, r3, #5
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4413      	add	r3, r2
 800124e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800125c:	d106      	bne.n	800126c <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	b2db      	uxtb	r3, r3
 8001262:	4619      	mov	r1, r3
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 f8cf 	bl	8001408 <HCD_HC_IN_IRQHandler>
 800126a:	e005      	b.n	8001278 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	b2db      	uxtb	r3, r3
 8001270:	4619      	mov	r1, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f000 fc5f 	bl	8001b36 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	429a      	cmp	r2, r3
 8001286:	d3d4      	bcc.n	8001232 <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f003 fada 	bl	8004850 <USB_ReadInterrupts>
 800129c:	4603      	mov	r3, r0
 800129e:	f003 0310 	and.w	r3, r3, #16
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d101      	bne.n	80012aa <HAL_HCD_IRQHandler+0x1d6>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_HCD_IRQHandler+0x1d8>
 80012aa:	2300      	movs	r3, #0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d014      	beq.n	80012da <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	699a      	ldr	r2, [r3, #24]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f022 0210 	bic.w	r2, r2, #16
 80012be:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f000 ffad 	bl	8002220 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	699a      	ldr	r2, [r3, #24]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f042 0210 	orr.w	r2, r2, #16
 80012d4:	619a      	str	r2, [r3, #24]
 80012d6:	e000      	b.n	80012da <HAL_HCD_IRQHandler+0x206>
      return;
 80012d8:	bf00      	nop
    }
  }
}
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d101      	bne.n	80012f6 <HAL_HCD_Start+0x16>
 80012f2:	2302      	movs	r3, #2
 80012f4:	e013      	b.n	800131e <HAL_HCD_Start+0x3e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2201      	movs	r2, #1
 80012fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f003 f9b1 	bl	800466a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2101      	movs	r1, #1
 800130e:	4618      	mov	r0, r3
 8001310:	f003 fc14 	bl	8004b3c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2200      	movs	r2, #0
 8001318:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001334:	2b01      	cmp	r3, #1
 8001336:	d101      	bne.n	800133c <HAL_HCD_Stop+0x16>
 8001338:	2302      	movs	r3, #2
 800133a:	e00d      	b.n	8001358 <HAL_HCD_Stop+0x32>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2201      	movs	r2, #1
 8001340:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fff3 	bl	8005334 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b082      	sub	sp, #8
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f003 fbbb 	bl	8004ae8 <USB_ResetPort>
 8001372:	4603      	mov	r3, r0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001388:	78fa      	ldrb	r2, [r7, #3]
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	4613      	mov	r3, r2
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	440b      	add	r3, r1
 8001396:	335c      	adds	r3, #92	; 0x5c
 8001398:	781b      	ldrb	r3, [r3, #0]
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
 80013ae:	460b      	mov	r3, r1
 80013b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80013b2:	78fa      	ldrb	r2, [r7, #3]
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	009b      	lsls	r3, r3, #2
 80013ba:	4413      	add	r3, r2
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	440b      	add	r3, r1
 80013c0:	334c      	adds	r3, #76	; 0x4c
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fbfd 	bl	8004bdc <USB_GetCurrentFrame>
 80013e2:	4603      	mov	r3, r0
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f003 fbd8 	bl	8004bae <USB_GetHostSpeed>
 80013fe:	4603      	mov	r3, r0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800141e:	78fb      	ldrb	r3, [r7, #3]
 8001420:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	015a      	lsls	r2, r3, #5
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4413      	add	r3, r2
 800142a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b04      	cmp	r3, #4
 8001436:	d119      	bne.n	800146c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	015a      	lsls	r2, r3, #5
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	4413      	add	r3, r2
 8001440:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001444:	461a      	mov	r2, r3
 8001446:	2304      	movs	r3, #4
 8001448:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	015a      	lsls	r2, r3, #5
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	4413      	add	r3, r2
 8001452:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	0151      	lsls	r1, r2, #5
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	440a      	add	r2, r1
 8001460:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001464:	f043 0302 	orr.w	r3, r3, #2
 8001468:	60d3      	str	r3, [r2, #12]
 800146a:	e095      	b.n	8001598 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	015a      	lsls	r2, r3, #5
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	4413      	add	r3, r2
 8001474:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	2b20      	cmp	r3, #32
 8001480:	d109      	bne.n	8001496 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	015a      	lsls	r2, r3, #5
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4413      	add	r3, r2
 800148a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800148e:	461a      	mov	r2, r3
 8001490:	2320      	movs	r3, #32
 8001492:	6093      	str	r3, [r2, #8]
 8001494:	e080      	b.n	8001598 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	4413      	add	r3, r2
 800149e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d134      	bne.n	8001516 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	015a      	lsls	r2, r3, #5
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4413      	add	r3, r2
 80014b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014b8:	68db      	ldr	r3, [r3, #12]
 80014ba:	68fa      	ldr	r2, [r7, #12]
 80014bc:	0151      	lsls	r1, r2, #5
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	440a      	add	r2, r1
 80014c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80014c6:	f043 0302 	orr.w	r3, r3, #2
 80014ca:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	4613      	mov	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	4413      	add	r3, r2
 80014d6:	00db      	lsls	r3, r3, #3
 80014d8:	440b      	add	r3, r1
 80014da:	335d      	adds	r3, #93	; 0x5d
 80014dc:	2205      	movs	r2, #5
 80014de:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	015a      	lsls	r2, r3, #5
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4413      	add	r3, r2
 80014e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014ec:	461a      	mov	r2, r3
 80014ee:	2310      	movs	r3, #16
 80014f0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80014fe:	461a      	mov	r2, r3
 8001500:	2308      	movs	r3, #8
 8001502:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	4611      	mov	r1, r2
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fdd5 	bl	80050be <USB_HC_Halt>
 8001514:	e040      	b.n	8001598 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	015a      	lsls	r2, r3, #5
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4413      	add	r3, r2
 800151e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800152c:	d134      	bne.n	8001598 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4413      	add	r3, r2
 8001536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	0151      	lsls	r1, r2, #5
 8001540:	693a      	ldr	r2, [r7, #16]
 8001542:	440a      	add	r2, r1
 8001544:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	4611      	mov	r1, r2
 8001558:	4618      	mov	r0, r3
 800155a:	f003 fdb0 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	015a      	lsls	r2, r3, #5
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4413      	add	r3, r2
 8001566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800156a:	461a      	mov	r2, r3
 800156c:	2310      	movs	r3, #16
 800156e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	009b      	lsls	r3, r3, #2
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	440b      	add	r3, r1
 800157e:	335d      	adds	r3, #93	; 0x5d
 8001580:	2208      	movs	r2, #8
 8001582:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	4413      	add	r3, r2
 800158c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001590:	461a      	mov	r2, r3
 8001592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001596:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	015a      	lsls	r2, r3, #5
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4413      	add	r3, r2
 80015a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ae:	d122      	bne.n	80015f6 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	015a      	lsls	r2, r3, #5
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	4413      	add	r3, r2
 80015b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	0151      	lsls	r1, r2, #5
 80015c2:	693a      	ldr	r2, [r7, #16]
 80015c4:	440a      	add	r2, r1
 80015c6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80015ca:	f043 0302 	orr.w	r3, r3, #2
 80015ce:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	b2d2      	uxtb	r2, r2
 80015d8:	4611      	mov	r1, r2
 80015da:	4618      	mov	r0, r3
 80015dc:	f003 fd6f 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	015a      	lsls	r2, r3, #5
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	4413      	add	r3, r2
 80015e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80015ec:	461a      	mov	r2, r3
 80015ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80015f4:	e29b      	b.n	8001b2e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b01      	cmp	r3, #1
 800160a:	f040 80c1 	bne.w	8001790 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	691b      	ldr	r3, [r3, #16]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01b      	beq.n	800164e <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	3348      	adds	r3, #72	; 0x48
 8001626:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	0159      	lsls	r1, r3, #5
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	440b      	add	r3, r1
 8001630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800163a:	1ad1      	subs	r1, r2, r3
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	4613      	mov	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	4413      	add	r3, r2
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	4403      	add	r3, r0
 800164a:	334c      	adds	r3, #76	; 0x4c
 800164c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4613      	mov	r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	335d      	adds	r3, #93	; 0x5d
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	4613      	mov	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4413      	add	r3, r2
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	440b      	add	r3, r1
 8001670:	3358      	adds	r3, #88	; 0x58
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	015a      	lsls	r2, r3, #5
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	4413      	add	r3, r2
 800167e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001682:	461a      	mov	r2, r3
 8001684:	2301      	movs	r3, #1
 8001686:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001688:	6879      	ldr	r1, [r7, #4]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	4613      	mov	r3, r2
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	4413      	add	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	440b      	add	r3, r1
 8001696:	333f      	adds	r3, #63	; 0x3f
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00a      	beq.n	80016b4 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800169e:	6879      	ldr	r1, [r7, #4]
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	333f      	adds	r3, #63	; 0x3f
 80016ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d121      	bne.n	80016f8 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	015a      	lsls	r2, r3, #5
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4413      	add	r3, r2
 80016bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	0151      	lsls	r1, r2, #5
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	440a      	add	r2, r1
 80016ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80016ce:	f043 0302 	orr.w	r3, r3, #2
 80016d2:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	b2d2      	uxtb	r2, r2
 80016dc:	4611      	mov	r1, r2
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 fced 	bl	80050be <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	015a      	lsls	r2, r3, #5
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4413      	add	r3, r2
 80016ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80016f0:	461a      	mov	r2, r3
 80016f2:	2310      	movs	r3, #16
 80016f4:	6093      	str	r3, [r2, #8]
 80016f6:	e034      	b.n	8001762 <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4613      	mov	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	4413      	add	r3, r2
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	440b      	add	r3, r1
 8001706:	333f      	adds	r3, #63	; 0x3f
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b03      	cmp	r3, #3
 800170c:	d129      	bne.n	8001762 <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	015a      	lsls	r2, r3, #5
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4413      	add	r3, r2
 8001716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	0151      	lsls	r1, r2, #5
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	440a      	add	r2, r1
 8001724:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001728:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800172c:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	68fa      	ldr	r2, [r7, #12]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	440b      	add	r3, r1
 800173c:	335c      	adds	r3, #92	; 0x5c
 800173e:	2201      	movs	r2, #1
 8001740:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	b2d8      	uxtb	r0, r3
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	68fa      	ldr	r2, [r7, #12]
 800174a:	4613      	mov	r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	4413      	add	r3, r2
 8001750:	00db      	lsls	r3, r3, #3
 8001752:	440b      	add	r3, r1
 8001754:	335c      	adds	r3, #92	; 0x5c
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4601      	mov	r1, r0
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f009 fae5 	bl	800ad2c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	3350      	adds	r3, #80	; 0x50
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	f083 0301 	eor.w	r3, r3, #1
 8001778:	b2d8      	uxtb	r0, r3
 800177a:	6879      	ldr	r1, [r7, #4]
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4613      	mov	r3, r2
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	4413      	add	r3, r2
 8001784:	00db      	lsls	r3, r3, #3
 8001786:	440b      	add	r3, r1
 8001788:	3350      	adds	r3, #80	; 0x50
 800178a:	4602      	mov	r2, r0
 800178c:	701a      	strb	r2, [r3, #0]
}
 800178e:	e1ce      	b.n	8001b2e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4413      	add	r3, r2
 8001798:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f040 80f1 	bne.w	800198a <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	0151      	lsls	r1, r2, #5
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	440a      	add	r2, r1
 80017be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80017c2:	f023 0302 	bic.w	r3, r3, #2
 80017c6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80017c8:	6879      	ldr	r1, [r7, #4]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4613      	mov	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	335d      	adds	r3, #93	; 0x5d
 80017d8:	781b      	ldrb	r3, [r3, #0]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d10a      	bne.n	80017f4 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80017de:	6879      	ldr	r1, [r7, #4]
 80017e0:	68fa      	ldr	r2, [r7, #12]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	440b      	add	r3, r1
 80017ec:	335c      	adds	r3, #92	; 0x5c
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
 80017f2:	e0b0      	b.n	8001956 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80017f4:	6879      	ldr	r1, [r7, #4]
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	440b      	add	r3, r1
 8001802:	335d      	adds	r3, #93	; 0x5d
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10a      	bne.n	8001820 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	335c      	adds	r3, #92	; 0x5c
 800181a:	2205      	movs	r2, #5
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	e09a      	b.n	8001956 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	335d      	adds	r3, #93	; 0x5d
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b06      	cmp	r3, #6
 8001834:	d00a      	beq.n	800184c <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	335d      	adds	r3, #93	; 0x5d
 8001846:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001848:	2b08      	cmp	r3, #8
 800184a:	d156      	bne.n	80018fa <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3358      	adds	r3, #88	; 0x58
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	1c59      	adds	r1, r3, #1
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	4403      	add	r3, r0
 800186e:	3358      	adds	r3, #88	; 0x58
 8001870:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8001872:	6879      	ldr	r1, [r7, #4]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	4613      	mov	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	440b      	add	r3, r1
 8001880:	3358      	adds	r3, #88	; 0x58
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b03      	cmp	r3, #3
 8001886:	d914      	bls.n	80018b2 <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3358      	adds	r3, #88	; 0x58
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	440b      	add	r3, r1
 80018aa:	335c      	adds	r3, #92	; 0x5c
 80018ac:	2204      	movs	r2, #4
 80018ae:	701a      	strb	r2, [r3, #0]
 80018b0:	e009      	b.n	80018c6 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80018b2:	6879      	ldr	r1, [r7, #4]
 80018b4:	68fa      	ldr	r2, [r7, #12]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	335c      	adds	r3, #92	; 0x5c
 80018c2:	2202      	movs	r2, #2
 80018c4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	015a      	lsls	r2, r3, #5
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4413      	add	r3, r2
 80018ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80018dc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80018e4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80018f2:	461a      	mov	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	6013      	str	r3, [r2, #0]
 80018f8:	e02d      	b.n	8001956 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	4613      	mov	r3, r2
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	440b      	add	r3, r1
 8001908:	335d      	adds	r3, #93	; 0x5d
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b03      	cmp	r3, #3
 800190e:	d122      	bne.n	8001956 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001910:	6879      	ldr	r1, [r7, #4]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4613      	mov	r3, r2
 8001916:	009b      	lsls	r3, r3, #2
 8001918:	4413      	add	r3, r2
 800191a:	00db      	lsls	r3, r3, #3
 800191c:	440b      	add	r3, r1
 800191e:	335c      	adds	r3, #92	; 0x5c
 8001920:	2202      	movs	r2, #2
 8001922:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	015a      	lsls	r2, r3, #5
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	4413      	add	r3, r2
 800192c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800193a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001942:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	015a      	lsls	r2, r3, #5
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4413      	add	r3, r2
 800194c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001950:	461a      	mov	r2, r3
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	015a      	lsls	r2, r3, #5
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4413      	add	r3, r2
 800195e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001962:	461a      	mov	r2, r3
 8001964:	2302      	movs	r3, #2
 8001966:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	b2d8      	uxtb	r0, r3
 800196c:	6879      	ldr	r1, [r7, #4]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	440b      	add	r3, r1
 800197a:	335c      	adds	r3, #92	; 0x5c
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	4601      	mov	r1, r0
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f009 f9d2 	bl	800ad2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8001988:	e0d1      	b.n	8001b2e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	015a      	lsls	r2, r3, #5
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800199c:	2b80      	cmp	r3, #128	; 0x80
 800199e:	d13e      	bne.n	8001a1e <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	015a      	lsls	r2, r3, #5
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4413      	add	r3, r2
 80019a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	0151      	lsls	r1, r2, #5
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	440a      	add	r2, r1
 80019b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80019ba:	f043 0302 	orr.w	r3, r3, #2
 80019be:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	68fa      	ldr	r2, [r7, #12]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3358      	adds	r3, #88	; 0x58
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	1c59      	adds	r1, r3, #1
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	4403      	add	r3, r0
 80019e2:	3358      	adds	r3, #88	; 0x58
 80019e4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	68fa      	ldr	r2, [r7, #12]
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	335d      	adds	r3, #93	; 0x5d
 80019f6:	2206      	movs	r2, #6
 80019f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fb5a 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	015a      	lsls	r2, r3, #5
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	4413      	add	r3, r2
 8001a12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a16:	461a      	mov	r2, r3
 8001a18:	2380      	movs	r3, #128	; 0x80
 8001a1a:	6093      	str	r3, [r2, #8]
}
 8001a1c:	e087      	b.n	8001b2e <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	015a      	lsls	r2, r3, #5
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4413      	add	r3, r2
 8001a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b10      	cmp	r3, #16
 8001a32:	d17c      	bne.n	8001b2e <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	333f      	adds	r3, #63	; 0x3f
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	2b03      	cmp	r3, #3
 8001a48:	d122      	bne.n	8001a90 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	440b      	add	r3, r1
 8001a58:	3358      	adds	r3, #88	; 0x58
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	015a      	lsls	r2, r3, #5
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4413      	add	r3, r2
 8001a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	68fa      	ldr	r2, [r7, #12]
 8001a6e:	0151      	lsls	r1, r2, #5
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	440a      	add	r2, r1
 8001a74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	b2d2      	uxtb	r2, r2
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 fb18 	bl	80050be <USB_HC_Halt>
 8001a8e:	e045      	b.n	8001b1c <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001a90:	6879      	ldr	r1, [r7, #4]
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	4613      	mov	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	4413      	add	r3, r2
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	440b      	add	r3, r1
 8001a9e:	333f      	adds	r3, #63	; 0x3f
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d00a      	beq.n	8001abc <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	440b      	add	r3, r1
 8001ab4:	333f      	adds	r3, #63	; 0x3f
 8001ab6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d12f      	bne.n	8001b1c <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001abc:	6879      	ldr	r1, [r7, #4]
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3358      	adds	r3, #88	; 0x58
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d121      	bne.n	8001b1c <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8001ad8:	6879      	ldr	r1, [r7, #4]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	440b      	add	r3, r1
 8001ae6:	335d      	adds	r3, #93	; 0x5d
 8001ae8:	2203      	movs	r2, #3
 8001aea:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	015a      	lsls	r2, r3, #5
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4413      	add	r3, r2
 8001af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	0151      	lsls	r1, r2, #5
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	440a      	add	r2, r1
 8001b02:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b06:	f043 0302 	orr.w	r3, r3, #2
 8001b0a:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	b2d2      	uxtb	r2, r2
 8001b14:	4611      	mov	r1, r2
 8001b16:	4618      	mov	r0, r3
 8001b18:	f003 fad1 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	015a      	lsls	r2, r3, #5
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4413      	add	r3, r2
 8001b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b28:	461a      	mov	r2, r3
 8001b2a:	2310      	movs	r3, #16
 8001b2c:	6093      	str	r3, [r2, #8]
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b086      	sub	sp, #24
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
 8001b3e:	460b      	mov	r3, r1
 8001b40:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001b4c:	78fb      	ldrb	r3, [r7, #3]
 8001b4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	015a      	lsls	r2, r3, #5
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	4413      	add	r3, r2
 8001b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f003 0304 	and.w	r3, r3, #4
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d119      	bne.n	8001b9a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	015a      	lsls	r2, r3, #5
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4413      	add	r3, r2
 8001b6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b72:	461a      	mov	r2, r3
 8001b74:	2304      	movs	r3, #4
 8001b76:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	015a      	lsls	r2, r3, #5
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4413      	add	r3, r2
 8001b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	0151      	lsls	r1, r2, #5
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	440a      	add	r2, r1
 8001b8e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8001b98:	e33e      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	015a      	lsls	r2, r3, #5
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	4413      	add	r3, r2
 8001ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0320 	and.w	r3, r3, #32
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d141      	bne.n	8001c34 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	015a      	lsls	r2, r3, #5
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	2320      	movs	r3, #32
 8001bc0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001bc2:	6879      	ldr	r1, [r7, #4]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	4413      	add	r3, r2
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	440b      	add	r3, r1
 8001bd0:	333d      	adds	r3, #61	; 0x3d
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 831f 	bne.w	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	68fa      	ldr	r2, [r7, #12]
 8001bde:	4613      	mov	r3, r2
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	4413      	add	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	440b      	add	r3, r1
 8001be8:	333d      	adds	r3, #61	; 0x3d
 8001bea:	2200      	movs	r2, #0
 8001bec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	440b      	add	r3, r1
 8001bfc:	335c      	adds	r3, #92	; 0x5c
 8001bfe:	2202      	movs	r2, #2
 8001c00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	015a      	lsls	r2, r3, #5
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4413      	add	r3, r2
 8001c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	0151      	lsls	r1, r2, #5
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	440a      	add	r2, r1
 8001c18:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001c1c:	f043 0302 	orr.w	r3, r3, #2
 8001c20:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68fa      	ldr	r2, [r7, #12]
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f003 fa46 	bl	80050be <USB_HC_Halt>
}
 8001c32:	e2f1      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	015a      	lsls	r2, r3, #5
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c46:	2b40      	cmp	r3, #64	; 0x40
 8001c48:	d13f      	bne.n	8001cca <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	68fa      	ldr	r2, [r7, #12]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	4413      	add	r3, r2
 8001c54:	00db      	lsls	r3, r3, #3
 8001c56:	440b      	add	r3, r1
 8001c58:	335d      	adds	r3, #93	; 0x5d
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	68fa      	ldr	r2, [r7, #12]
 8001c62:	4613      	mov	r3, r2
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	4413      	add	r3, r2
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	440b      	add	r3, r1
 8001c6c:	333d      	adds	r3, #61	; 0x3d
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	68fa      	ldr	r2, [r7, #12]
 8001c76:	4613      	mov	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	4413      	add	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	440b      	add	r3, r1
 8001c80:	3358      	adds	r3, #88	; 0x58
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	015a      	lsls	r2, r3, #5
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	4413      	add	r3, r2
 8001c8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	0151      	lsls	r1, r2, #5
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	440a      	add	r2, r1
 8001c9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f003 fa04 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	015a      	lsls	r2, r3, #5
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	2340      	movs	r3, #64	; 0x40
 8001cc6:	6093      	str	r3, [r2, #8]
}
 8001cc8:	e2a6      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	015a      	lsls	r2, r3, #5
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ce0:	d122      	bne.n	8001d28 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	0151      	lsls	r1, r2, #5
 8001cf4:	693a      	ldr	r2, [r7, #16]
 8001cf6:	440a      	add	r2, r1
 8001cf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	4611      	mov	r1, r2
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 f9d6 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	015a      	lsls	r2, r3, #5
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4413      	add	r3, r2
 8001d1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d1e:	461a      	mov	r2, r3
 8001d20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d24:	6093      	str	r3, [r2, #8]
}
 8001d26:	e277      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	015a      	lsls	r2, r3, #5
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	4413      	add	r3, r2
 8001d30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d135      	bne.n	8001daa <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4613      	mov	r3, r2
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	440b      	add	r3, r1
 8001d4c:	3358      	adds	r3, #88	; 0x58
 8001d4e:	2200      	movs	r2, #0
 8001d50:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	015a      	lsls	r2, r3, #5
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	4413      	add	r3, r2
 8001d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	68fa      	ldr	r2, [r7, #12]
 8001d62:	0151      	lsls	r1, r2, #5
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	440a      	add	r2, r1
 8001d68:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001d6c:	f043 0302 	orr.w	r3, r3, #2
 8001d70:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	b2d2      	uxtb	r2, r2
 8001d7a:	4611      	mov	r1, r2
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 f99e 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	015a      	lsls	r2, r3, #5
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4413      	add	r3, r2
 8001d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2301      	movs	r3, #1
 8001d92:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	68fa      	ldr	r2, [r7, #12]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	4413      	add	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	440b      	add	r3, r1
 8001da2:	335d      	adds	r3, #93	; 0x5d
 8001da4:	2201      	movs	r2, #1
 8001da6:	701a      	strb	r2, [r3, #0]
}
 8001da8:	e236      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	015a      	lsls	r2, r3, #5
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4413      	add	r3, r2
 8001db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b08      	cmp	r3, #8
 8001dbe:	d12b      	bne.n	8001e18 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	015a      	lsls	r2, r3, #5
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dcc:	461a      	mov	r2, r3
 8001dce:	2308      	movs	r3, #8
 8001dd0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	015a      	lsls	r2, r3, #5
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4413      	add	r3, r2
 8001dda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	0151      	lsls	r1, r2, #5
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	440a      	add	r2, r1
 8001de8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001dec:	f043 0302 	orr.w	r3, r3, #2
 8001df0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	4611      	mov	r1, r2
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f003 f95e 	bl	80050be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	440b      	add	r3, r1
 8001e10:	335d      	adds	r3, #93	; 0x5d
 8001e12:	2205      	movs	r2, #5
 8001e14:	701a      	strb	r2, [r3, #0]
}
 8001e16:	e1ff      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	015a      	lsls	r2, r3, #5
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d155      	bne.n	8001eda <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	440b      	add	r3, r1
 8001e3c:	3358      	adds	r3, #88	; 0x58
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8001e42:	6879      	ldr	r1, [r7, #4]
 8001e44:	68fa      	ldr	r2, [r7, #12]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	440b      	add	r3, r1
 8001e50:	335d      	adds	r3, #93	; 0x5d
 8001e52:	2203      	movs	r2, #3
 8001e54:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8001e56:	6879      	ldr	r1, [r7, #4]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4613      	mov	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	4413      	add	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	440b      	add	r3, r1
 8001e64:	333d      	adds	r3, #61	; 0x3d
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d114      	bne.n	8001e96 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	4613      	mov	r3, r2
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	440b      	add	r3, r1
 8001e7a:	333c      	adds	r3, #60	; 0x3c
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8001e82:	6879      	ldr	r1, [r7, #4]
 8001e84:	68fa      	ldr	r2, [r7, #12]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	440b      	add	r3, r1
 8001e90:	333d      	adds	r3, #61	; 0x3d
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	0151      	lsls	r1, r2, #5
 8001ea8:	693a      	ldr	r2, [r7, #16]
 8001eaa:	440a      	add	r2, r1
 8001eac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	4611      	mov	r1, r2
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f003 f8fc 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	015a      	lsls	r2, r3, #5
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	4413      	add	r3, r2
 8001ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	6093      	str	r3, [r2, #8]
}
 8001ed8:	e19e      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	015a      	lsls	r2, r3, #5
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eec:	2b80      	cmp	r3, #128	; 0x80
 8001eee:	d12b      	bne.n	8001f48 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	015a      	lsls	r2, r3, #5
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	0151      	lsls	r1, r2, #5
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	440a      	add	r2, r1
 8001f06:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f0a:	f043 0302 	orr.w	r3, r3, #2
 8001f0e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68fa      	ldr	r2, [r7, #12]
 8001f16:	b2d2      	uxtb	r2, r2
 8001f18:	4611      	mov	r1, r2
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 f8cf 	bl	80050be <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001f20:	6879      	ldr	r1, [r7, #4]
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	440b      	add	r3, r1
 8001f2e:	335d      	adds	r3, #93	; 0x5d
 8001f30:	2206      	movs	r2, #6
 8001f32:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	015a      	lsls	r2, r3, #5
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f40:	461a      	mov	r2, r3
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	6093      	str	r3, [r2, #8]
}
 8001f46:	e167      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	015a      	lsls	r2, r3, #5
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4413      	add	r3, r2
 8001f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f5e:	d135      	bne.n	8001fcc <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	015a      	lsls	r2, r3, #5
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	0151      	lsls	r1, r2, #5
 8001f72:	693a      	ldr	r2, [r7, #16]
 8001f74:	440a      	add	r2, r1
 8001f76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f7a:	f043 0302 	orr.w	r3, r3, #2
 8001f7e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4611      	mov	r1, r2
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f003 f897 	bl	80050be <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	2310      	movs	r3, #16
 8001fa0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	015a      	lsls	r2, r3, #5
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	4413      	add	r3, r2
 8001faa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fae:	461a      	mov	r2, r3
 8001fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fb6:	6879      	ldr	r1, [r7, #4]
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	4413      	add	r3, r2
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	440b      	add	r3, r1
 8001fc4:	335d      	adds	r3, #93	; 0x5d
 8001fc6:	2208      	movs	r2, #8
 8001fc8:	701a      	strb	r2, [r3, #0]
}
 8001fca:	e125      	b.n	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	f040 811a 	bne.w	8002218 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	015a      	lsls	r2, r3, #5
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	4413      	add	r3, r2
 8001fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	0151      	lsls	r1, r2, #5
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	440a      	add	r2, r1
 8001ffa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ffe:	f023 0302 	bic.w	r3, r3, #2
 8002002:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002004:	6879      	ldr	r1, [r7, #4]
 8002006:	68fa      	ldr	r2, [r7, #12]
 8002008:	4613      	mov	r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	4413      	add	r3, r2
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	440b      	add	r3, r1
 8002012:	335d      	adds	r3, #93	; 0x5d
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d137      	bne.n	800208a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	440b      	add	r3, r1
 8002028:	335c      	adds	r3, #92	; 0x5c
 800202a:	2201      	movs	r2, #1
 800202c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	440b      	add	r3, r1
 800203c:	333f      	adds	r3, #63	; 0x3f
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d00b      	beq.n	800205c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	4613      	mov	r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	440b      	add	r3, r1
 8002052:	333f      	adds	r3, #63	; 0x3f
 8002054:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002056:	2b03      	cmp	r3, #3
 8002058:	f040 80c5 	bne.w	80021e6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	4613      	mov	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	4413      	add	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	440b      	add	r3, r1
 800206a:	3351      	adds	r3, #81	; 0x51
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	f083 0301 	eor.w	r3, r3, #1
 8002072:	b2d8      	uxtb	r0, r3
 8002074:	6879      	ldr	r1, [r7, #4]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4613      	mov	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	440b      	add	r3, r1
 8002082:	3351      	adds	r3, #81	; 0x51
 8002084:	4602      	mov	r2, r0
 8002086:	701a      	strb	r2, [r3, #0]
 8002088:	e0ad      	b.n	80021e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	68fa      	ldr	r2, [r7, #12]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	440b      	add	r3, r1
 8002098:	335d      	adds	r3, #93	; 0x5d
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d10a      	bne.n	80020b6 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	68fa      	ldr	r2, [r7, #12]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	440b      	add	r3, r1
 80020ae:	335c      	adds	r3, #92	; 0x5c
 80020b0:	2202      	movs	r2, #2
 80020b2:	701a      	strb	r2, [r3, #0]
 80020b4:	e097      	b.n	80021e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	335d      	adds	r3, #93	; 0x5d
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d10a      	bne.n	80020e2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	4613      	mov	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	4413      	add	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	440b      	add	r3, r1
 80020da:	335c      	adds	r3, #92	; 0x5c
 80020dc:	2202      	movs	r2, #2
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e081      	b.n	80021e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	68fa      	ldr	r2, [r7, #12]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	440b      	add	r3, r1
 80020f0:	335d      	adds	r3, #93	; 0x5d
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d10a      	bne.n	800210e <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	68fa      	ldr	r2, [r7, #12]
 80020fc:	4613      	mov	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4413      	add	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	440b      	add	r3, r1
 8002106:	335c      	adds	r3, #92	; 0x5c
 8002108:	2205      	movs	r2, #5
 800210a:	701a      	strb	r2, [r3, #0]
 800210c:	e06b      	b.n	80021e6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800210e:	6879      	ldr	r1, [r7, #4]
 8002110:	68fa      	ldr	r2, [r7, #12]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	440b      	add	r3, r1
 800211c:	335d      	adds	r3, #93	; 0x5d
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	2b06      	cmp	r3, #6
 8002122:	d00a      	beq.n	800213a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	440b      	add	r3, r1
 8002132:	335d      	adds	r3, #93	; 0x5d
 8002134:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002136:	2b08      	cmp	r3, #8
 8002138:	d155      	bne.n	80021e6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	68fa      	ldr	r2, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	440b      	add	r3, r1
 8002148:	3358      	adds	r3, #88	; 0x58
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c59      	adds	r1, r3, #1
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4613      	mov	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4413      	add	r3, r2
 8002158:	00db      	lsls	r3, r3, #3
 800215a:	4403      	add	r3, r0
 800215c:	3358      	adds	r3, #88	; 0x58
 800215e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	440b      	add	r3, r1
 800216e:	3358      	adds	r3, #88	; 0x58
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b03      	cmp	r3, #3
 8002174:	d914      	bls.n	80021a0 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	68fa      	ldr	r2, [r7, #12]
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	440b      	add	r3, r1
 8002184:	3358      	adds	r3, #88	; 0x58
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4613      	mov	r3, r2
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	4413      	add	r3, r2
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	440b      	add	r3, r1
 8002198:	335c      	adds	r3, #92	; 0x5c
 800219a:	2204      	movs	r2, #4
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	e009      	b.n	80021b4 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	015a      	lsls	r2, r3, #5
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4413      	add	r3, r2
 80021bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021ca:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80021d2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	015a      	lsls	r2, r3, #5
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4413      	add	r3, r2
 80021dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	015a      	lsls	r2, r3, #5
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	4413      	add	r3, r2
 80021ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021f2:	461a      	mov	r2, r3
 80021f4:	2302      	movs	r3, #2
 80021f6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	b2d8      	uxtb	r0, r3
 80021fc:	6879      	ldr	r1, [r7, #4]
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	4613      	mov	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	440b      	add	r3, r1
 800220a:	335c      	adds	r3, #92	; 0x5c
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	4601      	mov	r1, r0
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f008 fd8a 	bl	800ad2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002218:	bf00      	nop
 800221a:	3718      	adds	r7, #24
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	0c5b      	lsrs	r3, r3, #17
 8002246:	f003 030f 	and.w	r3, r3, #15
 800224a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002254:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b02      	cmp	r3, #2
 800225a:	d003      	beq.n	8002264 <HCD_RXQLVL_IRQHandler+0x44>
 800225c:	2b05      	cmp	r3, #5
 800225e:	f000 8082 	beq.w	8002366 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002262:	e083      	b.n	800236c <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d07f      	beq.n	800236a <HCD_RXQLVL_IRQHandler+0x14a>
 800226a:	6879      	ldr	r1, [r7, #4]
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	440b      	add	r3, r1
 8002278:	3344      	adds	r3, #68	; 0x44
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d074      	beq.n	800236a <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	440b      	add	r3, r1
 8002292:	3344      	adds	r3, #68	; 0x44
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	b292      	uxth	r2, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f002 faaf 	bl	80047fe <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80022a0:	6879      	ldr	r1, [r7, #4]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4613      	mov	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	440b      	add	r3, r1
 80022ae:	3344      	adds	r3, #68	; 0x44
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	18d1      	adds	r1, r2, r3
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4613      	mov	r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4403      	add	r3, r0
 80022c4:	3344      	adds	r3, #68	; 0x44
 80022c6:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	334c      	adds	r3, #76	; 0x4c
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	18d1      	adds	r1, r2, r3
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	4403      	add	r3, r0
 80022ec:	334c      	adds	r3, #76	; 0x4c
 80022ee:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	015a      	lsls	r2, r3, #5
 80022f4:	6a3b      	ldr	r3, [r7, #32]
 80022f6:	4413      	add	r3, r2
 80022f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022fc:	691a      	ldr	r2, [r3, #16]
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HCD_RXQLVL_IRQHandler+0x154>)
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d031      	beq.n	800236a <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	4413      	add	r3, r2
 800230e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800231c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002324:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	015a      	lsls	r2, r3, #5
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	4413      	add	r3, r2
 800232e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002332:	461a      	mov	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4613      	mov	r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	4413      	add	r3, r2
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	440b      	add	r3, r1
 8002346:	3350      	adds	r3, #80	; 0x50
 8002348:	781b      	ldrb	r3, [r3, #0]
 800234a:	f083 0301 	eor.w	r3, r3, #1
 800234e:	b2d8      	uxtb	r0, r3
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	440b      	add	r3, r1
 800235e:	3350      	adds	r3, #80	; 0x50
 8002360:	4602      	mov	r2, r0
 8002362:	701a      	strb	r2, [r3, #0]
      break;
 8002364:	e001      	b.n	800236a <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002366:	bf00      	nop
 8002368:	e000      	b.n	800236c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 800236a:	bf00      	nop
  }
}
 800236c:	bf00      	nop
 800236e:	3728      	adds	r7, #40	; 0x28
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	1ff80000 	.word	0x1ff80000

08002378 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80023a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d113      	bne.n	80023d8 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d10a      	bne.n	80023d0 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	699a      	ldr	r2, [r3, #24]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80023c8:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f008 fc92 	bl	800acf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f043 0302 	orr.w	r3, r3, #2
 80023d6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0308 	and.w	r3, r3, #8
 80023de:	2b08      	cmp	r3, #8
 80023e0:	d147      	bne.n	8002472 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d129      	bne.n	8002448 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d113      	bne.n	8002424 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002402:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002406:	d106      	bne.n	8002416 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2102      	movs	r1, #2
 800240e:	4618      	mov	r0, r3
 8002410:	f002 fb30 	bl	8004a74 <USB_InitFSLSPClkSel>
 8002414:	e011      	b.n	800243a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2101      	movs	r1, #1
 800241c:	4618      	mov	r0, r3
 800241e:	f002 fb29 	bl	8004a74 <USB_InitFSLSPClkSel>
 8002422:	e00a      	b.n	800243a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d106      	bne.n	800243a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002432:	461a      	mov	r2, r3
 8002434:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002438:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f008 fc88 	bl	800ad50 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	f008 fc57 	bl	800acf4 <HAL_HCD_Connect_Callback>
 8002446:	e014      	b.n	8002472 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	f008 fc8f 	bl	800ad6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800245c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002460:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	699a      	ldr	r2, [r3, #24]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002470:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d103      	bne.n	8002484 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	f043 0320 	orr.w	r3, r3, #32
 8002482:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800248a:	461a      	mov	r2, r3
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	6013      	str	r3, [r2, #0]
}
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e11f      	b.n	80026ea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d106      	bne.n	80024c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f008 f9a0 	bl	800a804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2224      	movs	r2, #36	; 0x24
 80024c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f022 0201 	bic.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024fc:	f001 f9de 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 8002500:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4a7b      	ldr	r2, [pc, #492]	; (80026f4 <HAL_I2C_Init+0x25c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d807      	bhi.n	800251c <HAL_I2C_Init+0x84>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	4a7a      	ldr	r2, [pc, #488]	; (80026f8 <HAL_I2C_Init+0x260>)
 8002510:	4293      	cmp	r3, r2
 8002512:	bf94      	ite	ls
 8002514:	2301      	movls	r3, #1
 8002516:	2300      	movhi	r3, #0
 8002518:	b2db      	uxtb	r3, r3
 800251a:	e006      	b.n	800252a <HAL_I2C_Init+0x92>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4a77      	ldr	r2, [pc, #476]	; (80026fc <HAL_I2C_Init+0x264>)
 8002520:	4293      	cmp	r3, r2
 8002522:	bf94      	ite	ls
 8002524:	2301      	movls	r3, #1
 8002526:	2300      	movhi	r3, #0
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e0db      	b.n	80026ea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a72      	ldr	r2, [pc, #456]	; (8002700 <HAL_I2C_Init+0x268>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0c9b      	lsrs	r3, r3, #18
 800253c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	430a      	orrs	r2, r1
 8002550:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	4a64      	ldr	r2, [pc, #400]	; (80026f4 <HAL_I2C_Init+0x25c>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d802      	bhi.n	800256c <HAL_I2C_Init+0xd4>
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	3301      	adds	r3, #1
 800256a:	e009      	b.n	8002580 <HAL_I2C_Init+0xe8>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002572:	fb02 f303 	mul.w	r3, r2, r3
 8002576:	4a63      	ldr	r2, [pc, #396]	; (8002704 <HAL_I2C_Init+0x26c>)
 8002578:	fba2 2303 	umull	r2, r3, r2, r3
 800257c:	099b      	lsrs	r3, r3, #6
 800257e:	3301      	adds	r3, #1
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002592:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	4956      	ldr	r1, [pc, #344]	; (80026f4 <HAL_I2C_Init+0x25c>)
 800259c:	428b      	cmp	r3, r1
 800259e:	d80d      	bhi.n	80025bc <HAL_I2C_Init+0x124>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	1e59      	subs	r1, r3, #1
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	bf38      	it	cc
 80025b8:	2304      	movcc	r3, #4
 80025ba:	e04f      	b.n	800265c <HAL_I2C_Init+0x1c4>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d111      	bne.n	80025e8 <HAL_I2C_Init+0x150>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	1e58      	subs	r0, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6859      	ldr	r1, [r3, #4]
 80025cc:	460b      	mov	r3, r1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	e012      	b.n	800260e <HAL_I2C_Init+0x176>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	0099      	lsls	r1, r3, #2
 80025f8:	440b      	add	r3, r1
 80025fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fe:	3301      	adds	r3, #1
 8002600:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002604:	2b00      	cmp	r3, #0
 8002606:	bf0c      	ite	eq
 8002608:	2301      	moveq	r3, #1
 800260a:	2300      	movne	r3, #0
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d001      	beq.n	8002616 <HAL_I2C_Init+0x17e>
 8002612:	2301      	movs	r3, #1
 8002614:	e022      	b.n	800265c <HAL_I2C_Init+0x1c4>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10e      	bne.n	800263c <HAL_I2C_Init+0x1a4>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1e58      	subs	r0, r3, #1
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6859      	ldr	r1, [r3, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	440b      	add	r3, r1
 800262c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002630:	3301      	adds	r3, #1
 8002632:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800263a:	e00f      	b.n	800265c <HAL_I2C_Init+0x1c4>
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	1e58      	subs	r0, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6859      	ldr	r1, [r3, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	0099      	lsls	r1, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002652:	3301      	adds	r3, #1
 8002654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002658:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800265c:	6879      	ldr	r1, [r7, #4]
 800265e:	6809      	ldr	r1, [r1, #0]
 8002660:	4313      	orrs	r3, r2
 8002662:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69da      	ldr	r2, [r3, #28]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	431a      	orrs	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800268a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	6911      	ldr	r1, [r2, #16]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68d2      	ldr	r2, [r2, #12]
 8002696:	4311      	orrs	r1, r2
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6812      	ldr	r2, [r2, #0]
 800269c:	430b      	orrs	r3, r1
 800269e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695a      	ldr	r2, [r3, #20]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	699b      	ldr	r3, [r3, #24]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f042 0201 	orr.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	000186a0 	.word	0x000186a0
 80026f8:	001e847f 	.word	0x001e847f
 80026fc:	003d08ff 	.word	0x003d08ff
 8002700:	431bde83 	.word	0x431bde83
 8002704:	10624dd3 	.word	0x10624dd3

08002708 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d101      	bne.n	800271a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e128      	b.n	800296c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002720:	b2db      	uxtb	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a90      	ldr	r2, [pc, #576]	; (8002974 <HAL_I2S_Init+0x26c>)
 8002732:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f008 f8ad 	bl	800a894 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2202      	movs	r2, #2
 800273e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	6812      	ldr	r2, [r2, #0]
 800274c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002750:	f023 030f 	bic.w	r3, r3, #15
 8002754:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2202      	movs	r2, #2
 800275c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d060      	beq.n	8002828 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d102      	bne.n	8002774 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800276e:	2310      	movs	r3, #16
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	e001      	b.n	8002778 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002774:	2320      	movs	r3, #32
 8002776:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b20      	cmp	r3, #32
 800277e:	d802      	bhi.n	8002786 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002786:	2001      	movs	r0, #1
 8002788:	f001 f9a2 	bl	8003ad0 <HAL_RCCEx_GetPeriphCLKFreq>
 800278c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002796:	d125      	bne.n	80027e4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d010      	beq.n	80027c2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	fbb2 f2f3 	udiv	r2, r2, r3
 80027aa:	4613      	mov	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4413      	add	r3, r2
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	461a      	mov	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	3305      	adds	r3, #5
 80027be:	613b      	str	r3, [r7, #16]
 80027c0:	e01f      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	461a      	mov	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	fbb2 f3f3 	udiv	r3, r2, r3
 80027de:	3305      	adds	r3, #5
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e00e      	b.n	8002802 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80027e4:	68fa      	ldr	r2, [r7, #12]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	461a      	mov	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fe:	3305      	adds	r3, #5
 8002800:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4a5c      	ldr	r2, [pc, #368]	; (8002978 <HAL_I2S_Init+0x270>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002816:	693a      	ldr	r2, [r7, #16]
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	021b      	lsls	r3, r3, #8
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	e003      	b.n	8002830 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002828:	2302      	movs	r3, #2
 800282a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800282c:	2300      	movs	r3, #0
 800282e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d902      	bls.n	800283c <HAL_I2S_Init+0x134>
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d907      	bls.n	800284c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002840:	f043 0210 	orr.w	r2, r3, #16
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e08f      	b.n	800296c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	ea42 0103 	orr.w	r1, r2, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69fa      	ldr	r2, [r7, #28]
 800285c:	430a      	orrs	r2, r1
 800285e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800286a:	f023 030f 	bic.w	r3, r3, #15
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6851      	ldr	r1, [r2, #4]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6892      	ldr	r2, [r2, #8]
 8002876:	4311      	orrs	r1, r2
 8002878:	687a      	ldr	r2, [r7, #4]
 800287a:	68d2      	ldr	r2, [r2, #12]
 800287c:	4311      	orrs	r1, r2
 800287e:	687a      	ldr	r2, [r7, #4]
 8002880:	6992      	ldr	r2, [r2, #24]
 8002882:	430a      	orrs	r2, r1
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800288e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a1b      	ldr	r3, [r3, #32]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d161      	bne.n	800295c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a38      	ldr	r2, [pc, #224]	; (800297c <HAL_I2S_Init+0x274>)
 800289c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a37      	ldr	r2, [pc, #220]	; (8002980 <HAL_I2S_Init+0x278>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d101      	bne.n	80028ac <HAL_I2S_Init+0x1a4>
 80028a8:	4b36      	ldr	r3, [pc, #216]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028aa:	e001      	b.n	80028b0 <HAL_I2S_Init+0x1a8>
 80028ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6812      	ldr	r2, [r2, #0]
 80028b6:	4932      	ldr	r1, [pc, #200]	; (8002980 <HAL_I2S_Init+0x278>)
 80028b8:	428a      	cmp	r2, r1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2S_Init+0x1b8>
 80028bc:	4a31      	ldr	r2, [pc, #196]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028be:	e001      	b.n	80028c4 <HAL_I2S_Init+0x1bc>
 80028c0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80028c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028c8:	f023 030f 	bic.w	r3, r3, #15
 80028cc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a2b      	ldr	r2, [pc, #172]	; (8002980 <HAL_I2S_Init+0x278>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d101      	bne.n	80028dc <HAL_I2S_Init+0x1d4>
 80028d8:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028da:	e001      	b.n	80028e0 <HAL_I2S_Init+0x1d8>
 80028dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028e0:	2202      	movs	r2, #2
 80028e2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a25      	ldr	r2, [pc, #148]	; (8002980 <HAL_I2S_Init+0x278>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d101      	bne.n	80028f2 <HAL_I2S_Init+0x1ea>
 80028ee:	4b25      	ldr	r3, [pc, #148]	; (8002984 <HAL_I2S_Init+0x27c>)
 80028f0:	e001      	b.n	80028f6 <HAL_I2S_Init+0x1ee>
 80028f2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80028f6:	69db      	ldr	r3, [r3, #28]
 80028f8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002902:	d003      	beq.n	800290c <HAL_I2S_Init+0x204>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d103      	bne.n	8002914 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800290c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002910:	613b      	str	r3, [r7, #16]
 8002912:	e001      	b.n	8002918 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	b299      	uxth	r1, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800292e:	4303      	orrs	r3, r0
 8002930:	b29b      	uxth	r3, r3
 8002932:	430b      	orrs	r3, r1
 8002934:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002936:	4313      	orrs	r3, r2
 8002938:	b29a      	uxth	r2, r3
 800293a:	897b      	ldrh	r3, [r7, #10]
 800293c:	4313      	orrs	r3, r2
 800293e:	b29b      	uxth	r3, r3
 8002940:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002944:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a0d      	ldr	r2, [pc, #52]	; (8002980 <HAL_I2S_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d101      	bne.n	8002954 <HAL_I2S_Init+0x24c>
 8002950:	4b0c      	ldr	r3, [pc, #48]	; (8002984 <HAL_I2S_Init+0x27c>)
 8002952:	e001      	b.n	8002958 <HAL_I2S_Init+0x250>
 8002954:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002958:	897a      	ldrh	r2, [r7, #10]
 800295a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2201      	movs	r2, #1
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3720      	adds	r7, #32
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	08002a7f 	.word	0x08002a7f
 8002978:	cccccccd 	.word	0xcccccccd
 800297c:	08002b95 	.word	0x08002b95
 8002980:	40003800 	.word	0x40003800
 8002984:	40003400 	.word	0x40003400

08002988 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	881a      	ldrh	r2, [r3, #0]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	1c9a      	adds	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10e      	bne.n	8002a18 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	685a      	ldr	r2, [r3, #4]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a08:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f7ff ffb8 	bl	8002988 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a18:	bf00      	nop
 8002a1a:	3708      	adds	r7, #8
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68da      	ldr	r2, [r3, #12]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	b292      	uxth	r2, r2
 8002a34:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3a:	1c9a      	adds	r2, r3, #2
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	3b01      	subs	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10e      	bne.n	8002a76 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002a66:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ff93 	bl	800299c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b086      	sub	sp, #24
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d13a      	bne.n	8002b10 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d109      	bne.n	8002ab8 <I2S_IRQHandler+0x3a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aae:	2b40      	cmp	r3, #64	; 0x40
 8002ab0:	d102      	bne.n	8002ab8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f7ff ffb4 	bl	8002a20 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002abe:	2b40      	cmp	r3, #64	; 0x40
 8002ac0:	d126      	bne.n	8002b10 <I2S_IRQHandler+0x92>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b20      	cmp	r3, #32
 8002ace:	d11f      	bne.n	8002b10 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ade:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	613b      	str	r3, [r7, #16]
 8002af4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b02:	f043 0202 	orr.w	r2, r3, #2
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7ff ff50 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d136      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d109      	bne.n	8002b3a <I2S_IRQHandler+0xbc>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d102      	bne.n	8002b3a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ff45 	bl	80029c4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b08      	cmp	r3, #8
 8002b42:	d122      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d11b      	bne.n	8002b8a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b60:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	f043 0204 	orr.w	r2, r3, #4
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7ff ff13 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b8a:	bf00      	nop
 8002b8c:	3718      	adds	r7, #24
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b088      	sub	sp, #32
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4aa2      	ldr	r2, [pc, #648]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002bae:	4ba2      	ldr	r3, [pc, #648]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bb0:	e001      	b.n	8002bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a9b      	ldr	r2, [pc, #620]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d101      	bne.n	8002bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002bcc:	4b9a      	ldr	r3, [pc, #616]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002bce:	e001      	b.n	8002bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002be0:	d004      	beq.n	8002bec <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f040 8099 	bne.w	8002d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d107      	bne.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f925 	bl	8002e50 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d107      	bne.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f9c8 	bl	8002fb0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c26:	2b40      	cmp	r3, #64	; 0x40
 8002c28:	d13a      	bne.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d035      	beq.n	8002ca0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7e      	ldr	r2, [pc, #504]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002c3e:	4b7e      	ldr	r3, [pc, #504]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c40:	e001      	b.n	8002c46 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002c42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4979      	ldr	r1, [pc, #484]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002c4e:	428b      	cmp	r3, r1
 8002c50:	d101      	bne.n	8002c56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002c52:	4b79      	ldr	r3, [pc, #484]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002c54:	e001      	b.n	8002c5a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002c56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c5a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c5e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	60fb      	str	r3, [r7, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	f043 0202 	orr.w	r2, r3, #2
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7ff fe88 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b08      	cmp	r3, #8
 8002ca8:	f040 80be 	bne.w	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f003 0320 	and.w	r3, r3, #32
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	f000 80b8 	beq.w	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cc6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a59      	ldr	r2, [pc, #356]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d101      	bne.n	8002cd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002cd2:	4b59      	ldr	r3, [pc, #356]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002cd4:	e001      	b.n	8002cda <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002cd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4954      	ldr	r1, [pc, #336]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ce2:	428b      	cmp	r3, r1
 8002ce4:	d101      	bne.n	8002cea <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002ce6:	4b54      	ldr	r3, [pc, #336]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ce8:	e001      	b.n	8002cee <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002cea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cf2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	60bb      	str	r3, [r7, #8]
 8002d00:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f043 0204 	orr.w	r2, r3, #4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff fe4a 	bl	80029b0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d1c:	e084      	b.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d107      	bne.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f8be 	bl	8002eb4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f8fd 	bl	8002f4c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d58:	2b40      	cmp	r3, #64	; 0x40
 8002d5a:	d12f      	bne.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002d5c:	697b      	ldr	r3, [r7, #20]
 8002d5e:	f003 0320 	and.w	r3, r3, #32
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d02a      	beq.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d74:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d82:	e001      	b.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002d84:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4929      	ldr	r1, [pc, #164]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002d90:	428b      	cmp	r3, r1
 8002d92:	d101      	bne.n	8002d98 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002d94:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002d96:	e001      	b.n	8002d9c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002d98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002da0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	f043 0202 	orr.w	r2, r3, #2
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff fdfa 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d131      	bne.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d02c      	beq.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a17      	ldr	r2, [pc, #92]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002dda:	4b17      	ldr	r3, [pc, #92]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ddc:	e001      	b.n	8002de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4912      	ldr	r1, [pc, #72]	; (8002e34 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dea:	428b      	cmp	r3, r1
 8002dec:	d101      	bne.n	8002df2 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8002dee:	4b12      	ldr	r3, [pc, #72]	; (8002e38 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002df0:	e001      	b.n	8002df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8002df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002dfa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e0a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e18:	f043 0204 	orr.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff fdc5 	bl	80029b0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e26:	e000      	b.n	8002e2a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e28:	bf00      	nop
}
 8002e2a:	bf00      	nop
 8002e2c:	3720      	adds	r7, #32
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	40003800 	.word	0x40003800
 8002e38:	40003400 	.word	0x40003400

08002e3c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	1c99      	adds	r1, r3, #2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6251      	str	r1, [r2, #36]	; 0x24
 8002e62:	881a      	ldrh	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e90:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d106      	bne.n	8002eaa <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ffc9 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
	...

08002eb4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c99      	adds	r1, r3, #2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6251      	str	r1, [r2, #36]	; 0x24
 8002ec6:	8819      	ldrh	r1, [r3, #0]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1d      	ldr	r2, [pc, #116]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d101      	bne.n	8002ed6 <I2SEx_TxISR_I2SExt+0x22>
 8002ed2:	4b1d      	ldr	r3, [pc, #116]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002ed4:	e001      	b.n	8002eda <I2SEx_TxISR_I2SExt+0x26>
 8002ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eda:	460a      	mov	r2, r1
 8002edc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	3b01      	subs	r3, #1
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ef0:	b29b      	uxth	r3, r3
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d121      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <I2SEx_TxISR_I2SExt+0x50>
 8002f00:	4b11      	ldr	r3, [pc, #68]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002f02:	e001      	b.n	8002f08 <I2SEx_TxISR_I2SExt+0x54>
 8002f04:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f08:	685a      	ldr	r2, [r3, #4]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	490d      	ldr	r1, [pc, #52]	; (8002f44 <I2SEx_TxISR_I2SExt+0x90>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d101      	bne.n	8002f18 <I2SEx_TxISR_I2SExt+0x64>
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <I2SEx_TxISR_I2SExt+0x94>)
 8002f16:	e001      	b.n	8002f1c <I2SEx_TxISR_I2SExt+0x68>
 8002f18:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f1c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f20:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff81 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	40003800 	.word	0x40003800
 8002f48:	40003400 	.word	0x40003400

08002f4c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	68d8      	ldr	r0, [r3, #12]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	1c99      	adds	r1, r3, #2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002f64:	b282      	uxth	r2, r0
 8002f66:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002f7a:	b29b      	uxth	r3, r3
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d113      	bne.n	8002fa8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685a      	ldr	r2, [r3, #4]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f8e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d106      	bne.n	8002fa8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff ff4a 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fa8:	bf00      	nop
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a20      	ldr	r2, [pc, #128]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <I2SEx_RxISR_I2SExt+0x16>
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8002fc4:	e001      	b.n	8002fca <I2SEx_RxISR_I2SExt+0x1a>
 8002fc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fca:	68d8      	ldr	r0, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	1c99      	adds	r1, r3, #2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002fd6:	b282      	uxth	r2, r0
 8002fd8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d121      	bne.n	8003036 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a12      	ldr	r2, [pc, #72]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <I2SEx_RxISR_I2SExt+0x50>
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8002ffe:	e001      	b.n	8003004 <I2SEx_RxISR_I2SExt+0x54>
 8003000:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003004:	685a      	ldr	r2, [r3, #4]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	490d      	ldr	r1, [pc, #52]	; (8003040 <I2SEx_RxISR_I2SExt+0x90>)
 800300c:	428b      	cmp	r3, r1
 800300e:	d101      	bne.n	8003014 <I2SEx_RxISR_I2SExt+0x64>
 8003010:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <I2SEx_RxISR_I2SExt+0x94>)
 8003012:	e001      	b.n	8003018 <I2SEx_RxISR_I2SExt+0x68>
 8003014:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003018:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800301c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003022:	b29b      	uxth	r3, r3
 8003024:	2b00      	cmp	r3, #0
 8003026:	d106      	bne.n	8003036 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ff03 	bl	8002e3c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40003800 	.word	0x40003800
 8003044:	40003400 	.word	0x40003400

08003048 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e25b      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0301 	and.w	r3, r3, #1
 8003062:	2b00      	cmp	r3, #0
 8003064:	d075      	beq.n	8003152 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003066:	4ba3      	ldr	r3, [pc, #652]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b04      	cmp	r3, #4
 8003070:	d00c      	beq.n	800308c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003072:	4ba0      	ldr	r3, [pc, #640]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800307a:	2b08      	cmp	r3, #8
 800307c:	d112      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307e:	4b9d      	ldr	r3, [pc, #628]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003086:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800308a:	d10b      	bne.n	80030a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	4b99      	ldr	r3, [pc, #612]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05b      	beq.n	8003150 <HAL_RCC_OscConfig+0x108>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d157      	bne.n	8003150 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e236      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ac:	d106      	bne.n	80030bc <HAL_RCC_OscConfig+0x74>
 80030ae:	4b91      	ldr	r3, [pc, #580]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a90      	ldr	r2, [pc, #576]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0x98>
 80030c6:	4b8b      	ldr	r3, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a8a      	ldr	r2, [pc, #552]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b88      	ldr	r3, [pc, #544]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a87      	ldr	r2, [pc, #540]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xb0>
 80030e0:	4b84      	ldr	r3, [pc, #528]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b81      	ldr	r3, [pc, #516]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a80      	ldr	r2, [pc, #512]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fd fa54 	bl	80005ac <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003108:	f7fd fa50 	bl	80005ac <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e1fb      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b76      	ldr	r3, [pc, #472]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xc0>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fd fa40 	bl	80005ac <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003130:	f7fd fa3c 	bl	80005ac <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1e7      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b6c      	ldr	r3, [pc, #432]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0xe8>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800315e:	4b65      	ldr	r3, [pc, #404]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800316a:	4b62      	ldr	r3, [pc, #392]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003176:	4b5f      	ldr	r3, [pc, #380]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b5c      	ldr	r3, [pc, #368]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1bb      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b56      	ldr	r3, [pc, #344]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4952      	ldr	r1, [pc, #328]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b4f      	ldr	r3, [pc, #316]	; (80032f8 <HAL_RCC_OscConfig+0x2b0>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031be:	f7fd f9f5 	bl	80005ac <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fd f9f1 	bl	80005ac <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e19c      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b46      	ldr	r3, [pc, #280]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b43      	ldr	r3, [pc, #268]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4940      	ldr	r1, [pc, #256]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b3f      	ldr	r3, [pc, #252]	; (80032f8 <HAL_RCC_OscConfig+0x2b0>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003200:	f7fd f9d4 	bl	80005ac <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003208:	f7fd f9d0 	bl	80005ac <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e17b      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b36      	ldr	r3, [pc, #216]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d030      	beq.n	8003294 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	695b      	ldr	r3, [r3, #20]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d016      	beq.n	8003268 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b30      	ldr	r3, [pc, #192]	; (80032fc <HAL_RCC_OscConfig+0x2b4>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fd f9b4 	bl	80005ac <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003248:	f7fd f9b0 	bl	80005ac <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e15b      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b26      	ldr	r3, [pc, #152]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800325c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x200>
 8003266:	e015      	b.n	8003294 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003268:	4b24      	ldr	r3, [pc, #144]	; (80032fc <HAL_RCC_OscConfig+0x2b4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326e:	f7fd f99d 	bl	80005ac <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003276:	f7fd f999 	bl	80005ac <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e144      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003288:	4b1a      	ldr	r3, [pc, #104]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1f0      	bne.n	8003276 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80a0 	beq.w	80033e2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]
 80032b6:	4b0f      	ldr	r3, [pc, #60]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	4a0e      	ldr	r2, [pc, #56]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c0:	6413      	str	r3, [r2, #64]	; 0x40
 80032c2:	4b0c      	ldr	r3, [pc, #48]	; (80032f4 <HAL_RCC_OscConfig+0x2ac>)
 80032c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ce:	2301      	movs	r3, #1
 80032d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d121      	bne.n	8003322 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <HAL_RCC_OscConfig+0x2b8>)
 80032e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032ea:	f7fd f95f 	bl	80005ac <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	e011      	b.n	8003316 <HAL_RCC_OscConfig+0x2ce>
 80032f2:	bf00      	nop
 80032f4:	40023800 	.word	0x40023800
 80032f8:	42470000 	.word	0x42470000
 80032fc:	42470e80 	.word	0x42470e80
 8003300:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003304:	f7fd f952 	bl	80005ac <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e0fd      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003316:	4b81      	ldr	r3, [pc, #516]	; (800351c <HAL_RCC_OscConfig+0x4d4>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d106      	bne.n	8003338 <HAL_RCC_OscConfig+0x2f0>
 800332a:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 800332c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800332e:	4a7c      	ldr	r2, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003330:	f043 0301 	orr.w	r3, r3, #1
 8003334:	6713      	str	r3, [r2, #112]	; 0x70
 8003336:	e01c      	b.n	8003372 <HAL_RCC_OscConfig+0x32a>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b05      	cmp	r3, #5
 800333e:	d10c      	bne.n	800335a <HAL_RCC_OscConfig+0x312>
 8003340:	4b77      	ldr	r3, [pc, #476]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003344:	4a76      	ldr	r2, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003346:	f043 0304 	orr.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	; 0x70
 800334c:	4b74      	ldr	r3, [pc, #464]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	4a73      	ldr	r2, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	6713      	str	r3, [r2, #112]	; 0x70
 8003358:	e00b      	b.n	8003372 <HAL_RCC_OscConfig+0x32a>
 800335a:	4b71      	ldr	r3, [pc, #452]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 800335c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335e:	4a70      	ldr	r2, [pc, #448]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003360:	f023 0301 	bic.w	r3, r3, #1
 8003364:	6713      	str	r3, [r2, #112]	; 0x70
 8003366:	4b6e      	ldr	r3, [pc, #440]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	4a6d      	ldr	r2, [pc, #436]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	f023 0304 	bic.w	r3, r3, #4
 8003370:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d015      	beq.n	80033a6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337a:	f7fd f917 	bl	80005ac <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003380:	e00a      	b.n	8003398 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003382:	f7fd f913 	bl	80005ac <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003390:	4293      	cmp	r3, r2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e0bc      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003398:	4b61      	ldr	r3, [pc, #388]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 800339a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0ee      	beq.n	8003382 <HAL_RCC_OscConfig+0x33a>
 80033a4:	e014      	b.n	80033d0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a6:	f7fd f901 	bl	80005ac <HAL_GetTick>
 80033aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ac:	e00a      	b.n	80033c4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ae:	f7fd f8fd 	bl	80005ac <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033bc:	4293      	cmp	r3, r2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e0a6      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c4:	4b56      	ldr	r3, [pc, #344]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ee      	bne.n	80033ae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d0:	7dfb      	ldrb	r3, [r7, #23]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d105      	bne.n	80033e2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d6:	4b52      	ldr	r3, [pc, #328]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a51      	ldr	r2, [pc, #324]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 80033dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	699b      	ldr	r3, [r3, #24]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 8092 	beq.w	8003510 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ec:	4b4c      	ldr	r3, [pc, #304]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	f003 030c 	and.w	r3, r3, #12
 80033f4:	2b08      	cmp	r3, #8
 80033f6:	d05c      	beq.n	80034b2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d141      	bne.n	8003484 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003400:	4b48      	ldr	r3, [pc, #288]	; (8003524 <HAL_RCC_OscConfig+0x4dc>)
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003406:	f7fd f8d1 	bl	80005ac <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340c:	e008      	b.n	8003420 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800340e:	f7fd f8cd 	bl	80005ac <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e078      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003420:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1f0      	bne.n	800340e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	69da      	ldr	r2, [r3, #28]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	019b      	lsls	r3, r3, #6
 800343c:	431a      	orrs	r2, r3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	3b01      	subs	r3, #1
 8003446:	041b      	lsls	r3, r3, #16
 8003448:	431a      	orrs	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344e:	061b      	lsls	r3, r3, #24
 8003450:	4933      	ldr	r1, [pc, #204]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003452:	4313      	orrs	r3, r2
 8003454:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003456:	4b33      	ldr	r3, [pc, #204]	; (8003524 <HAL_RCC_OscConfig+0x4dc>)
 8003458:	2201      	movs	r2, #1
 800345a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345c:	f7fd f8a6 	bl	80005ac <HAL_GetTick>
 8003460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003462:	e008      	b.n	8003476 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003464:	f7fd f8a2 	bl	80005ac <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	2b02      	cmp	r3, #2
 8003470:	d901      	bls.n	8003476 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e04d      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003476:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0f0      	beq.n	8003464 <HAL_RCC_OscConfig+0x41c>
 8003482:	e045      	b.n	8003510 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003484:	4b27      	ldr	r3, [pc, #156]	; (8003524 <HAL_RCC_OscConfig+0x4dc>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348a:	f7fd f88f 	bl	80005ac <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003492:	f7fd f88b 	bl	80005ac <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e036      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a4:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1f0      	bne.n	8003492 <HAL_RCC_OscConfig+0x44a>
 80034b0:	e02e      	b.n	8003510 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699b      	ldr	r3, [r3, #24]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e029      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034be:	4b18      	ldr	r3, [pc, #96]	; (8003520 <HAL_RCC_OscConfig+0x4d8>)
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69db      	ldr	r3, [r3, #28]
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d11c      	bne.n	800350c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034dc:	429a      	cmp	r2, r3
 80034de:	d115      	bne.n	800350c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034e6:	4013      	ands	r3, r2
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d10d      	bne.n	800350c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034fa:	429a      	cmp	r2, r3
 80034fc:	d106      	bne.n	800350c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003508:	429a      	cmp	r2, r3
 800350a:	d001      	beq.n	8003510 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800350c:	2301      	movs	r3, #1
 800350e:	e000      	b.n	8003512 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3718      	adds	r7, #24
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	40007000 	.word	0x40007000
 8003520:	40023800 	.word	0x40023800
 8003524:	42470060 	.word	0x42470060

08003528 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0cc      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800353c:	4b68      	ldr	r3, [pc, #416]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 030f 	and.w	r3, r3, #15
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d90c      	bls.n	8003564 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b65      	ldr	r3, [pc, #404]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003552:	4b63      	ldr	r3, [pc, #396]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 030f 	and.w	r3, r3, #15
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	429a      	cmp	r2, r3
 800355e:	d001      	beq.n	8003564 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e0b8      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0302 	and.w	r3, r3, #2
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800357c:	4b59      	ldr	r3, [pc, #356]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4a58      	ldr	r2, [pc, #352]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003582:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003586:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003594:	4b53      	ldr	r3, [pc, #332]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a52      	ldr	r2, [pc, #328]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800359e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a0:	4b50      	ldr	r3, [pc, #320]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	494d      	ldr	r1, [pc, #308]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d044      	beq.n	8003648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d107      	bne.n	80035d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b47      	ldr	r3, [pc, #284]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d119      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e07f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d003      	beq.n	80035e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e2:	2b03      	cmp	r3, #3
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e06f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	4b3b      	ldr	r3, [pc, #236]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e067      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003606:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f023 0203 	bic.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4934      	ldr	r1, [pc, #208]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003614:	4313      	orrs	r3, r2
 8003616:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003618:	f7fc ffc8 	bl	80005ac <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fc ffc4 	bl	80005ac <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e04f      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b2b      	ldr	r3, [pc, #172]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 020c 	and.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1eb      	bne.n	8003620 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b25      	ldr	r3, [pc, #148]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 030f 	and.w	r3, r3, #15
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d20c      	bcs.n	8003670 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003658:	683a      	ldr	r2, [r7, #0]
 800365a:	b2d2      	uxtb	r2, r2
 800365c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800365e:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <HAL_RCC_ClockConfig+0x1b8>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 030f 	and.w	r3, r3, #15
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d001      	beq.n	8003670 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e032      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d008      	beq.n	800368e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800367c:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	4916      	ldr	r1, [pc, #88]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800368a:	4313      	orrs	r3, r2
 800368c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800369a:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	490e      	ldr	r1, [pc, #56]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036ae:	f000 f821 	bl	80036f4 <HAL_RCC_GetSysClockFreq>
 80036b2:	4601      	mov	r1, r0
 80036b4:	4b0b      	ldr	r3, [pc, #44]	; (80036e4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	091b      	lsrs	r3, r3, #4
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
 80036c2:	fa21 f303 	lsr.w	r3, r1, r3
 80036c6:	4a09      	ldr	r2, [pc, #36]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80036c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036ca:	4b09      	ldr	r3, [pc, #36]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fc ff28 	bl	8000524 <HAL_InitTick>

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023c00 	.word	0x40023c00
 80036e4:	40023800 	.word	0x40023800
 80036e8:	0800b4ac 	.word	0x0800b4ac
 80036ec:	2000002c 	.word	0x2000002c
 80036f0:	20000000 	.word	0x20000000

080036f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036fa:	2300      	movs	r3, #0
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	2300      	movs	r3, #0
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	2300      	movs	r3, #0
 8003704:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800370a:	4b63      	ldr	r3, [pc, #396]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 030c 	and.w	r3, r3, #12
 8003712:	2b04      	cmp	r3, #4
 8003714:	d007      	beq.n	8003726 <HAL_RCC_GetSysClockFreq+0x32>
 8003716:	2b08      	cmp	r3, #8
 8003718:	d008      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x38>
 800371a:	2b00      	cmp	r3, #0
 800371c:	f040 80b4 	bne.w	8003888 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003720:	4b5e      	ldr	r3, [pc, #376]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003722:	60bb      	str	r3, [r7, #8]
       break;
 8003724:	e0b3      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003726:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003728:	60bb      	str	r3, [r7, #8]
      break;
 800372a:	e0b0      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800372c:	4b5a      	ldr	r3, [pc, #360]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003734:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003736:	4b58      	ldr	r3, [pc, #352]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d04a      	beq.n	80037d8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003742:	4b55      	ldr	r3, [pc, #340]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	099b      	lsrs	r3, r3, #6
 8003748:	f04f 0400 	mov.w	r4, #0
 800374c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	ea03 0501 	and.w	r5, r3, r1
 8003758:	ea04 0602 	and.w	r6, r4, r2
 800375c:	4629      	mov	r1, r5
 800375e:	4632      	mov	r2, r6
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	f04f 0400 	mov.w	r4, #0
 8003768:	0154      	lsls	r4, r2, #5
 800376a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800376e:	014b      	lsls	r3, r1, #5
 8003770:	4619      	mov	r1, r3
 8003772:	4622      	mov	r2, r4
 8003774:	1b49      	subs	r1, r1, r5
 8003776:	eb62 0206 	sbc.w	r2, r2, r6
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	f04f 0400 	mov.w	r4, #0
 8003782:	0194      	lsls	r4, r2, #6
 8003784:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003788:	018b      	lsls	r3, r1, #6
 800378a:	1a5b      	subs	r3, r3, r1
 800378c:	eb64 0402 	sbc.w	r4, r4, r2
 8003790:	f04f 0100 	mov.w	r1, #0
 8003794:	f04f 0200 	mov.w	r2, #0
 8003798:	00e2      	lsls	r2, r4, #3
 800379a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800379e:	00d9      	lsls	r1, r3, #3
 80037a0:	460b      	mov	r3, r1
 80037a2:	4614      	mov	r4, r2
 80037a4:	195b      	adds	r3, r3, r5
 80037a6:	eb44 0406 	adc.w	r4, r4, r6
 80037aa:	f04f 0100 	mov.w	r1, #0
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	0262      	lsls	r2, r4, #9
 80037b4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80037b8:	0259      	lsls	r1, r3, #9
 80037ba:	460b      	mov	r3, r1
 80037bc:	4614      	mov	r4, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	4621      	mov	r1, r4
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	461a      	mov	r2, r3
 80037ca:	4623      	mov	r3, r4
 80037cc:	f7fc fd08 	bl	80001e0 <__aeabi_uldivmod>
 80037d0:	4603      	mov	r3, r0
 80037d2:	460c      	mov	r4, r1
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e049      	b.n	800386c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037d8:	4b2f      	ldr	r3, [pc, #188]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	099b      	lsrs	r3, r3, #6
 80037de:	f04f 0400 	mov.w	r4, #0
 80037e2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037e6:	f04f 0200 	mov.w	r2, #0
 80037ea:	ea03 0501 	and.w	r5, r3, r1
 80037ee:	ea04 0602 	and.w	r6, r4, r2
 80037f2:	4629      	mov	r1, r5
 80037f4:	4632      	mov	r2, r6
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	f04f 0400 	mov.w	r4, #0
 80037fe:	0154      	lsls	r4, r2, #5
 8003800:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003804:	014b      	lsls	r3, r1, #5
 8003806:	4619      	mov	r1, r3
 8003808:	4622      	mov	r2, r4
 800380a:	1b49      	subs	r1, r1, r5
 800380c:	eb62 0206 	sbc.w	r2, r2, r6
 8003810:	f04f 0300 	mov.w	r3, #0
 8003814:	f04f 0400 	mov.w	r4, #0
 8003818:	0194      	lsls	r4, r2, #6
 800381a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800381e:	018b      	lsls	r3, r1, #6
 8003820:	1a5b      	subs	r3, r3, r1
 8003822:	eb64 0402 	sbc.w	r4, r4, r2
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	00e2      	lsls	r2, r4, #3
 8003830:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003834:	00d9      	lsls	r1, r3, #3
 8003836:	460b      	mov	r3, r1
 8003838:	4614      	mov	r4, r2
 800383a:	195b      	adds	r3, r3, r5
 800383c:	eb44 0406 	adc.w	r4, r4, r6
 8003840:	f04f 0100 	mov.w	r1, #0
 8003844:	f04f 0200 	mov.w	r2, #0
 8003848:	02a2      	lsls	r2, r4, #10
 800384a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800384e:	0299      	lsls	r1, r3, #10
 8003850:	460b      	mov	r3, r1
 8003852:	4614      	mov	r4, r2
 8003854:	4618      	mov	r0, r3
 8003856:	4621      	mov	r1, r4
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f04f 0400 	mov.w	r4, #0
 800385e:	461a      	mov	r2, r3
 8003860:	4623      	mov	r3, r4
 8003862:	f7fc fcbd 	bl	80001e0 <__aeabi_uldivmod>
 8003866:	4603      	mov	r3, r0
 8003868:	460c      	mov	r4, r1
 800386a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800386c:	4b0a      	ldr	r3, [pc, #40]	; (8003898 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	f003 0303 	and.w	r3, r3, #3
 8003876:	3301      	adds	r3, #1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	fbb2 f3f3 	udiv	r3, r2, r3
 8003884:	60bb      	str	r3, [r7, #8]
      break;
 8003886:	e002      	b.n	800388e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003888:	4b04      	ldr	r3, [pc, #16]	; (800389c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800388a:	60bb      	str	r3, [r7, #8]
      break;
 800388c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800388e:	68bb      	ldr	r3, [r7, #8]
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003898:	40023800 	.word	0x40023800
 800389c:	00f42400 	.word	0x00f42400
 80038a0:	007a1200 	.word	0x007a1200

080038a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038a4:	b480      	push	{r7}
 80038a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a8:	4b03      	ldr	r3, [pc, #12]	; (80038b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80038aa:	681b      	ldr	r3, [r3, #0]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
 80038b6:	bf00      	nop
 80038b8:	2000002c 	.word	0x2000002c

080038bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038c0:	f7ff fff0 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038c4:	4601      	mov	r1, r0
 80038c6:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	0a9b      	lsrs	r3, r3, #10
 80038cc:	f003 0307 	and.w	r3, r3, #7
 80038d0:	4a03      	ldr	r2, [pc, #12]	; (80038e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038d2:	5cd3      	ldrb	r3, [r2, r3]
 80038d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40023800 	.word	0x40023800
 80038e0:	0800b4bc 	.word	0x0800b4bc

080038e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038e8:	f7ff ffdc 	bl	80038a4 <HAL_RCC_GetHCLKFreq>
 80038ec:	4601      	mov	r1, r0
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	0b5b      	lsrs	r3, r3, #13
 80038f4:	f003 0307 	and.w	r3, r3, #7
 80038f8:	4a03      	ldr	r2, [pc, #12]	; (8003908 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038fa:	5cd3      	ldrb	r3, [r2, r3]
 80038fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003900:	4618      	mov	r0, r3
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40023800 	.word	0x40023800
 8003908:	0800b4bc 	.word	0x0800b4bc

0800390c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	d105      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003930:	2b00      	cmp	r3, #0
 8003932:	d035      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003934:	4b62      	ldr	r3, [pc, #392]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800393a:	f7fc fe37 	bl	80005ac <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003942:	f7fc fe33 	bl	80005ac <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e0b0      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003954:	4b5b      	ldr	r3, [pc, #364]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	019a      	lsls	r2, r3, #6
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	071b      	lsls	r3, r3, #28
 800396c:	4955      	ldr	r1, [pc, #340]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003974:	4b52      	ldr	r3, [pc, #328]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003976:	2201      	movs	r2, #1
 8003978:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800397a:	f7fc fe17 	bl	80005ac <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003980:	e008      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003982:	f7fc fe13 	bl	80005ac <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b02      	cmp	r3, #2
 800398e:	d901      	bls.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e090      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003994:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0f0      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8083 	beq.w	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	4b44      	ldr	r3, [pc, #272]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a43      	ldr	r2, [pc, #268]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a3e      	ldr	r2, [pc, #248]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80039d6:	f7fc fde9 	bl	80005ac <HAL_GetTick>
 80039da:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fc fde5 	bl	80005ac <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e062      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80039f0:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039fc:	4b31      	ldr	r3, [pc, #196]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a04:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d02f      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d028      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a1a:	4b2a      	ldr	r3, [pc, #168]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a22:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a24:	4b29      	ldr	r3, [pc, #164]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a2a:	4b28      	ldr	r3, [pc, #160]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003a30:	4a24      	ldr	r2, [pc, #144]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a36:	4b23      	ldr	r3, [pc, #140]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d114      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003a42:	f7fc fdb3 	bl	80005ac <HAL_GetTick>
 8003a46:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a48:	e00a      	b.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a4a:	f7fc fdaf 	bl	80005ac <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e02a      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a60:	4b18      	ldr	r3, [pc, #96]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ee      	beq.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a78:	d10d      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003a7a:	4b12      	ldr	r3, [pc, #72]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a8e:	490d      	ldr	r1, [pc, #52]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]
 8003a94:	e005      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003a96:	4b0b      	ldr	r3, [pc, #44]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003a9c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003aa0:	6093      	str	r3, [r2, #8]
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003aa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003aae:	4905      	ldr	r1, [pc, #20]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3718      	adds	r7, #24
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	42470068 	.word	0x42470068
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42470e40 	.word	0x42470e40

08003ad0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d13d      	bne.n	8003b6a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003aee:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d004      	beq.n	8003b08 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d12f      	bne.n	8003b62 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003b02:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003b04:	617b      	str	r3, [r7, #20]
          break;
 8003b06:	e02f      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b14:	d108      	bne.n	8003b28 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b1e:	4a18      	ldr	r2, [pc, #96]	; (8003b80 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b24:	613b      	str	r3, [r7, #16]
 8003b26:	e007      	b.n	8003b38 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003b28:	4b13      	ldr	r3, [pc, #76]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b30:	4a14      	ldr	r2, [pc, #80]	; (8003b84 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b36:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	fb02 f303 	mul.w	r3, r2, r3
 8003b4a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003b4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b52:	0f1b      	lsrs	r3, r3, #28
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5e:	617b      	str	r3, [r7, #20]
          break;
 8003b60:	e002      	b.n	8003b68 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	617b      	str	r3, [r7, #20]
          break;
 8003b66:	bf00      	nop
        }
      }
      break;
 8003b68:	bf00      	nop
    }
  }
  return frequency;
 8003b6a:	697b      	ldr	r3, [r7, #20]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	371c      	adds	r7, #28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	00bb8000 	.word	0x00bb8000
 8003b80:	007a1200 	.word	0x007a1200
 8003b84:	00f42400 	.word	0x00f42400

08003b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e056      	b.n	8003c48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d106      	bne.n	8003bba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f006 fed5 	bl	800a964 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2202      	movs	r2, #2
 8003bbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bd0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	69db      	ldr	r3, [r3, #28]
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	ea42 0103 	orr.w	r1, r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	0c1b      	lsrs	r3, r3, #16
 8003c18:	f003 0104 	and.w	r1, r3, #4
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2201      	movs	r2, #1
 8003c42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3708      	adds	r7, #8
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e03f      	b.n	8003ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d106      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f006 febc 	bl	800a9f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2224      	movs	r2, #36	; 0x24
 8003c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 f90b 	bl	8003eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b088      	sub	sp, #32
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	f040 8083 	bne.w	8003e12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <HAL_UART_Transmit+0x2e>
 8003d12:	88fb      	ldrh	r3, [r7, #6]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d101      	bne.n	8003d1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e07b      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Transmit+0x40>
 8003d26:	2302      	movs	r3, #2
 8003d28:	e074      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2221      	movs	r2, #33	; 0x21
 8003d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003d40:	f7fc fc34 	bl	80005ac <HAL_GetTick>
 8003d44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	88fa      	ldrh	r2, [r7, #6]
 8003d4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003d5a:	e042      	b.n	8003de2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d72:	d122      	bne.n	8003dba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	2180      	movs	r1, #128	; 0x80
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 f84c 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e042      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	881b      	ldrh	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d103      	bne.n	8003db2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	3302      	adds	r3, #2
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	e017      	b.n	8003de2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	3301      	adds	r3, #1
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	e013      	b.n	8003de2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	9300      	str	r3, [sp, #0]
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	2180      	movs	r1, #128	; 0x80
 8003dc4:	68f8      	ldr	r0, [r7, #12]
 8003dc6:	f000 f829 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d001      	beq.n	8003dd4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e01f      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	60ba      	str	r2, [r7, #8]
 8003dda:	781a      	ldrb	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1b7      	bne.n	8003d5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	2200      	movs	r2, #0
 8003df4:	2140      	movs	r1, #64	; 0x40
 8003df6:	68f8      	ldr	r0, [r7, #12]
 8003df8:	f000 f810 	bl	8003e1c <UART_WaitOnFlagUntilTimeout>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003e02:	2303      	movs	r3, #3
 8003e04:	e006      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	e000      	b.n	8003e14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003e12:	2302      	movs	r3, #2
  }
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3718      	adds	r7, #24
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	603b      	str	r3, [r7, #0]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2c:	e02c      	b.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e34:	d028      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <UART_WaitOnFlagUntilTimeout+0x30>
 8003e3c:	f7fc fbb6 	bl	80005ac <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d21d      	bcs.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68da      	ldr	r2, [r3, #12]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e5a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0201 	bic.w	r2, r2, #1
 8003e6a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e00f      	b.n	8003ea8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d0c3      	beq.n	8003e2e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68da      	ldr	r2, [r3, #12]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689a      	ldr	r2, [r3, #8]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003ef2:	f023 030c 	bic.w	r3, r3, #12
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6812      	ldr	r2, [r2, #0]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	695b      	ldr	r3, [r3, #20]
 8003f06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699a      	ldr	r2, [r3, #24]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f1e:	f040 818b 	bne.w	8004238 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4ac1      	ldr	r2, [pc, #772]	; (800422c <UART_SetConfig+0x37c>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d005      	beq.n	8003f38 <UART_SetConfig+0x88>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4abf      	ldr	r2, [pc, #764]	; (8004230 <UART_SetConfig+0x380>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	f040 80bd 	bne.w	80040b2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f38:	f7ff fcd4 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8003f3c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	461d      	mov	r5, r3
 8003f42:	f04f 0600 	mov.w	r6, #0
 8003f46:	46a8      	mov	r8, r5
 8003f48:	46b1      	mov	r9, r6
 8003f4a:	eb18 0308 	adds.w	r3, r8, r8
 8003f4e:	eb49 0409 	adc.w	r4, r9, r9
 8003f52:	4698      	mov	r8, r3
 8003f54:	46a1      	mov	r9, r4
 8003f56:	eb18 0805 	adds.w	r8, r8, r5
 8003f5a:	eb49 0906 	adc.w	r9, r9, r6
 8003f5e:	f04f 0100 	mov.w	r1, #0
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003f6a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003f6e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003f72:	4688      	mov	r8, r1
 8003f74:	4691      	mov	r9, r2
 8003f76:	eb18 0005 	adds.w	r0, r8, r5
 8003f7a:	eb49 0106 	adc.w	r1, r9, r6
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	461d      	mov	r5, r3
 8003f84:	f04f 0600 	mov.w	r6, #0
 8003f88:	196b      	adds	r3, r5, r5
 8003f8a:	eb46 0406 	adc.w	r4, r6, r6
 8003f8e:	461a      	mov	r2, r3
 8003f90:	4623      	mov	r3, r4
 8003f92:	f7fc f925 	bl	80001e0 <__aeabi_uldivmod>
 8003f96:	4603      	mov	r3, r0
 8003f98:	460c      	mov	r4, r1
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	4ba5      	ldr	r3, [pc, #660]	; (8004234 <UART_SetConfig+0x384>)
 8003f9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	461d      	mov	r5, r3
 8003fac:	f04f 0600 	mov.w	r6, #0
 8003fb0:	46a9      	mov	r9, r5
 8003fb2:	46b2      	mov	sl, r6
 8003fb4:	eb19 0309 	adds.w	r3, r9, r9
 8003fb8:	eb4a 040a 	adc.w	r4, sl, sl
 8003fbc:	4699      	mov	r9, r3
 8003fbe:	46a2      	mov	sl, r4
 8003fc0:	eb19 0905 	adds.w	r9, r9, r5
 8003fc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fdc:	4689      	mov	r9, r1
 8003fde:	4692      	mov	sl, r2
 8003fe0:	eb19 0005 	adds.w	r0, r9, r5
 8003fe4:	eb4a 0106 	adc.w	r1, sl, r6
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	461d      	mov	r5, r3
 8003fee:	f04f 0600 	mov.w	r6, #0
 8003ff2:	196b      	adds	r3, r5, r5
 8003ff4:	eb46 0406 	adc.w	r4, r6, r6
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	f7fc f8f0 	bl	80001e0 <__aeabi_uldivmod>
 8004000:	4603      	mov	r3, r0
 8004002:	460c      	mov	r4, r1
 8004004:	461a      	mov	r2, r3
 8004006:	4b8b      	ldr	r3, [pc, #556]	; (8004234 <UART_SetConfig+0x384>)
 8004008:	fba3 1302 	umull	r1, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2164      	movs	r1, #100	; 0x64
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	3332      	adds	r3, #50	; 0x32
 800401a:	4a86      	ldr	r2, [pc, #536]	; (8004234 <UART_SetConfig+0x384>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004028:	4498      	add	r8, r3
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	461d      	mov	r5, r3
 800402e:	f04f 0600 	mov.w	r6, #0
 8004032:	46a9      	mov	r9, r5
 8004034:	46b2      	mov	sl, r6
 8004036:	eb19 0309 	adds.w	r3, r9, r9
 800403a:	eb4a 040a 	adc.w	r4, sl, sl
 800403e:	4699      	mov	r9, r3
 8004040:	46a2      	mov	sl, r4
 8004042:	eb19 0905 	adds.w	r9, r9, r5
 8004046:	eb4a 0a06 	adc.w	sl, sl, r6
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004056:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800405a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800405e:	4689      	mov	r9, r1
 8004060:	4692      	mov	sl, r2
 8004062:	eb19 0005 	adds.w	r0, r9, r5
 8004066:	eb4a 0106 	adc.w	r1, sl, r6
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	461d      	mov	r5, r3
 8004070:	f04f 0600 	mov.w	r6, #0
 8004074:	196b      	adds	r3, r5, r5
 8004076:	eb46 0406 	adc.w	r4, r6, r6
 800407a:	461a      	mov	r2, r3
 800407c:	4623      	mov	r3, r4
 800407e:	f7fc f8af 	bl	80001e0 <__aeabi_uldivmod>
 8004082:	4603      	mov	r3, r0
 8004084:	460c      	mov	r4, r1
 8004086:	461a      	mov	r2, r3
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <UART_SetConfig+0x384>)
 800408a:	fba3 1302 	umull	r1, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	2164      	movs	r1, #100	; 0x64
 8004092:	fb01 f303 	mul.w	r3, r1, r3
 8004096:	1ad3      	subs	r3, r2, r3
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	3332      	adds	r3, #50	; 0x32
 800409c:	4a65      	ldr	r2, [pc, #404]	; (8004234 <UART_SetConfig+0x384>)
 800409e:	fba2 2303 	umull	r2, r3, r2, r3
 80040a2:	095b      	lsrs	r3, r3, #5
 80040a4:	f003 0207 	and.w	r2, r3, #7
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4442      	add	r2, r8
 80040ae:	609a      	str	r2, [r3, #8]
 80040b0:	e26f      	b.n	8004592 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b2:	f7ff fc03 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 80040b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	461d      	mov	r5, r3
 80040bc:	f04f 0600 	mov.w	r6, #0
 80040c0:	46a8      	mov	r8, r5
 80040c2:	46b1      	mov	r9, r6
 80040c4:	eb18 0308 	adds.w	r3, r8, r8
 80040c8:	eb49 0409 	adc.w	r4, r9, r9
 80040cc:	4698      	mov	r8, r3
 80040ce:	46a1      	mov	r9, r4
 80040d0:	eb18 0805 	adds.w	r8, r8, r5
 80040d4:	eb49 0906 	adc.w	r9, r9, r6
 80040d8:	f04f 0100 	mov.w	r1, #0
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80040e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80040e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80040ec:	4688      	mov	r8, r1
 80040ee:	4691      	mov	r9, r2
 80040f0:	eb18 0005 	adds.w	r0, r8, r5
 80040f4:	eb49 0106 	adc.w	r1, r9, r6
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	461d      	mov	r5, r3
 80040fe:	f04f 0600 	mov.w	r6, #0
 8004102:	196b      	adds	r3, r5, r5
 8004104:	eb46 0406 	adc.w	r4, r6, r6
 8004108:	461a      	mov	r2, r3
 800410a:	4623      	mov	r3, r4
 800410c:	f7fc f868 	bl	80001e0 <__aeabi_uldivmod>
 8004110:	4603      	mov	r3, r0
 8004112:	460c      	mov	r4, r1
 8004114:	461a      	mov	r2, r3
 8004116:	4b47      	ldr	r3, [pc, #284]	; (8004234 <UART_SetConfig+0x384>)
 8004118:	fba3 2302 	umull	r2, r3, r3, r2
 800411c:	095b      	lsrs	r3, r3, #5
 800411e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	461d      	mov	r5, r3
 8004126:	f04f 0600 	mov.w	r6, #0
 800412a:	46a9      	mov	r9, r5
 800412c:	46b2      	mov	sl, r6
 800412e:	eb19 0309 	adds.w	r3, r9, r9
 8004132:	eb4a 040a 	adc.w	r4, sl, sl
 8004136:	4699      	mov	r9, r3
 8004138:	46a2      	mov	sl, r4
 800413a:	eb19 0905 	adds.w	r9, r9, r5
 800413e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004142:	f04f 0100 	mov.w	r1, #0
 8004146:	f04f 0200 	mov.w	r2, #0
 800414a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800414e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004152:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004156:	4689      	mov	r9, r1
 8004158:	4692      	mov	sl, r2
 800415a:	eb19 0005 	adds.w	r0, r9, r5
 800415e:	eb4a 0106 	adc.w	r1, sl, r6
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	461d      	mov	r5, r3
 8004168:	f04f 0600 	mov.w	r6, #0
 800416c:	196b      	adds	r3, r5, r5
 800416e:	eb46 0406 	adc.w	r4, r6, r6
 8004172:	461a      	mov	r2, r3
 8004174:	4623      	mov	r3, r4
 8004176:	f7fc f833 	bl	80001e0 <__aeabi_uldivmod>
 800417a:	4603      	mov	r3, r0
 800417c:	460c      	mov	r4, r1
 800417e:	461a      	mov	r2, r3
 8004180:	4b2c      	ldr	r3, [pc, #176]	; (8004234 <UART_SetConfig+0x384>)
 8004182:	fba3 1302 	umull	r1, r3, r3, r2
 8004186:	095b      	lsrs	r3, r3, #5
 8004188:	2164      	movs	r1, #100	; 0x64
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	3332      	adds	r3, #50	; 0x32
 8004194:	4a27      	ldr	r2, [pc, #156]	; (8004234 <UART_SetConfig+0x384>)
 8004196:	fba2 2303 	umull	r2, r3, r2, r3
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	005b      	lsls	r3, r3, #1
 800419e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80041a2:	4498      	add	r8, r3
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	461d      	mov	r5, r3
 80041a8:	f04f 0600 	mov.w	r6, #0
 80041ac:	46a9      	mov	r9, r5
 80041ae:	46b2      	mov	sl, r6
 80041b0:	eb19 0309 	adds.w	r3, r9, r9
 80041b4:	eb4a 040a 	adc.w	r4, sl, sl
 80041b8:	4699      	mov	r9, r3
 80041ba:	46a2      	mov	sl, r4
 80041bc:	eb19 0905 	adds.w	r9, r9, r5
 80041c0:	eb4a 0a06 	adc.w	sl, sl, r6
 80041c4:	f04f 0100 	mov.w	r1, #0
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041d8:	4689      	mov	r9, r1
 80041da:	4692      	mov	sl, r2
 80041dc:	eb19 0005 	adds.w	r0, r9, r5
 80041e0:	eb4a 0106 	adc.w	r1, sl, r6
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	461d      	mov	r5, r3
 80041ea:	f04f 0600 	mov.w	r6, #0
 80041ee:	196b      	adds	r3, r5, r5
 80041f0:	eb46 0406 	adc.w	r4, r6, r6
 80041f4:	461a      	mov	r2, r3
 80041f6:	4623      	mov	r3, r4
 80041f8:	f7fb fff2 	bl	80001e0 <__aeabi_uldivmod>
 80041fc:	4603      	mov	r3, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	461a      	mov	r2, r3
 8004202:	4b0c      	ldr	r3, [pc, #48]	; (8004234 <UART_SetConfig+0x384>)
 8004204:	fba3 1302 	umull	r1, r3, r3, r2
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	2164      	movs	r1, #100	; 0x64
 800420c:	fb01 f303 	mul.w	r3, r1, r3
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	3332      	adds	r3, #50	; 0x32
 8004216:	4a07      	ldr	r2, [pc, #28]	; (8004234 <UART_SetConfig+0x384>)
 8004218:	fba2 2303 	umull	r2, r3, r2, r3
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	f003 0207 	and.w	r2, r3, #7
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4442      	add	r2, r8
 8004228:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800422a:	e1b2      	b.n	8004592 <UART_SetConfig+0x6e2>
 800422c:	40011000 	.word	0x40011000
 8004230:	40011400 	.word	0x40011400
 8004234:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4ad7      	ldr	r2, [pc, #860]	; (800459c <UART_SetConfig+0x6ec>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d005      	beq.n	800424e <UART_SetConfig+0x39e>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4ad6      	ldr	r2, [pc, #856]	; (80045a0 <UART_SetConfig+0x6f0>)
 8004248:	4293      	cmp	r3, r2
 800424a:	f040 80d1 	bne.w	80043f0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800424e:	f7ff fb49 	bl	80038e4 <HAL_RCC_GetPCLK2Freq>
 8004252:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	469a      	mov	sl, r3
 8004258:	f04f 0b00 	mov.w	fp, #0
 800425c:	46d0      	mov	r8, sl
 800425e:	46d9      	mov	r9, fp
 8004260:	eb18 0308 	adds.w	r3, r8, r8
 8004264:	eb49 0409 	adc.w	r4, r9, r9
 8004268:	4698      	mov	r8, r3
 800426a:	46a1      	mov	r9, r4
 800426c:	eb18 080a 	adds.w	r8, r8, sl
 8004270:	eb49 090b 	adc.w	r9, r9, fp
 8004274:	f04f 0100 	mov.w	r1, #0
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004280:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004284:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004288:	4688      	mov	r8, r1
 800428a:	4691      	mov	r9, r2
 800428c:	eb1a 0508 	adds.w	r5, sl, r8
 8004290:	eb4b 0609 	adc.w	r6, fp, r9
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	4619      	mov	r1, r3
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	f04f 0400 	mov.w	r4, #0
 80042a6:	0094      	lsls	r4, r2, #2
 80042a8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042ac:	008b      	lsls	r3, r1, #2
 80042ae:	461a      	mov	r2, r3
 80042b0:	4623      	mov	r3, r4
 80042b2:	4628      	mov	r0, r5
 80042b4:	4631      	mov	r1, r6
 80042b6:	f7fb ff93 	bl	80001e0 <__aeabi_uldivmod>
 80042ba:	4603      	mov	r3, r0
 80042bc:	460c      	mov	r4, r1
 80042be:	461a      	mov	r2, r3
 80042c0:	4bb8      	ldr	r3, [pc, #736]	; (80045a4 <UART_SetConfig+0x6f4>)
 80042c2:	fba3 2302 	umull	r2, r3, r3, r2
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	469b      	mov	fp, r3
 80042d0:	f04f 0c00 	mov.w	ip, #0
 80042d4:	46d9      	mov	r9, fp
 80042d6:	46e2      	mov	sl, ip
 80042d8:	eb19 0309 	adds.w	r3, r9, r9
 80042dc:	eb4a 040a 	adc.w	r4, sl, sl
 80042e0:	4699      	mov	r9, r3
 80042e2:	46a2      	mov	sl, r4
 80042e4:	eb19 090b 	adds.w	r9, r9, fp
 80042e8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80042ec:	f04f 0100 	mov.w	r1, #0
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042f8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042fc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004300:	4689      	mov	r9, r1
 8004302:	4692      	mov	sl, r2
 8004304:	eb1b 0509 	adds.w	r5, fp, r9
 8004308:	eb4c 060a 	adc.w	r6, ip, sl
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	4619      	mov	r1, r3
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	f04f 0400 	mov.w	r4, #0
 800431e:	0094      	lsls	r4, r2, #2
 8004320:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004324:	008b      	lsls	r3, r1, #2
 8004326:	461a      	mov	r2, r3
 8004328:	4623      	mov	r3, r4
 800432a:	4628      	mov	r0, r5
 800432c:	4631      	mov	r1, r6
 800432e:	f7fb ff57 	bl	80001e0 <__aeabi_uldivmod>
 8004332:	4603      	mov	r3, r0
 8004334:	460c      	mov	r4, r1
 8004336:	461a      	mov	r2, r3
 8004338:	4b9a      	ldr	r3, [pc, #616]	; (80045a4 <UART_SetConfig+0x6f4>)
 800433a:	fba3 1302 	umull	r1, r3, r3, r2
 800433e:	095b      	lsrs	r3, r3, #5
 8004340:	2164      	movs	r1, #100	; 0x64
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	3332      	adds	r3, #50	; 0x32
 800434c:	4a95      	ldr	r2, [pc, #596]	; (80045a4 <UART_SetConfig+0x6f4>)
 800434e:	fba2 2303 	umull	r2, r3, r2, r3
 8004352:	095b      	lsrs	r3, r3, #5
 8004354:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004358:	4498      	add	r8, r3
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	469b      	mov	fp, r3
 800435e:	f04f 0c00 	mov.w	ip, #0
 8004362:	46d9      	mov	r9, fp
 8004364:	46e2      	mov	sl, ip
 8004366:	eb19 0309 	adds.w	r3, r9, r9
 800436a:	eb4a 040a 	adc.w	r4, sl, sl
 800436e:	4699      	mov	r9, r3
 8004370:	46a2      	mov	sl, r4
 8004372:	eb19 090b 	adds.w	r9, r9, fp
 8004376:	eb4a 0a0c 	adc.w	sl, sl, ip
 800437a:	f04f 0100 	mov.w	r1, #0
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004386:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800438a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800438e:	4689      	mov	r9, r1
 8004390:	4692      	mov	sl, r2
 8004392:	eb1b 0509 	adds.w	r5, fp, r9
 8004396:	eb4c 060a 	adc.w	r6, ip, sl
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	4619      	mov	r1, r3
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	f04f 0400 	mov.w	r4, #0
 80043ac:	0094      	lsls	r4, r2, #2
 80043ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80043b2:	008b      	lsls	r3, r1, #2
 80043b4:	461a      	mov	r2, r3
 80043b6:	4623      	mov	r3, r4
 80043b8:	4628      	mov	r0, r5
 80043ba:	4631      	mov	r1, r6
 80043bc:	f7fb ff10 	bl	80001e0 <__aeabi_uldivmod>
 80043c0:	4603      	mov	r3, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	461a      	mov	r2, r3
 80043c6:	4b77      	ldr	r3, [pc, #476]	; (80045a4 <UART_SetConfig+0x6f4>)
 80043c8:	fba3 1302 	umull	r1, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	2164      	movs	r1, #100	; 0x64
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	3332      	adds	r3, #50	; 0x32
 80043da:	4a72      	ldr	r2, [pc, #456]	; (80045a4 <UART_SetConfig+0x6f4>)
 80043dc:	fba2 2303 	umull	r2, r3, r2, r3
 80043e0:	095b      	lsrs	r3, r3, #5
 80043e2:	f003 020f 	and.w	r2, r3, #15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4442      	add	r2, r8
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	e0d0      	b.n	8004592 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f0:	f7ff fa64 	bl	80038bc <HAL_RCC_GetPCLK1Freq>
 80043f4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	469a      	mov	sl, r3
 80043fa:	f04f 0b00 	mov.w	fp, #0
 80043fe:	46d0      	mov	r8, sl
 8004400:	46d9      	mov	r9, fp
 8004402:	eb18 0308 	adds.w	r3, r8, r8
 8004406:	eb49 0409 	adc.w	r4, r9, r9
 800440a:	4698      	mov	r8, r3
 800440c:	46a1      	mov	r9, r4
 800440e:	eb18 080a 	adds.w	r8, r8, sl
 8004412:	eb49 090b 	adc.w	r9, r9, fp
 8004416:	f04f 0100 	mov.w	r1, #0
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004422:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004426:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800442a:	4688      	mov	r8, r1
 800442c:	4691      	mov	r9, r2
 800442e:	eb1a 0508 	adds.w	r5, sl, r8
 8004432:	eb4b 0609 	adc.w	r6, fp, r9
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4619      	mov	r1, r3
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	f04f 0400 	mov.w	r4, #0
 8004448:	0094      	lsls	r4, r2, #2
 800444a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800444e:	008b      	lsls	r3, r1, #2
 8004450:	461a      	mov	r2, r3
 8004452:	4623      	mov	r3, r4
 8004454:	4628      	mov	r0, r5
 8004456:	4631      	mov	r1, r6
 8004458:	f7fb fec2 	bl	80001e0 <__aeabi_uldivmod>
 800445c:	4603      	mov	r3, r0
 800445e:	460c      	mov	r4, r1
 8004460:	461a      	mov	r2, r3
 8004462:	4b50      	ldr	r3, [pc, #320]	; (80045a4 <UART_SetConfig+0x6f4>)
 8004464:	fba3 2302 	umull	r2, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	469b      	mov	fp, r3
 8004472:	f04f 0c00 	mov.w	ip, #0
 8004476:	46d9      	mov	r9, fp
 8004478:	46e2      	mov	sl, ip
 800447a:	eb19 0309 	adds.w	r3, r9, r9
 800447e:	eb4a 040a 	adc.w	r4, sl, sl
 8004482:	4699      	mov	r9, r3
 8004484:	46a2      	mov	sl, r4
 8004486:	eb19 090b 	adds.w	r9, r9, fp
 800448a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800448e:	f04f 0100 	mov.w	r1, #0
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800449a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800449e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044a2:	4689      	mov	r9, r1
 80044a4:	4692      	mov	sl, r2
 80044a6:	eb1b 0509 	adds.w	r5, fp, r9
 80044aa:	eb4c 060a 	adc.w	r6, ip, sl
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	4619      	mov	r1, r3
 80044b4:	f04f 0200 	mov.w	r2, #0
 80044b8:	f04f 0300 	mov.w	r3, #0
 80044bc:	f04f 0400 	mov.w	r4, #0
 80044c0:	0094      	lsls	r4, r2, #2
 80044c2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80044c6:	008b      	lsls	r3, r1, #2
 80044c8:	461a      	mov	r2, r3
 80044ca:	4623      	mov	r3, r4
 80044cc:	4628      	mov	r0, r5
 80044ce:	4631      	mov	r1, r6
 80044d0:	f7fb fe86 	bl	80001e0 <__aeabi_uldivmod>
 80044d4:	4603      	mov	r3, r0
 80044d6:	460c      	mov	r4, r1
 80044d8:	461a      	mov	r2, r3
 80044da:	4b32      	ldr	r3, [pc, #200]	; (80045a4 <UART_SetConfig+0x6f4>)
 80044dc:	fba3 1302 	umull	r1, r3, r3, r2
 80044e0:	095b      	lsrs	r3, r3, #5
 80044e2:	2164      	movs	r1, #100	; 0x64
 80044e4:	fb01 f303 	mul.w	r3, r1, r3
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	3332      	adds	r3, #50	; 0x32
 80044ee:	4a2d      	ldr	r2, [pc, #180]	; (80045a4 <UART_SetConfig+0x6f4>)
 80044f0:	fba2 2303 	umull	r2, r3, r2, r3
 80044f4:	095b      	lsrs	r3, r3, #5
 80044f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044fa:	4498      	add	r8, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	469b      	mov	fp, r3
 8004500:	f04f 0c00 	mov.w	ip, #0
 8004504:	46d9      	mov	r9, fp
 8004506:	46e2      	mov	sl, ip
 8004508:	eb19 0309 	adds.w	r3, r9, r9
 800450c:	eb4a 040a 	adc.w	r4, sl, sl
 8004510:	4699      	mov	r9, r3
 8004512:	46a2      	mov	sl, r4
 8004514:	eb19 090b 	adds.w	r9, r9, fp
 8004518:	eb4a 0a0c 	adc.w	sl, sl, ip
 800451c:	f04f 0100 	mov.w	r1, #0
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004528:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800452c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004530:	4689      	mov	r9, r1
 8004532:	4692      	mov	sl, r2
 8004534:	eb1b 0509 	adds.w	r5, fp, r9
 8004538:	eb4c 060a 	adc.w	r6, ip, sl
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	4619      	mov	r1, r3
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	f04f 0400 	mov.w	r4, #0
 800454e:	0094      	lsls	r4, r2, #2
 8004550:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004554:	008b      	lsls	r3, r1, #2
 8004556:	461a      	mov	r2, r3
 8004558:	4623      	mov	r3, r4
 800455a:	4628      	mov	r0, r5
 800455c:	4631      	mov	r1, r6
 800455e:	f7fb fe3f 	bl	80001e0 <__aeabi_uldivmod>
 8004562:	4603      	mov	r3, r0
 8004564:	460c      	mov	r4, r1
 8004566:	461a      	mov	r2, r3
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <UART_SetConfig+0x6f4>)
 800456a:	fba3 1302 	umull	r1, r3, r3, r2
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2164      	movs	r1, #100	; 0x64
 8004572:	fb01 f303 	mul.w	r3, r1, r3
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	011b      	lsls	r3, r3, #4
 800457a:	3332      	adds	r3, #50	; 0x32
 800457c:	4a09      	ldr	r2, [pc, #36]	; (80045a4 <UART_SetConfig+0x6f4>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	095b      	lsrs	r3, r3, #5
 8004584:	f003 020f 	and.w	r2, r3, #15
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4442      	add	r2, r8
 800458e:	609a      	str	r2, [r3, #8]
}
 8004590:	e7ff      	b.n	8004592 <UART_SetConfig+0x6e2>
 8004592:	bf00      	nop
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800459c:	40011000 	.word	0x40011000
 80045a0:	40011400 	.word	0x40011400
 80045a4:	51eb851f 	.word	0x51eb851f

080045a8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045a8:	b084      	sub	sp, #16
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b084      	sub	sp, #16
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	f107 001c 	add.w	r0, r7, #28
 80045b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d122      	bne.n	8004606 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d105      	bne.n	80045fa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f94a 	bl	8004894 <USB_CoreReset>
 8004600:	4603      	mov	r3, r0
 8004602:	73fb      	strb	r3, [r7, #15]
 8004604:	e01a      	b.n	800463c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f93e 	bl	8004894 <USB_CoreReset>
 8004618:	4603      	mov	r3, r0
 800461a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	; 0x38
 800462e:	e005      	b.n	800463c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	2b01      	cmp	r3, #1
 8004640:	d10b      	bne.n	800465a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	f043 0206 	orr.w	r2, r3, #6
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f043 0220 	orr.w	r2, r3, #32
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004666:	b004      	add	sp, #16
 8004668:	4770      	bx	lr

0800466a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f043 0201 	orr.w	r2, r3, #1
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f023 0201 	bic.w	r2, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b082      	sub	sp, #8
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	460b      	mov	r3, r1
 80046b8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046c6:	78fb      	ldrb	r3, [r7, #3]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d106      	bne.n	80046da <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	60da      	str	r2, [r3, #12]
 80046d8:	e00b      	b.n	80046f2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046da:	78fb      	ldrb	r3, [r7, #3]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d106      	bne.n	80046ee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	68db      	ldr	r3, [r3, #12]
 80046e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	60da      	str	r2, [r3, #12]
 80046ec:	e001      	b.n	80046f2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e003      	b.n	80046fa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80046f2:	2032      	movs	r0, #50	; 0x32
 80046f4:	f7fb ff66 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800470e:	2300      	movs	r3, #0
 8004710:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	019b      	lsls	r3, r3, #6
 8004716:	f043 0220 	orr.w	r2, r3, #32
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	3301      	adds	r3, #1
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4a09      	ldr	r2, [pc, #36]	; (800474c <USB_FlushTxFifo+0x48>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d901      	bls.n	8004730 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e006      	b.n	800473e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0320 	and.w	r3, r3, #32
 8004738:	2b20      	cmp	r3, #32
 800473a:	d0f0      	beq.n	800471e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3714      	adds	r7, #20
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	00030d40 	.word	0x00030d40

08004750 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2210      	movs	r2, #16
 8004760:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	3301      	adds	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <USB_FlushRxFifo+0x40>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d901      	bls.n	8004774 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004770:	2303      	movs	r3, #3
 8004772:	e006      	b.n	8004782 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0310 	and.w	r3, r3, #16
 800477c:	2b10      	cmp	r3, #16
 800477e:	d0f0      	beq.n	8004762 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3714      	adds	r7, #20
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	00030d40 	.word	0x00030d40

08004794 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004794:	b480      	push	{r7}
 8004796:	b089      	sub	sp, #36	; 0x24
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	460b      	mov	r3, r1
 80047a4:	71fb      	strb	r3, [r7, #7]
 80047a6:	4613      	mov	r3, r2
 80047a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80047b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d11a      	bne.n	80047f0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80047ba:	88bb      	ldrh	r3, [r7, #4]
 80047bc:	3303      	adds	r3, #3
 80047be:	089b      	lsrs	r3, r3, #2
 80047c0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	e00f      	b.n	80047e8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80047c8:	79fb      	ldrb	r3, [r7, #7]
 80047ca:	031a      	lsls	r2, r3, #12
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047d4:	461a      	mov	r2, r3
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6013      	str	r3, [r2, #0]
      pSrc++;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3304      	adds	r3, #4
 80047e0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	3301      	adds	r3, #1
 80047e6:	61bb      	str	r3, [r7, #24]
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d3eb      	bcc.n	80047c8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	; 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047fe:	b480      	push	{r7}
 8004800:	b089      	sub	sp, #36	; 0x24
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4613      	mov	r3, r2
 800480a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	3303      	adds	r3, #3
 8004818:	089b      	lsrs	r3, r3, #2
 800481a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800481c:	2300      	movs	r3, #0
 800481e:	61bb      	str	r3, [r7, #24]
 8004820:	e00b      	b.n	800483a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	601a      	str	r2, [r3, #0]
    pDest++;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	3304      	adds	r3, #4
 8004832:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	3301      	adds	r3, #1
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3ef      	bcc.n	8004822 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004842:	69fb      	ldr	r3, [r7, #28]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3724      	adds	r7, #36	; 0x24
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004850:	b480      	push	{r7}
 8004852:	b085      	sub	sp, #20
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	695b      	ldr	r3, [r3, #20]
 800485c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004868:	68fb      	ldr	r3, [r7, #12]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004876:	b480      	push	{r7}
 8004878:	b083      	sub	sp, #12
 800487a:	af00      	add	r7, sp, #0
 800487c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0301 	and.w	r3, r3, #1
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr
	...

08004894 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <USB_CoreReset+0x64>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d901      	bls.n	80048b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	e01b      	b.n	80048ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	daf2      	bge.n	80048a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	3301      	adds	r3, #1
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <USB_CoreReset+0x64>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d901      	bls.n	80048dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e006      	b.n	80048ea <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	691b      	ldr	r3, [r3, #16]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d0f0      	beq.n	80048ca <USB_CoreReset+0x36>

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3714      	adds	r7, #20
 80048ee:	46bd      	mov	sp, r7
 80048f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	00030d40 	.word	0x00030d40

080048fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048fc:	b084      	sub	sp, #16
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	f107 001c 	add.w	r0, r7, #28
 800490a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004918:	461a      	mov	r2, r3
 800491a:	2300      	movs	r3, #0
 800491c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800493a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004946:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494a:	2b00      	cmp	r3, #0
 800494c:	d018      	beq.n	8004980 <USB_HostInit+0x84>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	2b03      	cmp	r3, #3
 8004952:	d10a      	bne.n	800496a <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004962:	f043 0304 	orr.w	r3, r3, #4
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	e014      	b.n	8004994 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004978:	f023 0304 	bic.w	r3, r3, #4
 800497c:	6013      	str	r3, [r2, #0]
 800497e:	e009      	b.n	8004994 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004994:	2110      	movs	r1, #16
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff feb4 	bl	8004704 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff fed7 	bl	8004750 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
 80049a6:	e015      	b.n	80049d4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b4:	461a      	mov	r2, r3
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	461a      	mov	r2, r3
 80049ca:	2300      	movs	r3, #0
 80049cc:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3301      	adds	r3, #1
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d3e5      	bcc.n	80049a8 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80049dc:	2101      	movs	r1, #1
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 f8ac 	bl	8004b3c <USB_DriveVbus>

  HAL_Delay(200U);
 80049e4:	20c8      	movs	r0, #200	; 0xc8
 80049e6:	f7fb fded 	bl	80005c4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f04f 32ff 	mov.w	r2, #4294967295
 80049f6:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a14      	ldr	r2, [pc, #80]	; (8004a60 <USB_HostInit+0x164>)
 8004a10:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a13      	ldr	r2, [pc, #76]	; (8004a64 <USB_HostInit+0x168>)
 8004a16:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004a1a:	e009      	b.n	8004a30 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2280      	movs	r2, #128	; 0x80
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a10      	ldr	r2, [pc, #64]	; (8004a68 <USB_HostInit+0x16c>)
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <USB_HostInit+0x170>)
 8004a2c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d105      	bne.n	8004a42 <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f043 0210 	orr.w	r2, r3, #16
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	699a      	ldr	r2, [r3, #24]
 8004a46:	4b0a      	ldr	r3, [pc, #40]	; (8004a70 <USB_HostInit+0x174>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3710      	adds	r7, #16
 8004a54:	46bd      	mov	sp, r7
 8004a56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a5a:	b004      	add	sp, #16
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	01000200 	.word	0x01000200
 8004a64:	00e00300 	.word	0x00e00300
 8004a68:	00600080 	.word	0x00600080
 8004a6c:	004000e0 	.word	0x004000e0
 8004a70:	a3200008 	.word	0xa3200008

08004a74 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68fa      	ldr	r2, [r7, #12]
 8004a8e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	68f9      	ldr	r1, [r7, #12]
 8004aa8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004aac:	4313      	orrs	r3, r2
 8004aae:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004ab0:	78fb      	ldrb	r3, [r7, #3]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004abc:	461a      	mov	r2, r3
 8004abe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8004ac2:	6053      	str	r3, [r2, #4]
 8004ac4:	e009      	b.n	8004ada <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d106      	bne.n	8004ada <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f241 7370 	movw	r3, #6000	; 0x1770
 8004ad8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b084      	sub	sp, #16
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b08:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b16:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004b18:	2064      	movs	r0, #100	; 0x64
 8004b1a:	f7fb fd53 	bl	80005c4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	68fa      	ldr	r2, [r7, #12]
 8004b22:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004b2c:	200a      	movs	r0, #10
 8004b2e:	f7fb fd49 	bl	80005c4 <HAL_Delay>

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004b60:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <USB_DriveVbus+0x44>
 8004b6c:	78fb      	ldrb	r3, [r7, #3]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d106      	bne.n	8004b80 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b7e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d109      	bne.n	8004ba0 <USB_DriveVbus+0x64>
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d106      	bne.n	8004ba0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b085      	sub	sp, #20
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	0c5b      	lsrs	r3, r3, #17
 8004bcc:	f003 0303 	and.w	r3, r3, #3
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	b29b      	uxth	r3, r3
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b087      	sub	sp, #28
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	4608      	mov	r0, r1
 8004c0a:	4611      	mov	r1, r2
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	70fb      	strb	r3, [r7, #3]
 8004c12:	460b      	mov	r3, r1
 8004c14:	70bb      	strb	r3, [r7, #2]
 8004c16:	4613      	mov	r3, r2
 8004c18:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8004c22:	78fb      	ldrb	r3, [r7, #3]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c2e:	461a      	mov	r2, r3
 8004c30:	f04f 33ff 	mov.w	r3, #4294967295
 8004c34:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004c36:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004c3a:	2b03      	cmp	r3, #3
 8004c3c:	d87e      	bhi.n	8004d3c <USB_HC_Init+0x13c>
 8004c3e:	a201      	add	r2, pc, #4	; (adr r2, 8004c44 <USB_HC_Init+0x44>)
 8004c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c44:	08004c55 	.word	0x08004c55
 8004c48:	08004cff 	.word	0x08004cff
 8004c4c:	08004c55 	.word	0x08004c55
 8004c50:	08004cc1 	.word	0x08004cc1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	f240 439d 	movw	r3, #1181	; 0x49d
 8004c66:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004c68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	da10      	bge.n	8004c92 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	78fa      	ldrb	r2, [r7, #3]
 8004c80:	0151      	lsls	r1, r2, #5
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	440a      	add	r2, r1
 8004c86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c8e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8004c90:	e057      	b.n	8004d42 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d051      	beq.n	8004d42 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004c9e:	78fb      	ldrb	r3, [r7, #3]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	78fa      	ldrb	r2, [r7, #3]
 8004cae:	0151      	lsls	r1, r2, #5
 8004cb0:	68ba      	ldr	r2, [r7, #8]
 8004cb2:	440a      	add	r2, r1
 8004cb4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cb8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004cbc:	60d3      	str	r3, [r2, #12]
      break;
 8004cbe:	e040      	b.n	8004d42 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cc0:	78fb      	ldrb	r3, [r7, #3]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f240 639d 	movw	r3, #1693	; 0x69d
 8004cd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004cd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	da34      	bge.n	8004d46 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	015a      	lsls	r2, r3, #5
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	4413      	add	r3, r2
 8004ce4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	0151      	lsls	r1, r2, #5
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	440a      	add	r2, r1
 8004cf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cfa:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004cfc:	e023      	b.n	8004d46 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004cfe:	78fb      	ldrb	r3, [r7, #3]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f240 2325 	movw	r3, #549	; 0x225
 8004d10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004d12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	da17      	bge.n	8004d4a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004d1a:	78fb      	ldrb	r3, [r7, #3]
 8004d1c:	015a      	lsls	r2, r3, #5
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	78fa      	ldrb	r2, [r7, #3]
 8004d2a:	0151      	lsls	r1, r2, #5
 8004d2c:	68ba      	ldr	r2, [r7, #8]
 8004d2e:	440a      	add	r2, r1
 8004d30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d34:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8004d38:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004d3a:	e006      	b.n	8004d4a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d40:	e004      	b.n	8004d4c <USB_HC_Init+0x14c>
      break;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <USB_HC_Init+0x14c>
      break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <USB_HC_Init+0x14c>
      break;
 8004d4a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	2101      	movs	r1, #1
 8004d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d60:	68b9      	ldr	r1, [r7, #8]
 8004d62:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004d66:	4313      	orrs	r3, r2
 8004d68:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004d76:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	da03      	bge.n	8004d86 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	e001      	b.n	8004d8a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8004d8a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d8e:	2b02      	cmp	r3, #2
 8004d90:	d103      	bne.n	8004d9a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004d92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004d96:	60fb      	str	r3, [r7, #12]
 8004d98:	e001      	b.n	8004d9e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004d9e:	787b      	ldrb	r3, [r7, #1]
 8004da0:	059b      	lsls	r3, r3, #22
 8004da2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004da6:	78bb      	ldrb	r3, [r7, #2]
 8004da8:	02db      	lsls	r3, r3, #11
 8004daa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004db0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004db4:	049b      	lsls	r3, r3, #18
 8004db6:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004dba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dbc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004dbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004dc2:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dc8:	78fb      	ldrb	r3, [r7, #3]
 8004dca:	0159      	lsls	r1, r3, #5
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	440b      	add	r3, r1
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004dda:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 8004ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004de0:	2b03      	cmp	r3, #3
 8004de2:	d10f      	bne.n	8004e04 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	015a      	lsls	r2, r3, #5
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	4413      	add	r3, r2
 8004dec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	78fa      	ldrb	r2, [r7, #3]
 8004df4:	0151      	lsls	r1, r2, #5
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	440a      	add	r2, r1
 8004dfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004dfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e02:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop

08004e14 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b08c      	sub	sp, #48	; 0x30
 8004e18:	af02      	add	r7, sp, #8
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	785b      	ldrb	r3, [r3, #1]
 8004e2a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8004e2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e30:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d028      	beq.n	8004e90 <USB_HC_StartXfer+0x7c>
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	791b      	ldrb	r3, [r3, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d124      	bne.n	8004e90 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10b      	bne.n	8004e64 <USB_HC_StartXfer+0x50>
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	795b      	ldrb	r3, [r3, #5]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d107      	bne.n	8004e64 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	4619      	mov	r1, r3
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f000 fa2e 	bl	80052bc <USB_DoPing>
      return HAL_OK;
 8004e60:	2300      	movs	r3, #0
 8004e62:	e112      	b.n	800508a <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d112      	bne.n	8004e90 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	69fa      	ldr	r2, [r7, #28]
 8004e7a:	0151      	lsls	r1, r2, #5
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	440a      	add	r2, r1
 8004e80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e84:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8004e88:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d018      	beq.n	8004eca <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	68ba      	ldr	r2, [r7, #8]
 8004e9e:	8912      	ldrh	r2, [r2, #8]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	8912      	ldrh	r2, [r2, #8]
 8004ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004eac:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8004eae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004eb0:	8b7b      	ldrh	r3, [r7, #26]
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d90b      	bls.n	8004ece <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 8004eb6:	8b7b      	ldrh	r3, [r7, #26]
 8004eb8:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004eba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	8912      	ldrh	r2, [r2, #8]
 8004ec0:	fb02 f203 	mul.w	r2, r2, r3
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	611a      	str	r2, [r3, #16]
 8004ec8:	e001      	b.n	8004ece <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	78db      	ldrb	r3, [r3, #3]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d006      	beq.n	8004ee4 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8004ed6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	8912      	ldrh	r2, [r2, #8]
 8004edc:	fb02 f203 	mul.w	r2, r2, r3
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004eec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004eee:	04d9      	lsls	r1, r3, #19
 8004ef0:	4b68      	ldr	r3, [pc, #416]	; (8005094 <USB_HC_StartXfer+0x280>)
 8004ef2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004ef4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	7a9b      	ldrb	r3, [r3, #10]
 8004efa:	075b      	lsls	r3, r3, #29
 8004efc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f00:	69f9      	ldr	r1, [r7, #28]
 8004f02:	0148      	lsls	r0, r1, #5
 8004f04:	6a39      	ldr	r1, [r7, #32]
 8004f06:	4401      	add	r1, r0
 8004f08:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8004f0c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8004f0e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8004f10:	79fb      	ldrb	r3, [r7, #7]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d009      	beq.n	8004f2a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	68d9      	ldr	r1, [r3, #12]
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	6a3b      	ldr	r3, [r7, #32]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f26:	460a      	mov	r2, r1
 8004f28:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0301 	and.w	r3, r3, #1
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	015a      	lsls	r2, r3, #5
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	4413      	add	r3, r2
 8004f4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	69fa      	ldr	r2, [r7, #28]
 8004f52:	0151      	lsls	r1, r2, #5
 8004f54:	6a3a      	ldr	r2, [r7, #32]
 8004f56:	440a      	add	r2, r1
 8004f58:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f5c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004f60:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	015a      	lsls	r2, r3, #5
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	4413      	add	r3, r2
 8004f6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	7e7b      	ldrb	r3, [r7, #25]
 8004f72:	075b      	lsls	r3, r3, #29
 8004f74:	69f9      	ldr	r1, [r7, #28]
 8004f76:	0148      	lsls	r0, r1, #5
 8004f78:	6a39      	ldr	r1, [r7, #32]
 8004f7a:	4401      	add	r1, r0
 8004f7c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8004f80:	4313      	orrs	r3, r2
 8004f82:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f84:	69fb      	ldr	r3, [r7, #28]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a41      	ldr	r2, [pc, #260]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004f94:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fa0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	78db      	ldrb	r3, [r3, #3]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d006      	beq.n	8004fb8 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8004faa:	4b3b      	ldr	r3, [pc, #236]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fb2:	4a39      	ldr	r2, [pc, #228]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e005      	b.n	8004fc4 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8004fb8:	4b37      	ldr	r3, [pc, #220]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fc0:	4a35      	ldr	r2, [pc, #212]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fc2:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004fc4:	4b34      	ldr	r3, [pc, #208]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004fcc:	4a32      	ldr	r2, [pc, #200]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fce:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fdc:	461a      	mov	r2, r3
 8004fde:	4b2e      	ldr	r3, [pc, #184]	; (8005098 <USB_HC_StartXfer+0x284>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 8004fe4:	79fb      	ldrb	r3, [r7, #7]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d14e      	bne.n	8005088 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	78db      	ldrb	r3, [r3, #3]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d14a      	bne.n	8005088 <USB_HC_StartXfer+0x274>
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d046      	beq.n	8005088 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	79db      	ldrb	r3, [r3, #7]
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d830      	bhi.n	8005064 <USB_HC_StartXfer+0x250>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <USB_HC_StartXfer+0x1f4>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005019 	.word	0x08005019
 800500c:	0800503d 	.word	0x0800503d
 8005010:	08005019 	.word	0x08005019
 8005014:	0800503d 	.word	0x0800503d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	691b      	ldr	r3, [r3, #16]
 800501c:	3303      	adds	r3, #3
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005022:	8afa      	ldrh	r2, [r7, #22]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005028:	b29b      	uxth	r3, r3
 800502a:	429a      	cmp	r2, r3
 800502c:	d91c      	bls.n	8005068 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	f043 0220 	orr.w	r2, r3, #32
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	619a      	str	r2, [r3, #24]
          }
          break;
 800503a:	e015      	b.n	8005068 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	691b      	ldr	r3, [r3, #16]
 8005040:	3303      	adds	r3, #3
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005046:	8afa      	ldrh	r2, [r7, #22]
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	b29b      	uxth	r3, r3
 8005052:	429a      	cmp	r2, r3
 8005054:	d90a      	bls.n	800506c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	619a      	str	r2, [r3, #24]
          }
          break;
 8005062:	e003      	b.n	800506c <USB_HC_StartXfer+0x258>

        default:
          break;
 8005064:	bf00      	nop
 8005066:	e002      	b.n	800506e <USB_HC_StartXfer+0x25a>
          break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <USB_HC_StartXfer+0x25a>
          break;
 800506c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	68d9      	ldr	r1, [r3, #12]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	785a      	ldrb	r2, [r3, #1]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	b298      	uxth	r0, r3
 800507c:	2300      	movs	r3, #0
 800507e:	9300      	str	r3, [sp, #0]
 8005080:	4603      	mov	r3, r0
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f7ff fb86 	bl	8004794 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3728      	adds	r7, #40	; 0x28
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	1ff80000 	.word	0x1ff80000
 8005098:	200000b0 	.word	0x200000b0

0800509c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	b29b      	uxth	r3, r3
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80050be:	b480      	push	{r7}
 80050c0:	b087      	sub	sp, #28
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	460b      	mov	r3, r1
 80050c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	0c9b      	lsrs	r3, r3, #18
 80050e6:	f003 0303 	and.w	r3, r3, #3
 80050ea:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <USB_HC_Halt+0x3a>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d16c      	bne.n	80051d2 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	015a      	lsls	r2, r3, #5
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	4413      	add	r3, r2
 8005100:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	0151      	lsls	r1, r2, #5
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	440a      	add	r2, r1
 800510e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005112:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005116:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d143      	bne.n	80051ac <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	015a      	lsls	r2, r3, #5
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	4413      	add	r3, r2
 800512c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	0151      	lsls	r1, r2, #5
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	440a      	add	r2, r1
 800513a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800513e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005142:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	0151      	lsls	r1, r2, #5
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	440a      	add	r2, r1
 800515a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800515e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005162:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	4413      	add	r3, r2
 800516c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	440a      	add	r2, r1
 800517a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800517e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005182:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	3301      	adds	r3, #1
 8005188:	617b      	str	r3, [r7, #20]
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005190:	d81d      	bhi.n	80051ce <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	015a      	lsls	r2, r3, #5
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	4413      	add	r3, r2
 800519a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051a8:	d0ec      	beq.n	8005184 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051aa:	e080      	b.n	80052ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051ca:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051cc:	e06f      	b.n	80052ae <USB_HC_Halt+0x1f0>
          break;
 80051ce:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80051d0:	e06d      	b.n	80052ae <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d143      	bne.n	800528a <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	440a      	add	r2, r1
 8005218:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800521c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005220:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	4413      	add	r3, r2
 800522a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	440a      	add	r2, r1
 8005238:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800523c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005240:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005260:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3301      	adds	r3, #1
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800526e:	d81d      	bhi.n	80052ac <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4413      	add	r3, r2
 8005278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005282:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005286:	d0ec      	beq.n	8005262 <USB_HC_Halt+0x1a4>
 8005288:	e011      	b.n	80052ae <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	4413      	add	r3, r2
 8005292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68fa      	ldr	r2, [r7, #12]
 800529a:	0151      	lsls	r1, r2, #5
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	440a      	add	r2, r1
 80052a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e000      	b.n	80052ae <USB_HC_Halt+0x1f0>
          break;
 80052ac:	bf00      	nop
    }
  }

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	371c      	adds	r7, #28
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80052bc:	b480      	push	{r7}
 80052be:	b087      	sub	sp, #28
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	460b      	mov	r3, r1
 80052c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80052cc:	78fb      	ldrb	r3, [r7, #3]
 80052ce:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80052d0:	2301      	movs	r3, #1
 80052d2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	04da      	lsls	r2, r3, #19
 80052d8:	4b15      	ldr	r3, [pc, #84]	; (8005330 <USB_DoPing+0x74>)
 80052da:	4013      	ands	r3, r2
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	0151      	lsls	r1, r2, #5
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	440a      	add	r2, r1
 80052e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80052ec:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005304:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800530c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	4413      	add	r3, r2
 8005316:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	1ff80000 	.word	0x1ff80000

08005334 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005340:	2300      	movs	r3, #0
 8005342:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7ff f9a1 	bl	800468c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800534a:	2110      	movs	r1, #16
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff f9d9 	bl	8004704 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f7ff f9fc 	bl	8004750 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005358:	2300      	movs	r3, #0
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	e01f      	b.n	800539e <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005374:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800537c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005384:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	015a      	lsls	r2, r3, #5
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	4413      	add	r3, r2
 800538e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005392:	461a      	mov	r2, r3
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	3301      	adds	r3, #1
 800539c:	613b      	str	r3, [r7, #16]
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b0f      	cmp	r3, #15
 80053a2:	d9dc      	bls.n	800535e <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	613b      	str	r3, [r7, #16]
 80053a8:	e034      	b.n	8005414 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053c0:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053c8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053d0:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053de:	461a      	mov	r2, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	3301      	adds	r3, #1
 80053e8:	617b      	str	r3, [r7, #20]
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053f0:	d80c      	bhi.n	800540c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005404:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005408:	d0ec      	beq.n	80053e4 <USB_StopHost+0xb0>
 800540a:	e000      	b.n	800540e <USB_StopHost+0xda>
        break;
 800540c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	3301      	adds	r3, #1
 8005412:	613b      	str	r3, [r7, #16]
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	2b0f      	cmp	r3, #15
 8005418:	d9c7      	bls.n	80053aa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005420:	461a      	mov	r2, r3
 8005422:	f04f 33ff 	mov.w	r3, #4294967295
 8005426:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f04f 32ff 	mov.w	r2, #4294967295
 800542e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff f91a 	bl	800466a <USB_EnableGlobalInt>

  return HAL_OK;
 8005436:	2300      	movs	r3, #0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 8005440:	b590      	push	{r4, r7, lr}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af04      	add	r7, sp, #16
 8005446:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 8005448:	2302      	movs	r3, #2
 800544a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800544c:	2301      	movs	r3, #1
 800544e:	2202      	movs	r2, #2
 8005450:	2102      	movs	r1, #2
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 fc8c 	bl	8005d70 <USBH_FindInterface>
 8005458:	4603      	mov	r3, r0
 800545a:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800545c:	7bbb      	ldrb	r3, [r7, #14]
 800545e:	2bff      	cmp	r3, #255	; 0xff
 8005460:	f000 812a 	beq.w	80056b8 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	4619      	mov	r1, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fc65 	bl	8005d38 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 8005474:	2050      	movs	r0, #80	; 0x50
 8005476:	f005 fecf 	bl	800b218 <malloc>
 800547a:	4603      	mov	r3, r0
 800547c:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005488:	7bbb      	ldrb	r3, [r7, #14]
 800548a:	687a      	ldr	r2, [r7, #4]
 800548c:	211a      	movs	r1, #26
 800548e:	fb01 f303 	mul.w	r3, r1, r3
 8005492:	4413      	add	r3, r2
 8005494:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	b25b      	sxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	da15      	bge.n	80054cc <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80054a0:	7bbb      	ldrb	r3, [r7, #14]
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	211a      	movs	r1, #26
 80054a6:	fb01 f303 	mul.w	r3, r1, r3
 80054aa:	4413      	add	r3, r2
 80054ac:	f203 334a 	addw	r3, r3, #842	; 0x34a
 80054b0:	781a      	ldrb	r2, [r3, #0]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80054b6:	7bbb      	ldrb	r3, [r7, #14]
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	211a      	movs	r1, #26
 80054bc:	fb01 f303 	mul.w	r3, r1, r3
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 80054c6:	881a      	ldrh	r2, [r3, #0]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	785b      	ldrb	r3, [r3, #1]
 80054d0:	4619      	mov	r1, r3
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f001 ff2f 	bl	8007336 <USBH_AllocPipe>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	7819      	ldrb	r1, [r3, #0]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	7858      	ldrb	r0, [r3, #1]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80054f4:	68ba      	ldr	r2, [r7, #8]
 80054f6:	8952      	ldrh	r2, [r2, #10]
 80054f8:	9202      	str	r2, [sp, #8]
 80054fa:	2203      	movs	r2, #3
 80054fc:	9201      	str	r2, [sp, #4]
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	4623      	mov	r3, r4
 8005502:	4602      	mov	r2, r0
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 fee7 	bl	80072d8 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2200      	movs	r2, #0
 8005510:	4619      	mov	r1, r3
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f005 fda6 	bl	800b064 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 8005518:	2300      	movs	r3, #0
 800551a:	2200      	movs	r2, #0
 800551c:	210a      	movs	r1, #10
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 fc26 	bl	8005d70 <USBH_FindInterface>
 8005524:	4603      	mov	r3, r0
 8005526:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 8005528:	7bbb      	ldrb	r3, [r7, #14]
 800552a:	2bff      	cmp	r3, #255	; 0xff
 800552c:	f000 80c4 	beq.w	80056b8 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005530:	7bbb      	ldrb	r3, [r7, #14]
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	211a      	movs	r1, #26
 8005536:	fb01 f303 	mul.w	r3, r1, r3
 800553a:	4413      	add	r3, r2
 800553c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	b25b      	sxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	da16      	bge.n	8005576 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005548:	7bbb      	ldrb	r3, [r7, #14]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	211a      	movs	r1, #26
 800554e:	fb01 f303 	mul.w	r3, r1, r3
 8005552:	4413      	add	r3, r2
 8005554:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005558:	781a      	ldrb	r2, [r3, #0]
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800555e:	7bbb      	ldrb	r3, [r7, #14]
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	211a      	movs	r1, #26
 8005564:	fb01 f303 	mul.w	r3, r1, r3
 8005568:	4413      	add	r3, r2
 800556a:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800556e:	881a      	ldrh	r2, [r3, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	835a      	strh	r2, [r3, #26]
 8005574:	e015      	b.n	80055a2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005576:	7bbb      	ldrb	r3, [r7, #14]
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	211a      	movs	r1, #26
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	4413      	add	r3, r2
 8005582:	f203 334a 	addw	r3, r3, #842	; 0x34a
 8005586:	781a      	ldrb	r2, [r3, #0]
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800558c:	7bbb      	ldrb	r3, [r7, #14]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	211a      	movs	r1, #26
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	4413      	add	r3, r2
 8005598:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800559c:	881a      	ldrh	r2, [r3, #0]
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 80055a2:	7bbb      	ldrb	r3, [r7, #14]
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	211a      	movs	r1, #26
 80055a8:	fb01 f303 	mul.w	r3, r1, r3
 80055ac:	4413      	add	r3, r2
 80055ae:	f203 3352 	addw	r3, r3, #850	; 0x352
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	b25b      	sxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	da16      	bge.n	80055e8 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055ba:	7bbb      	ldrb	r3, [r7, #14]
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	211a      	movs	r1, #26
 80055c0:	fb01 f303 	mul.w	r3, r1, r3
 80055c4:	4413      	add	r3, r2
 80055c6:	f203 3352 	addw	r3, r3, #850	; 0x352
 80055ca:	781a      	ldrb	r2, [r3, #0]
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055d0:	7bbb      	ldrb	r3, [r7, #14]
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	211a      	movs	r1, #26
 80055d6:	fb01 f303 	mul.w	r3, r1, r3
 80055da:	4413      	add	r3, r2
 80055dc:	f503 7355 	add.w	r3, r3, #852	; 0x354
 80055e0:	881a      	ldrh	r2, [r3, #0]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	835a      	strh	r2, [r3, #26]
 80055e6:	e015      	b.n	8005614 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	211a      	movs	r1, #26
 80055ee:	fb01 f303 	mul.w	r3, r1, r3
 80055f2:	4413      	add	r3, r2
 80055f4:	f203 3352 	addw	r3, r3, #850	; 0x352
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	211a      	movs	r1, #26
 8005604:	fb01 f303 	mul.w	r3, r1, r3
 8005608:	4413      	add	r3, r2
 800560a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800560e:	881a      	ldrh	r2, [r3, #0]
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	7b9b      	ldrb	r3, [r3, #14]
 8005618:	4619      	mov	r1, r3
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f001 fe8b 	bl	8007336 <USBH_AllocPipe>
 8005620:	4603      	mov	r3, r0
 8005622:	461a      	mov	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	7bdb      	ldrb	r3, [r3, #15]
 800562c:	4619      	mov	r1, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f001 fe81 	bl	8007336 <USBH_AllocPipe>
 8005634:	4603      	mov	r3, r0
 8005636:	461a      	mov	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	7b59      	ldrb	r1, [r3, #13]
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	7b98      	ldrb	r0, [r3, #14]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005650:	68ba      	ldr	r2, [r7, #8]
 8005652:	8b12      	ldrh	r2, [r2, #24]
 8005654:	9202      	str	r2, [sp, #8]
 8005656:	2202      	movs	r2, #2
 8005658:	9201      	str	r2, [sp, #4]
 800565a:	9300      	str	r3, [sp, #0]
 800565c:	4623      	mov	r3, r4
 800565e:	4602      	mov	r2, r0
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f001 fe39 	bl	80072d8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	7b19      	ldrb	r1, [r3, #12]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	7bd8      	ldrb	r0, [r3, #15]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800567a:	68ba      	ldr	r2, [r7, #8]
 800567c:	8b52      	ldrh	r2, [r2, #26]
 800567e:	9202      	str	r2, [sp, #8]
 8005680:	2202      	movs	r2, #2
 8005682:	9201      	str	r2, [sp, #4]
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	4623      	mov	r3, r4
 8005688:	4602      	mov	r2, r0
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fe24 	bl	80072d8 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	7b5b      	ldrb	r3, [r3, #13]
 800569c:	2200      	movs	r2, #0
 800569e:	4619      	mov	r1, r3
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f005 fcdf 	bl	800b064 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	7b1b      	ldrb	r3, [r3, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	4619      	mov	r1, r3
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f005 fcd8 	bl	800b064 <USBH_LL_SetToggle>
      status = USBH_OK;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd90      	pop	{r4, r7, pc}

080056c2 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00e      	beq.n	80056fa <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 fe17 	bl	8007316 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	4619      	mov	r1, r3
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fe3f 	bl	8007372 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	2200      	movs	r2, #0
 80056f8:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	7b1b      	ldrb	r3, [r3, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00e      	beq.n	8005720 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	7b1b      	ldrb	r3, [r3, #12]
 8005706:	4619      	mov	r1, r3
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f001 fe04 	bl	8007316 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	7b1b      	ldrb	r3, [r3, #12]
 8005712:	4619      	mov	r1, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fe2c 	bl	8007372 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	7b5b      	ldrb	r3, [r3, #13]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d00e      	beq.n	8005746 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	7b5b      	ldrb	r3, [r3, #13]
 800572c:	4619      	mov	r1, r3
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f001 fdf1 	bl	8007316 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	7b5b      	ldrb	r3, [r3, #13]
 8005738:	4619      	mov	r1, r3
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f001 fe19 	bl	8007372 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800574c:	69db      	ldr	r3, [r3, #28]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00b      	beq.n	800576a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	4618      	mov	r0, r3
 800575c:	f005 fd64 	bl	800b228 <free>
    phost->pActiveClass->pData = 0U;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005766:	2200      	movs	r2, #0
 8005768:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b084      	sub	sp, #16
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800577c:	2302      	movs	r3, #2
 800577e:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	3340      	adds	r3, #64	; 0x40
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 f8b2 	bl	80058fa <GetLineCoding>
 8005796:	4603      	mov	r3, r0
 8005798:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d105      	bne.n	80057ac <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80057a6:	2102      	movs	r1, #2
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	4798      	blx	r3
  }
  return status;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80057c0:	2301      	movs	r3, #1
 80057c2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80057c4:	2300      	movs	r3, #0
 80057c6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80057ce:	69db      	ldr	r3, [r3, #28]
 80057d0:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d877      	bhi.n	80058cc <USBH_CDC_Process+0x114>
 80057dc:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <USBH_CDC_Process+0x2c>)
 80057de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e2:	bf00      	nop
 80057e4:	080057f9 	.word	0x080057f9
 80057e8:	080057ff 	.word	0x080057ff
 80057ec:	0800582f 	.word	0x0800582f
 80057f0:	080058a3 	.word	0x080058a3
 80057f4:	080058b1 	.word	0x080058b1
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	73fb      	strb	r3, [r7, #15]
    break;
 80057fc:	e06d      	b.n	80058da <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005802:	4619      	mov	r1, r3
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f897 	bl	8005938 <SetLineCoding>
 800580a:	4603      	mov	r3, r0
 800580c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800580e:	7bbb      	ldrb	r3, [r7, #14]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d104      	bne.n	800581e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	2202      	movs	r2, #2
 8005818:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800581c:	e058      	b.n	80058d0 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800581e:	7bbb      	ldrb	r3, [r7, #14]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d055      	beq.n	80058d0 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2204      	movs	r2, #4
 8005828:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800582c:	e050      	b.n	80058d0 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	3340      	adds	r3, #64	; 0x40
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 f860 	bl	80058fa <GetLineCoding>
 800583a:	4603      	mov	r3, r0
 800583c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800583e:	7bbb      	ldrb	r3, [r7, #14]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d126      	bne.n	8005892 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005856:	791b      	ldrb	r3, [r3, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d13b      	bne.n	80058d4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005866:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005868:	429a      	cmp	r2, r3
 800586a:	d133      	bne.n	80058d4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005876:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005878:	429a      	cmp	r2, r3
 800587a:	d12b      	bne.n	80058d4 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005884:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005886:	429a      	cmp	r2, r3
 8005888:	d124      	bne.n	80058d4 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 f984 	bl	8005b98 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 8005890:	e020      	b.n	80058d4 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 8005892:	7bbb      	ldrb	r3, [r7, #14]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d01d      	beq.n	80058d4 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2204      	movs	r2, #4
 800589c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 80058a0:	e018      	b.n	80058d4 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f867 	bl	8005976 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f000 f8f8 	bl	8005a9e <CDC_ProcessReception>
    break;
 80058ae:	e014      	b.n	80058da <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 80058b0:	2100      	movs	r1, #0
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f000 fffa 	bl	80068ac <USBH_ClrFeature>
 80058b8:	4603      	mov	r3, r0
 80058ba:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 80058bc:	7bbb      	ldrb	r3, [r7, #14]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10a      	bne.n	80058d8 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 80058ca:	e005      	b.n	80058d8 <USBH_CDC_Process+0x120>

  default:
    break;
 80058cc:	bf00      	nop
 80058ce:	e004      	b.n	80058da <USBH_CDC_Process+0x122>
    break;
 80058d0:	bf00      	nop
 80058d2:	e002      	b.n	80058da <USBH_CDC_Process+0x122>
    break;
 80058d4:	bf00      	nop
 80058d6:	e000      	b.n	80058da <USBH_CDC_Process+0x122>
    break;
 80058d8:	bf00      	nop

  }

  return status;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b082      	sub	sp, #8
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	22a1      	movs	r2, #161	; 0xa1
 8005908:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2221      	movs	r2, #33	; 0x21
 800590e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2207      	movs	r2, #7
 8005920:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	2207      	movs	r2, #7
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f001 f99f 	bl	8006c6c <USBH_CtlReq>
 800592e:	4603      	mov	r3, r0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2221      	movs	r2, #33	; 0x21
 8005946:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2207      	movs	r2, #7
 800595e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2207      	movs	r2, #7
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f001 f980 	bl	8006c6c <USBH_CtlReq>
 800596c:	4603      	mov	r3, r0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b086      	sub	sp, #24
 800597a:	af02      	add	r7, sp, #8
 800597c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005988:	2300      	movs	r3, #0
 800598a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005992:	2b01      	cmp	r3, #1
 8005994:	d002      	beq.n	800599c <CDC_ProcessTransmission+0x26>
 8005996:	2b02      	cmp	r3, #2
 8005998:	d025      	beq.n	80059e6 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800599a:	e07c      	b.n	8005a96 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	8b12      	ldrh	r2, [r2, #24]
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d90c      	bls.n	80059c2 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	69d9      	ldr	r1, [r3, #28]
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	8b1a      	ldrh	r2, [r3, #24]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	7b58      	ldrb	r0, [r3, #13]
 80059b4:	2301      	movs	r3, #1
 80059b6:	9300      	str	r3, [sp, #0]
 80059b8:	4603      	mov	r3, r0
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f001 fc49 	bl	8007252 <USBH_BulkSendData>
 80059c0:	e00c      	b.n	80059dc <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	7b58      	ldrb	r0, [r3, #13]
 80059d0:	2301      	movs	r3, #1
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	4603      	mov	r3, r0
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fc3b 	bl	8007252 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 80059e4:	e057      	b.n	8005a96 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	7b5b      	ldrb	r3, [r3, #13]
 80059ea:	4619      	mov	r1, r3
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f005 fb0f 	bl	800b010 <USBH_LL_GetURBState>
 80059f2:	4603      	mov	r3, r0
 80059f4:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d136      	bne.n	8005a6a <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	8b12      	ldrh	r2, [r2, #24]
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d90e      	bls.n	8005a26 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	8b12      	ldrh	r2, [r2, #24]
 8005a10:	1a9a      	subs	r2, r3, r2
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	69db      	ldr	r3, [r3, #28]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	8b12      	ldrh	r2, [r2, #24]
 8005a1e:	441a      	add	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	61da      	str	r2, [r3, #28]
 8005a24:	e002      	b.n	8005a2c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d004      	beq.n	8005a3e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 8005a3c:	e006      	b.n	8005a4c <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2200      	movs	r2, #0
 8005a42:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f892 	bl	8005b70 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2204      	movs	r2, #4
 8005a50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a60:	2200      	movs	r2, #0
 8005a62:	4619      	mov	r1, r3
 8005a64:	f001 fdfa 	bl	800765c <osMessagePut>
    break;
 8005a68:	e014      	b.n	8005a94 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 8005a6a:	7afb      	ldrb	r3, [r7, #11]
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d111      	bne.n	8005a94 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2201      	movs	r2, #1
 8005a74:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f001 fde4 	bl	800765c <osMessagePut>
    break;
 8005a94:	bf00      	nop
  }
}
 8005a96:	bf00      	nop
 8005a98:	3710      	adds	r7, #16
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8005aba:	2b03      	cmp	r3, #3
 8005abc:	d002      	beq.n	8005ac4 <CDC_ProcessReception+0x26>
 8005abe:	2b04      	cmp	r3, #4
 8005ac0:	d00e      	beq.n	8005ae0 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 8005ac2:	e051      	b.n	8005b68 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	6a19      	ldr	r1, [r3, #32]
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	8b5a      	ldrh	r2, [r3, #26]
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	7b1b      	ldrb	r3, [r3, #12]
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f001 fbe3 	bl	800729c <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	2204      	movs	r2, #4
 8005ada:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 8005ade:	e043      	b.n	8005b68 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	7b1b      	ldrb	r3, [r3, #12]
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f005 fa92 	bl	800b010 <USBH_LL_GetURBState>
 8005aec:	4603      	mov	r3, r0
 8005aee:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 8005af0:	7cfb      	ldrb	r3, [r7, #19]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d137      	bne.n	8005b66 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8005af6:	697b      	ldr	r3, [r7, #20]
 8005af8:	7b1b      	ldrb	r3, [r3, #12]
 8005afa:	4619      	mov	r1, r3
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f005 f9f5 	bl	800aeec <USBH_LL_GetLastXferSize>
 8005b02:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d016      	beq.n	8005b3c <CDC_ProcessReception+0x9e>
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	8b5b      	ldrh	r3, [r3, #26]
 8005b12:	461a      	mov	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d910      	bls.n	8005b3c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	1ad2      	subs	r2, r2, r3
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	6a1a      	ldr	r2, [r3, #32]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	441a      	add	r2, r3
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8005b3a:	e006      	b.n	8005b4a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f81d 	bl	8005b84 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2204      	movs	r2, #4
 8005b4e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4619      	mov	r1, r3
 8005b62:	f001 fd7b 	bl	800765c <osMessagePut>
    break;
 8005b66:	bf00      	nop
  }
}
 8005b68:	bf00      	nop
 8005b6a:	3718      	adds	r7, #24
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]

}
 8005b78:	bf00      	nop
 8005b7a:	370c      	adds	r7, #12
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr

08005b84 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]

}
 8005b8c:	bf00      	nop
 8005b8e:	370c      	adds	r7, #12
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]

}
 8005ba0:	bf00      	nop
 8005ba2:	370c      	adds	r7, #12
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005baa:	4770      	bx	lr

08005bac <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 8005bac:	b5b0      	push	{r4, r5, r7, lr}
 8005bae:	b090      	sub	sp, #64	; 0x40
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8005bc0:	2302      	movs	r3, #2
 8005bc2:	e03d      	b.n	8005c40 <USBH_Init+0x94>
  }

  /* Set DRiver ID */
  phost->id = id;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	79fa      	ldrb	r2, [r7, #7]
 8005bc8:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f837 	bl	8005c50 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68ba      	ldr	r2, [r7, #8]
 8005bec:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8005bf0:	4b15      	ldr	r3, [pc, #84]	; (8005c48 <USBH_Init+0x9c>)
 8005bf2:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8005bf6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005bf8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 8005bfc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005c00:	2100      	movs	r1, #0
 8005c02:	4618      	mov	r0, r3
 8005c04:	f001 fd00 	bl	8007608 <osMessageCreate>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8005c10:	4b0e      	ldr	r3, [pc, #56]	; (8005c4c <USBH_Init+0xa0>)
 8005c12:	f107 0414 	add.w	r4, r7, #20
 8005c16:	461d      	mov	r5, r3
 8005c18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005c1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005c1c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005c20:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 8005c24:	f107 0314 	add.w	r3, r7, #20
 8005c28:	68f9      	ldr	r1, [r7, #12]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f001 fc11 	bl	8007452 <osThreadCreate>
 8005c30:	4602      	mov	r2, r0
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f005 f8a5 	bl	800ad88 <USBH_LL_Init>

  return USBH_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3740      	adds	r7, #64	; 0x40
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bdb0      	pop	{r4, r5, r7, pc}
 8005c48:	0800b3f0 	.word	0x0800b3f0
 8005c4c:	0800b40c 	.word	0x0800b40c

08005c50 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005c5c:	e008      	b.n	8005c70 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	32e0      	adds	r2, #224	; 0xe0
 8005c64:	2100      	movs	r1, #0
 8005c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	60fb      	str	r3, [r7, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b0e      	cmp	r3, #14
 8005c74:	d9f3      	bls.n	8005c5e <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	e009      	b.n	8005c90 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8005c86:	2200      	movs	r2, #0
 8005c88:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	3301      	adds	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c96:	d3f1      	bcc.n	8005c7c <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2240      	movs	r2, #64	; 0x40
 8005cbc:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 8005cec:	2300      	movs	r3, #0
 8005cee:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d017      	beq.n	8005d26 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d10f      	bne.n	8005d20 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	687a      	ldr	r2, [r7, #4]
 8005d0a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	33dc      	adds	r3, #220	; 0xdc
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	73fb      	strb	r3, [r7, #15]
 8005d1e:	e004      	b.n	8005d2a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8005d20:	2302      	movs	r3, #2
 8005d22:	73fb      	strb	r3, [r7, #15]
 8005d24:	e001      	b.n	8005d2a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8005d26:	2302      	movs	r3, #2
 8005d28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3714      	adds	r7, #20
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b085      	sub	sp, #20
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	460b      	mov	r3, r1
 8005d42:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 8005d44:	2300      	movs	r3, #0
 8005d46:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 8005d4e:	78fa      	ldrb	r2, [r7, #3]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d204      	bcs.n	8005d5e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 8005d5c:	e001      	b.n	8005d62 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b087      	sub	sp, #28
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	4608      	mov	r0, r1
 8005d7a:	4611      	mov	r1, r2
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4603      	mov	r3, r0
 8005d80:	70fb      	strb	r3, [r7, #3]
 8005d82:	460b      	mov	r3, r1
 8005d84:	70bb      	strb	r3, [r7, #2]
 8005d86:	4613      	mov	r3, r2
 8005d88:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8005d98:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005d9a:	e025      	b.n	8005de8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
 8005d9e:	221a      	movs	r2, #26
 8005da0:	fb02 f303 	mul.w	r3, r2, r3
 8005da4:	3308      	adds	r3, #8
 8005da6:	68fa      	ldr	r2, [r7, #12]
 8005da8:	4413      	add	r3, r2
 8005daa:	3302      	adds	r3, #2
 8005dac:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	795b      	ldrb	r3, [r3, #5]
 8005db2:	78fa      	ldrb	r2, [r7, #3]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d002      	beq.n	8005dbe <USBH_FindInterface+0x4e>
 8005db8:	78fb      	ldrb	r3, [r7, #3]
 8005dba:	2bff      	cmp	r3, #255	; 0xff
 8005dbc:	d111      	bne.n	8005de2 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 8005dc2:	78ba      	ldrb	r2, [r7, #2]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d002      	beq.n	8005dce <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005dc8:	78bb      	ldrb	r3, [r7, #2]
 8005dca:	2bff      	cmp	r3, #255	; 0xff
 8005dcc:	d109      	bne.n	8005de2 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 8005dd2:	787a      	ldrb	r2, [r7, #1]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d002      	beq.n	8005dde <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8005dd8:	787b      	ldrb	r3, [r7, #1]
 8005dda:	2bff      	cmp	r3, #255	; 0xff
 8005ddc:	d101      	bne.n	8005de2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	e006      	b.n	8005df0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
 8005de4:	3301      	adds	r3, #1
 8005de6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8005de8:	7dfb      	ldrb	r3, [r7, #23]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d9d6      	bls.n	8005d9c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8005dee:	23ff      	movs	r3, #255	; 0xff
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f004 fffb 	bl	800ae00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f005 f912 	bl	800b036 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b088      	sub	sp, #32
 8005e20:	af04      	add	r7, sp, #16
 8005e22:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8005e24:	2302      	movs	r3, #2
 8005e26:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 8005e2c:	6878      	ldr	r0, [r7, #4]
 8005e2e:	f000 fb7e 	bl	800652e <USBH_IsPortEnabled>
 8005e32:	4603      	mov	r3, r0
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d10c      	bne.n	8005e52 <USBH_Process+0x36>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d002      	beq.n	8005e52 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2203      	movs	r2, #3
 8005e50:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b0b      	cmp	r3, #11
 8005e5a:	f200 81ab 	bhi.w	80061b4 <USBH_Process+0x398>
 8005e5e:	a201      	add	r2, pc, #4	; (adr r2, 8005e64 <USBH_Process+0x48>)
 8005e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005ed3 	.word	0x08005ed3
 8005e6c:	08005ee7 	.word	0x08005ee7
 8005e70:	0800618f 	.word	0x0800618f
 8005e74:	080061b5 	.word	0x080061b5
 8005e78:	08005f91 	.word	0x08005f91
 8005e7c:	08006129 	.word	0x08006129
 8005e80:	08005fc1 	.word	0x08005fc1
 8005e84:	08005ffd 	.word	0x08005ffd
 8005e88:	08006037 	.word	0x08006037
 8005e8c:	0800607f 	.word	0x0800607f
 8005e90:	08006177 	.word	0x08006177
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 818b 	beq.w	80061b8 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 8005ea8:	20c8      	movs	r0, #200	; 0xc8
 8005eaa:	f005 f90e 	bl	800b0ca <USBH_Delay>
      USBH_LL_ResetPort(phost);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f005 f801 	bl	800aeb6 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ec8:	2200      	movs	r2, #0
 8005eca:	4619      	mov	r1, r3
 8005ecc:	f001 fbc6 	bl	800765c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8005ed0:	e172      	b.n	80061b8 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	f040 816f 	bne.w	80061bc <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005ee4:	e16a      	b.n	80061bc <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 8005ee6:	2064      	movs	r0, #100	; 0x64
 8005ee8:	f005 f8ef 	bl	800b0ca <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f004 ffbd 	bl	800ae6c <USBH_LL_GetSpeed>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2205      	movs	r2, #5
 8005f00:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 8005f02:	2100      	movs	r1, #0
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 fa16 	bl	8007336 <USBH_AllocPipe>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	461a      	mov	r2, r3
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 8005f12:	2180      	movs	r1, #128	; 0x80
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f001 fa0e 	bl	8007336 <USBH_AllocPipe>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	7919      	ldrb	r1, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005f36:	b292      	uxth	r2, r2
 8005f38:	9202      	str	r2, [sp, #8]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	9201      	str	r2, [sp, #4]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	4603      	mov	r3, r0
 8005f42:	2280      	movs	r2, #128	; 0x80
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f9c7 	bl	80072d8 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	7959      	ldrb	r1, [r3, #5]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 8005f5e:	b292      	uxth	r2, r2
 8005f60:	9202      	str	r2, [sp, #8]
 8005f62:	2200      	movs	r2, #0
 8005f64:	9201      	str	r2, [sp, #4]
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4603      	mov	r3, r0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f001 f9b3 	bl	80072d8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005f86:	2200      	movs	r2, #0
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f001 fb67 	bl	800765c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8005f8e:	e120      	b.n	80061d2 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	f000 f923 	bl	80061dc <USBH_HandleEnum>
 8005f96:	4603      	mov	r3, r0
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	f040 8111 	bne.w	80061c0 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d103      	bne.n	8005fb8 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 8005fb6:	e103      	b.n	80061c0 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2207      	movs	r2, #7
 8005fbc:	701a      	strb	r2, [r3, #0]
    break;
 8005fbe:	e0ff      	b.n	80061c0 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	f000 80fc 	beq.w	80061c4 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8005fd2:	2101      	movs	r1, #1
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2208      	movs	r2, #8
 8005fdc:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2205      	movs	r2, #5
 8005fe2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	f001 fb31 	bl	800765c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8005ffa:	e0e3      	b.n	80061c4 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 8006002:	b29b      	uxth	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fc09 	bl	800681e <USBH_SetCfg>
 800600c:	4603      	mov	r3, r0
 800600e:	2b00      	cmp	r3, #0
 8006010:	d102      	bne.n	8006018 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2209      	movs	r2, #9
 8006016:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800602c:	2200      	movs	r2, #0
 800602e:	4619      	mov	r1, r3
 8006030:	f001 fb14 	bl	800765c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006034:	e0cd      	b.n	80061d2 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800603c:	f003 0320 	and.w	r3, r3, #32
 8006040:	2b00      	cmp	r3, #0
 8006042:	d00a      	beq.n	800605a <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8006044:	2101      	movs	r1, #1
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	f000 fc0c 	bl	8006864 <USBH_SetFeature>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d106      	bne.n	8006060 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	220a      	movs	r2, #10
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	e002      	b.n	8006060 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	220a      	movs	r2, #10
 800605e:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006074:	2200      	movs	r2, #0
 8006076:	4619      	mov	r1, r3
 8006078:	f001 faf0 	bl	800765c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800607c:	e0a9      	b.n	80061d2 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006084:	2b00      	cmp	r3, #0
 8006086:	d040      	beq.n	800610a <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
 8006094:	e017      	b.n	80060c6 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006096:	7bfb      	ldrb	r3, [r7, #15]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	33dc      	adds	r3, #220	; 0xdc
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4413      	add	r3, r2
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	791a      	ldrb	r2, [r3, #4]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d108      	bne.n	80060c0 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 80060ae:	7bfb      	ldrb	r3, [r7, #15]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	33dc      	adds	r3, #220	; 0xdc
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	685a      	ldr	r2, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	3301      	adds	r3, #1
 80060c4:	73fb      	strb	r3, [r7, #15]
 80060c6:	7bfb      	ldrb	r3, [r7, #15]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0e4      	beq.n	8006096 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d016      	beq.n	8006104 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	4798      	blx	r3
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2206      	movs	r2, #6
 80060ec:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80060f4:	2103      	movs	r1, #3
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	4798      	blx	r3
 80060fa:	e006      	b.n	800610a <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	220d      	movs	r2, #13
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e002      	b.n	800610a <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	220d      	movs	r2, #13
 8006108:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2205      	movs	r2, #5
 800610e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800611e:	2200      	movs	r2, #0
 8006120:	4619      	mov	r1, r3
 8006122:	f001 fa9b 	bl	800765c <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 8006126:	e054      	b.n	80061d2 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800612e:	2b00      	cmp	r3, #0
 8006130:	d00f      	beq.n	8006152 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006138:	691b      	ldr	r3, [r3, #16]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	4798      	blx	r3
 800613e:	4603      	mov	r3, r0
 8006140:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 8006142:	7bbb      	ldrb	r3, [r7, #14]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d13e      	bne.n	80061c8 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	220b      	movs	r2, #11
 800614e:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 8006150:	e03a      	b.n	80061c8 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	220d      	movs	r2, #13
 8006156:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2205      	movs	r2, #5
 800615c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800616c:	2200      	movs	r2, #0
 800616e:	4619      	mov	r1, r3
 8006170:	f001 fa74 	bl	800765c <osMessagePut>
    break;
 8006174:	e028      	b.n	80061c8 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800617c:	2b00      	cmp	r3, #0
 800617e:	d025      	beq.n	80061cc <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 8006186:	695b      	ldr	r3, [r3, #20]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	4798      	blx	r3
    }
    break;
 800618c:	e01e      	b.n	80061cc <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f7ff fd5e 	bl	8005c50 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800619a:	2b00      	cmp	r3, #0
 800619c:	d018      	beq.n	80061d0 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 80061b2:	e00d      	b.n	80061d0 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 80061b4:	bf00      	nop
 80061b6:	e00c      	b.n	80061d2 <USBH_Process+0x3b6>
    break;
 80061b8:	bf00      	nop
 80061ba:	e00a      	b.n	80061d2 <USBH_Process+0x3b6>
    break;
 80061bc:	bf00      	nop
 80061be:	e008      	b.n	80061d2 <USBH_Process+0x3b6>
    break;
 80061c0:	bf00      	nop
 80061c2:	e006      	b.n	80061d2 <USBH_Process+0x3b6>
    break;
 80061c4:	bf00      	nop
 80061c6:	e004      	b.n	80061d2 <USBH_Process+0x3b6>
    break;
 80061c8:	bf00      	nop
 80061ca:	e002      	b.n	80061d2 <USBH_Process+0x3b6>
    break;
 80061cc:	bf00      	nop
 80061ce:	e000      	b.n	80061d2 <USBH_Process+0x3b6>
    break;
 80061d0:	bf00      	nop
  }
 return USBH_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af04      	add	r7, sp, #16
 80061e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80061e4:	2301      	movs	r3, #1
 80061e6:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	785b      	ldrb	r3, [r3, #1]
 80061ec:	2b07      	cmp	r3, #7
 80061ee:	f200 8132 	bhi.w	8006456 <USBH_HandleEnum+0x27a>
 80061f2:	a201      	add	r2, pc, #4	; (adr r2, 80061f8 <USBH_HandleEnum+0x1c>)
 80061f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061f8:	08006219 	.word	0x08006219
 80061fc:	0800628b 	.word	0x0800628b
 8006200:	080062a3 	.word	0x080062a3
 8006204:	08006319 	.word	0x08006319
 8006208:	08006331 	.word	0x08006331
 800620c:	0800634f 	.word	0x0800634f
 8006210:	080063bb 	.word	0x080063bb
 8006214:	0800640b 	.word	0x0800640b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 8006218:	2108      	movs	r1, #8
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa2f 	bl	800667e <USBH_Get_DevDesc>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8119 	bne.w	800645a <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2201      	movs	r2, #1
 8006236:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	7919      	ldrb	r1, [r3, #4]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800624c:	b292      	uxth	r2, r2
 800624e:	9202      	str	r2, [sp, #8]
 8006250:	2200      	movs	r2, #0
 8006252:	9201      	str	r2, [sp, #4]
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	4603      	mov	r3, r0
 8006258:	2280      	movs	r2, #128	; 0x80
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f001 f83c 	bl	80072d8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	7959      	ldrb	r1, [r3, #5]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006274:	b292      	uxth	r2, r2
 8006276:	9202      	str	r2, [sp, #8]
 8006278:	2200      	movs	r2, #0
 800627a:	9201      	str	r2, [sp, #4]
 800627c:	9300      	str	r3, [sp, #0]
 800627e:	4603      	mov	r3, r0
 8006280:	2200      	movs	r2, #0
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f001 f828 	bl	80072d8 <USBH_OpenPipe>

    }
    break;
 8006288:	e0e7      	b.n	800645a <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800628a:	2112      	movs	r1, #18
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f9f6 	bl	800667e <USBH_Get_DevDesc>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 80e2 	bne.w	800645e <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	705a      	strb	r2, [r3, #1]

    }
    break;
 80062a0:	e0dd      	b.n	800645e <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 80062a2:	2101      	movs	r1, #1
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fa96 	bl	80067d6 <USBH_SetAddress>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f040 80d8 	bne.w	8006462 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 80062b2:	2002      	movs	r0, #2
 80062b4:	f004 ff09 	bl	800b0ca <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2203      	movs	r2, #3
 80062c4:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	7919      	ldrb	r1, [r3, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 80062da:	b292      	uxth	r2, r2
 80062dc:	9202      	str	r2, [sp, #8]
 80062de:	2200      	movs	r2, #0
 80062e0:	9201      	str	r2, [sp, #4]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	2280      	movs	r2, #128	; 0x80
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fff5 	bl	80072d8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	7959      	ldrb	r1, [r3, #5]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 8006302:	b292      	uxth	r2, r2
 8006304:	9202      	str	r2, [sp, #8]
 8006306:	2200      	movs	r2, #0
 8006308:	9201      	str	r2, [sp, #4]
 800630a:	9300      	str	r3, [sp, #0]
 800630c:	4603      	mov	r3, r0
 800630e:	2200      	movs	r2, #0
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 ffe1 	bl	80072d8 <USBH_OpenPipe>
    }
    break;
 8006316:	e0a4      	b.n	8006462 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 8006318:	2109      	movs	r1, #9
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 f9d7 	bl	80066ce <USBH_Get_CfgDesc>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 809f 	bne.w	8006466 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2204      	movs	r2, #4
 800632c:	705a      	strb	r2, [r3, #1]
    }
    break;
 800632e:	e09a      	b.n	8006466 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f9c8 	bl	80066ce <USBH_Get_CfgDesc>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 8092 	bne.w	800646a <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2205      	movs	r2, #5
 800634a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800634c:	e08d      	b.n	800646a <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 8006354:	2b00      	cmp	r3, #0
 8006356:	d01e      	beq.n	8006396 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006364:	23ff      	movs	r3, #255	; 0xff
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f9d5 	bl	8006716 <USBH_Get_StringDesc>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d17d      	bne.n	800646e <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2206      	movs	r2, #6
 8006376:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2205      	movs	r2, #5
 800637c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800638c:	2200      	movs	r2, #0
 800638e:	4619      	mov	r1, r3
 8006390:	f001 f964 	bl	800765c <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006394:	e06b      	b.n	800646e <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2206      	movs	r2, #6
 800639a:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2205      	movs	r2, #5
 80063a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063b0:	2200      	movs	r2, #0
 80063b2:	4619      	mov	r1, r3
 80063b4:	f001 f952 	bl	800765c <osMessagePut>
    break;
 80063b8:	e059      	b.n	800646e <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d010      	beq.n	80063e6 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 80063d0:	23ff      	movs	r3, #255	; 0xff
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f99f 	bl	8006716 <USBH_Get_StringDesc>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d149      	bne.n	8006472 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2207      	movs	r2, #7
 80063e2:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 80063e4:	e045      	b.n	8006472 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2207      	movs	r2, #7
 80063ea:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2205      	movs	r2, #5
 80063f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006400:	2200      	movs	r2, #0
 8006402:	4619      	mov	r1, r3
 8006404:	f001 f92a 	bl	800765c <osMessagePut>
    break;
 8006408:	e033      	b.n	8006472 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00f      	beq.n	8006434 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 8006420:	23ff      	movs	r3, #255	; 0xff
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f977 	bl	8006716 <USBH_Get_StringDesc>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d123      	bne.n	8006476 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 8006432:	e020      	b.n	8006476 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2205      	movs	r2, #5
 800643c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800644c:	2200      	movs	r2, #0
 800644e:	4619      	mov	r1, r3
 8006450:	f001 f904 	bl	800765c <osMessagePut>
    break;
 8006454:	e00f      	b.n	8006476 <USBH_HandleEnum+0x29a>

  default:
    break;
 8006456:	bf00      	nop
 8006458:	e00e      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 800645a:	bf00      	nop
 800645c:	e00c      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 800645e:	bf00      	nop
 8006460:	e00a      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 8006462:	bf00      	nop
 8006464:	e008      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 8006466:	bf00      	nop
 8006468:	e006      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 800646a:	bf00      	nop
 800646c:	e004      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 800646e:	bf00      	nop
 8006470:	e002      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 8006472:	bf00      	nop
 8006474:	e000      	b.n	8006478 <USBH_HandleEnum+0x29c>
    break;
 8006476:	bf00      	nop
  }
  return Status;
 8006478:	7bfb      	ldrb	r3, [r7, #15]
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop

08006484 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 8006496:	bf00      	nop
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr

080064a2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 80064b0:	1c5a      	adds	r2, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f804 	bl	80064c6 <USBH_HandleSof>
}
 80064be:	bf00      	nop
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b082      	sub	sp, #8
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	2b0b      	cmp	r3, #11
 80064d6:	d10a      	bne.n	80064ee <USBH_HandleSof+0x28>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	4798      	blx	r3
  }
}
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 80064f6:	b480      	push	{r7}
 80064f8:	b083      	sub	sp, #12
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2201      	movs	r2, #1
 8006502:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006506:	bf00      	nop
}
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 8006522:	bf00      	nop
}
 8006524:	370c      	adds	r7, #12
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d10f      	bne.n	800657a <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2201      	movs	r2, #1
 800655e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00e      	beq.n	800658a <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006572:	2104      	movs	r1, #4
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	4798      	blx	r3
 8006578:	e007      	b.n	800658a <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006580:	2b01      	cmp	r3, #1
 8006582:	d102      	bne.n	800658a <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800659e:	2200      	movs	r2, #0
 80065a0:	4619      	mov	r1, r3
 80065a2:	f001 f85b 	bl	800765c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f004 fc3c 	bl	800ae36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	791b      	ldrb	r3, [r3, #4]
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fed4 	bl	8007372 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	795b      	ldrb	r3, [r3, #5]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fece 	bl	8007372 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d005      	beq.n	80065f4 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80065ee:	2105      	movs	r1, #5
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f004 fc03 	bl	800ae00 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2203      	movs	r2, #3
 80065fe:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006614:	2200      	movs	r2, #0
 8006616:	4619      	mov	r1, r3
 8006618:	f001 f820 	bl	800765c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8006626:	b580      	push	{r7, lr}
 8006628:	b086      	sub	sp, #24
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 8006634:	f107 030c 	add.w	r3, r7, #12
 8006638:	f04f 32ff 	mov.w	r2, #4294967295
 800663c:	4618      	mov	r0, r3
 800663e:	f001 f84d 	bl	80076dc <osMessageGet>
    if(event.status == osEventMessage)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b10      	cmp	r3, #16
 8006646:	d1f2      	bne.n	800662e <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f7ff fbe7 	bl	8005e1c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800664e:	e7ee      	b.n	800662e <USBH_Process_OS+0x8>

08006650 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800666c:	2200      	movs	r2, #0
 800666e:	4619      	mov	r1, r3
 8006670:	f000 fff4 	bl	800765c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b086      	sub	sp, #24
 8006682:	af02      	add	r7, sp, #8
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	b29b      	uxth	r3, r3
 8006694:	9300      	str	r3, [sp, #0]
 8006696:	4613      	mov	r3, r2
 8006698:	f44f 7280 	mov.w	r2, #256	; 0x100
 800669c:	2100      	movs	r1, #0
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f864 	bl	800676c <USBH_GetDescriptor>
 80066a4:	4603      	mov	r3, r0
 80066a6:	73fb      	strb	r3, [r7, #15]
 80066a8:	7bfb      	ldrb	r3, [r7, #15]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f203 3022 	addw	r0, r3, #802	; 0x322
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80066ba:	78fa      	ldrb	r2, [r7, #3]
 80066bc:	b292      	uxth	r2, r2
 80066be:	4619      	mov	r1, r3
 80066c0:	f000 f918 	bl	80068f4 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af02      	add	r7, sp, #8
 80066d4:	6078      	str	r0, [r7, #4]
 80066d6:	460b      	mov	r3, r1
 80066d8:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	331c      	adds	r3, #28
 80066de:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 80066e0:	887b      	ldrh	r3, [r7, #2]
 80066e2:	9300      	str	r3, [sp, #0]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066ea:	2100      	movs	r1, #0
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f83d 	bl	800676c <USBH_GetDescriptor>
 80066f2:	4603      	mov	r3, r0
 80066f4:	72fb      	strb	r3, [r7, #11]
 80066f6:	7afb      	ldrb	r3, [r7, #11]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d107      	bne.n	800670c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f503 734d 	add.w	r3, r3, #820	; 0x334
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	68f9      	ldr	r1, [r7, #12]
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f964 	bl	80069d4 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800670c:	7afb      	ldrb	r3, [r7, #11]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b088      	sub	sp, #32
 800671a:	af02      	add	r7, sp, #8
 800671c:	60f8      	str	r0, [r7, #12]
 800671e:	607a      	str	r2, [r7, #4]
 8006720:	461a      	mov	r2, r3
 8006722:	460b      	mov	r3, r1
 8006724:	72fb      	strb	r3, [r7, #11]
 8006726:	4613      	mov	r3, r2
 8006728:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	b29b      	uxth	r3, r3
 800672e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006732:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800673a:	893b      	ldrh	r3, [r7, #8]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	460b      	mov	r3, r1
 8006740:	2100      	movs	r1, #0
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 f812 	bl	800676c <USBH_GetDescriptor>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d107      	bne.n	8006762 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006758:	893a      	ldrh	r2, [r7, #8]
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 fa37 	bl	8006bd0 <USBH_ParseStringDesc>
  }
  return status;
 8006762:	7dfb      	ldrb	r3, [r7, #23]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3718      	adds	r7, #24
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	607b      	str	r3, [r7, #4]
 8006776:	460b      	mov	r3, r1
 8006778:	72fb      	strb	r3, [r7, #11]
 800677a:	4613      	mov	r3, r2
 800677c:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	789b      	ldrb	r3, [r3, #2]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d11c      	bne.n	80067c0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8006786:	7afb      	ldrb	r3, [r7, #11]
 8006788:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800678c:	b2da      	uxtb	r2, r3
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2206      	movs	r2, #6
 8006796:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	893a      	ldrh	r2, [r7, #8]
 800679c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800679e:	893b      	ldrh	r3, [r7, #8]
 80067a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80067a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80067a8:	d104      	bne.n	80067b4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f240 4209 	movw	r2, #1033	; 0x409
 80067b0:	829a      	strh	r2, [r3, #20]
 80067b2:	e002      	b.n	80067ba <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	8b3a      	ldrh	r2, [r7, #24]
 80067be:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 80067c0:	8b3b      	ldrh	r3, [r7, #24]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6879      	ldr	r1, [r7, #4]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	f000 fa50 	bl	8006c6c <USBH_CtlReq>
 80067cc:	4603      	mov	r3, r0
}
 80067ce:	4618      	mov	r0, r3
 80067d0:	3710      	adds	r7, #16
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bd80      	pop	{r7, pc}

080067d6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80067d6:	b580      	push	{r7, lr}
 80067d8:	b082      	sub	sp, #8
 80067da:	af00      	add	r7, sp, #0
 80067dc:	6078      	str	r0, [r7, #4]
 80067de:	460b      	mov	r3, r1
 80067e0:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	789b      	ldrb	r3, [r3, #2]
 80067e6:	2b01      	cmp	r3, #1
 80067e8:	d10f      	bne.n	800680a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2205      	movs	r2, #5
 80067f4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80067f6:	78fb      	ldrb	r3, [r7, #3]
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800680a:	2200      	movs	r2, #0
 800680c:	2100      	movs	r1, #0
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fa2c 	bl	8006c6c <USBH_CtlReq>
 8006814:	4603      	mov	r3, r0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	460b      	mov	r3, r1
 8006828:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	789b      	ldrb	r3, [r3, #2]
 800682e:	2b01      	cmp	r3, #1
 8006830:	d10e      	bne.n	8006850 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2209      	movs	r2, #9
 800683c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	887a      	ldrh	r2, [r7, #2]
 8006842:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 8006850:	2200      	movs	r2, #0
 8006852:	2100      	movs	r1, #0
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 fa09 	bl	8006c6c <USBH_CtlReq>
 800685a:	4603      	mov	r3, r0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	789b      	ldrb	r3, [r3, #2]
 8006874:	2b01      	cmp	r3, #1
 8006876:	d10f      	bne.n	8006898 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2203      	movs	r2, #3
 8006882:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8006884:	78fb      	ldrb	r3, [r7, #3]
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8006898:	2200      	movs	r2, #0
 800689a:	2100      	movs	r1, #0
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 f9e5 	bl	8006c6c <USBH_CtlReq>
 80068a2:	4603      	mov	r3, r0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	789b      	ldrb	r3, [r3, #2]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10f      	bne.n	80068e0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2201      	movs	r2, #1
 80068ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80068d2:	78fb      	ldrb	r3, [r7, #3]
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 80068e0:	2200      	movs	r2, #0
 80068e2:	2100      	movs	r1, #0
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f000 f9c1 	bl	8006c6c <USBH_CtlReq>
 80068ea:	4603      	mov	r3, r0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	781a      	ldrb	r2, [r3, #0]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	785a      	ldrb	r2, [r3, #1]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3302      	adds	r3, #2
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b29a      	uxth	r2, r3
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	3303      	adds	r3, #3
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	b29b      	uxth	r3, r3
 8006922:	021b      	lsls	r3, r3, #8
 8006924:	b29b      	uxth	r3, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	b29a      	uxth	r2, r3
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	791a      	ldrb	r2, [r3, #4]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	795a      	ldrb	r2, [r3, #5]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	799a      	ldrb	r2, [r3, #6]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	79da      	ldrb	r2, [r3, #7]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800694e:	88fb      	ldrh	r3, [r7, #6]
 8006950:	2b08      	cmp	r3, #8
 8006952:	d939      	bls.n	80069c8 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	3308      	adds	r3, #8
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	b29a      	uxth	r2, r3
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	3309      	adds	r3, #9
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	b29b      	uxth	r3, r3
 8006964:	021b      	lsls	r3, r3, #8
 8006966:	b29b      	uxth	r3, r3
 8006968:	4313      	orrs	r3, r2
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	330a      	adds	r3, #10
 8006974:	781b      	ldrb	r3, [r3, #0]
 8006976:	b29a      	uxth	r2, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	330b      	adds	r3, #11
 800697c:	781b      	ldrb	r3, [r3, #0]
 800697e:	b29b      	uxth	r3, r3
 8006980:	021b      	lsls	r3, r3, #8
 8006982:	b29b      	uxth	r3, r3
 8006984:	4313      	orrs	r3, r2
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	330c      	adds	r3, #12
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	b29a      	uxth	r2, r3
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	330d      	adds	r3, #13
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	b29b      	uxth	r3, r3
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	b29b      	uxth	r3, r3
 80069a0:	4313      	orrs	r3, r2
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	7b9a      	ldrb	r2, [r3, #14]
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	7bda      	ldrb	r2, [r3, #15]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	7c1a      	ldrb	r2, [r3, #16]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	7c5a      	ldrb	r2, [r3, #17]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	745a      	strb	r2, [r3, #17]
  }
}
 80069c8:	bf00      	nop
 80069ca:	3714      	adds	r7, #20
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	; 0x28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	4613      	mov	r3, r2
 80069e0:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80069e6:	2300      	movs	r3, #0
 80069e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	785a      	ldrb	r2, [r3, #1]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	3302      	adds	r3, #2
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	b29a      	uxth	r2, r3
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	3303      	adds	r3, #3
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	b29b      	uxth	r3, r3
 8006a16:	021b      	lsls	r3, r3, #8
 8006a18:	b29b      	uxth	r3, r3
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	b29a      	uxth	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	791a      	ldrb	r2, [r3, #4]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	795a      	ldrb	r2, [r3, #5]
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	799a      	ldrb	r2, [r3, #6]
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	79da      	ldrb	r2, [r3, #7]
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	7a1a      	ldrb	r2, [r3, #8]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 8006a4a:	88fb      	ldrh	r3, [r7, #6]
 8006a4c:	2b09      	cmp	r3, #9
 8006a4e:	d95f      	bls.n	8006b10 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8006a50:	2309      	movs	r3, #9
 8006a52:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006a58:	e051      	b.n	8006afe <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006a5a:	f107 0316 	add.w	r3, r7, #22
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a62:	f000 f8e8 	bl	8006c36 <USBH_GetNextDesc>
 8006a66:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	785b      	ldrb	r3, [r3, #1]
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d146      	bne.n	8006afe <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8006a70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a74:	221a      	movs	r2, #26
 8006a76:	fb02 f303 	mul.w	r3, r2, r3
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	4413      	add	r3, r2
 8006a80:	3302      	adds	r3, #2
 8006a82:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 8006a84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a86:	69f8      	ldr	r0, [r7, #28]
 8006a88:	f000 f846 	bl	8006b18 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006a96:	e022      	b.n	8006ade <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 8006a98:	f107 0316 	add.w	r3, r7, #22
 8006a9c:	4619      	mov	r1, r3
 8006a9e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006aa0:	f000 f8c9 	bl	8006c36 <USBH_GetNextDesc>
 8006aa4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8006aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa8:	785b      	ldrb	r3, [r3, #1]
 8006aaa:	2b05      	cmp	r3, #5
 8006aac:	d117      	bne.n	8006ade <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8006aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ab2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ab6:	3201      	adds	r2, #1
 8006ab8:	00d2      	lsls	r2, r2, #3
 8006aba:	211a      	movs	r1, #26
 8006abc:	fb01 f303 	mul.w	r3, r1, r3
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3308      	adds	r3, #8
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	4413      	add	r3, r2
 8006ac8:	3304      	adds	r3, #4
 8006aca:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 8006acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006ace:	69b8      	ldr	r0, [r7, #24]
 8006ad0:	f000 f851 	bl	8006b76 <USBH_ParseEPDesc>
            ep_ix++;
 8006ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006ad8:	3301      	adds	r3, #1
 8006ada:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	791b      	ldrb	r3, [r3, #4]
 8006ae2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d204      	bcs.n	8006af4 <USBH_ParseCfgDesc+0x120>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	885a      	ldrh	r2, [r3, #2]
 8006aee:	8afb      	ldrh	r3, [r7, #22]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d8d1      	bhi.n	8006a98 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 8006af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006af8:	3301      	adds	r3, #1
 8006afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8006afe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d804      	bhi.n	8006b10 <USBH_ParseCfgDesc+0x13c>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	885a      	ldrh	r2, [r3, #2]
 8006b0a:	8afb      	ldrh	r3, [r7, #22]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d8a4      	bhi.n	8006a5a <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8006b10:	bf00      	nop
 8006b12:	3728      	adds	r7, #40	; 0x28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	781a      	ldrb	r2, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	785a      	ldrb	r2, [r3, #1]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	789a      	ldrb	r2, [r3, #2]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	78da      	ldrb	r2, [r3, #3]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	791a      	ldrb	r2, [r3, #4]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	795a      	ldrb	r2, [r3, #5]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	799a      	ldrb	r2, [r3, #6]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	79da      	ldrb	r2, [r3, #7]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	7a1a      	ldrb	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	721a      	strb	r2, [r3, #8]
}
 8006b6a:	bf00      	nop
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b74:	4770      	bx	lr

08006b76 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 8006b76:	b480      	push	{r7}
 8006b78:	b083      	sub	sp, #12
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	6078      	str	r0, [r7, #4]
 8006b7e:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	781a      	ldrb	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	785a      	ldrb	r2, [r3, #1]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	789a      	ldrb	r2, [r3, #2]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	78da      	ldrb	r2, [r3, #3]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	3304      	adds	r3, #4
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	3305      	adds	r3, #5
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	021b      	lsls	r3, r3, #8
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	799a      	ldrb	r2, [r3, #6]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	719a      	strb	r2, [r3, #6]
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b087      	sub	sp, #28
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	60f8      	str	r0, [r7, #12]
 8006bd8:	60b9      	str	r1, [r7, #8]
 8006bda:	4613      	mov	r3, r2
 8006bdc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	3301      	adds	r3, #1
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	d120      	bne.n	8006c2a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	1e9a      	subs	r2, r3, #2
 8006bee:	88fb      	ldrh	r3, [r7, #6]
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	bf28      	it	cs
 8006bf4:	4613      	movcs	r3, r2
 8006bf6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3302      	adds	r3, #2
 8006bfc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8006bfe:	2300      	movs	r3, #0
 8006c00:	82fb      	strh	r3, [r7, #22]
 8006c02:	e00b      	b.n	8006c1c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8006c04:	8afb      	ldrh	r3, [r7, #22]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	781a      	ldrb	r2, [r3, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3301      	adds	r3, #1
 8006c14:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8006c16:	8afb      	ldrh	r3, [r7, #22]
 8006c18:	3302      	adds	r3, #2
 8006c1a:	82fb      	strh	r3, [r7, #22]
 8006c1c:	8afa      	ldrh	r2, [r7, #22]
 8006c1e:	8abb      	ldrh	r3, [r7, #20]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d3ef      	bcc.n	8006c04 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	2200      	movs	r2, #0
 8006c28:	701a      	strb	r2, [r3, #0]
  }
}
 8006c2a:	bf00      	nop
 8006c2c:	371c      	adds	r7, #28
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr

08006c36 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 8006c36:	b480      	push	{r7}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
 8006c3e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	881a      	ldrh	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	781b      	ldrb	r3, [r3, #0]
 8006c56:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4413      	add	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  return(pnext);
 8006c5e:	68fb      	ldr	r3, [r7, #12]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3714      	adds	r7, #20
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	4613      	mov	r3, r2
 8006c78:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	789b      	ldrb	r3, [r3, #2]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d002      	beq.n	8006c8c <USBH_CtlReq+0x20>
 8006c86:	2b02      	cmp	r3, #2
 8006c88:	d01d      	beq.n	8006cc6 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 8006c8a:	e042      	b.n	8006d12 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	68ba      	ldr	r2, [r7, #8]
 8006c90:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	88fa      	ldrh	r2, [r7, #6]
 8006c96:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2203      	movs	r2, #3
 8006cac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	f000 fccc 	bl	800765c <osMessagePut>
    break;
 8006cc4:	e025      	b.n	8006d12 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f000 f828 	bl	8006d1c <USBH_HandleControl>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d108      	bne.n	8006ce8 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2201      	movs	r2, #1
 8006cda:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75fb      	strb	r3, [r7, #23]
    break;
 8006ce6:	e013      	b.n	8006d10 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 8006ce8:	7dfb      	ldrb	r3, [r7, #23]
 8006cea:	2b03      	cmp	r3, #3
 8006cec:	d108      	bne.n	8006d00 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006cfa:	2303      	movs	r3, #3
 8006cfc:	75fb      	strb	r3, [r7, #23]
    break;
 8006cfe:	e007      	b.n	8006d10 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 8006d00:	7dfb      	ldrb	r3, [r7, #23]
 8006d02:	2b02      	cmp	r3, #2
 8006d04:	d104      	bne.n	8006d10 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2201      	movs	r2, #1
 8006d0a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	75fb      	strb	r3, [r7, #23]
    break;
 8006d10:	bf00      	nop
  }
  return status;
 8006d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006d24:	2301      	movs	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	7e1b      	ldrb	r3, [r3, #24]
 8006d30:	3b01      	subs	r3, #1
 8006d32:	2b0a      	cmp	r3, #10
 8006d34:	f200 821f 	bhi.w	8007176 <USBH_HandleControl+0x45a>
 8006d38:	a201      	add	r2, pc, #4	; (adr r2, 8006d40 <USBH_HandleControl+0x24>)
 8006d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3e:	bf00      	nop
 8006d40:	08006d6d 	.word	0x08006d6d
 8006d44:	08006d87 	.word	0x08006d87
 8006d48:	08006e29 	.word	0x08006e29
 8006d4c:	08006e4f 	.word	0x08006e4f
 8006d50:	08006edb 	.word	0x08006edb
 8006d54:	08006f07 	.word	0x08006f07
 8006d58:	08006fc9 	.word	0x08006fc9
 8006d5c:	08006feb 	.word	0x08006feb
 8006d60:	0800707d 	.word	0x0800707d
 8006d64:	080070a5 	.word	0x080070a5
 8006d68:	08007137 	.word	0x08007137
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	f103 0110 	add.w	r1, r3, #16
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	795b      	ldrb	r3, [r3, #5]
 8006d76:	461a      	mov	r2, r3
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fa0d 	bl	8007198 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2202      	movs	r2, #2
 8006d82:	761a      	strb	r2, [r3, #24]
    break;
 8006d84:	e202      	b.n	800718c <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	795b      	ldrb	r3, [r3, #5]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f004 f93f 	bl	800b010 <USBH_LL_GetURBState>
 8006d92:	4603      	mov	r3, r0
 8006d94:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 8006d96:	7bbb      	ldrb	r3, [r7, #14]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d12c      	bne.n	8006df6 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	7c1b      	ldrb	r3, [r3, #16]
 8006da0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006da4:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	8adb      	ldrh	r3, [r3, #22]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 8006dae:	7b7b      	ldrb	r3, [r7, #13]
 8006db0:	2b80      	cmp	r3, #128	; 0x80
 8006db2:	d103      	bne.n	8006dbc <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2203      	movs	r2, #3
 8006db8:	761a      	strb	r2, [r3, #24]
 8006dba:	e00d      	b.n	8006dd8 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2205      	movs	r2, #5
 8006dc0:	761a      	strb	r2, [r3, #24]
 8006dc2:	e009      	b.n	8006dd8 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 8006dc4:	7b7b      	ldrb	r3, [r7, #13]
 8006dc6:	2b80      	cmp	r3, #128	; 0x80
 8006dc8:	d103      	bne.n	8006dd2 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2209      	movs	r2, #9
 8006dce:	761a      	strb	r2, [r3, #24]
 8006dd0:	e002      	b.n	8006dd8 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2207      	movs	r2, #7
 8006dd6:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2203      	movs	r2, #3
 8006ddc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006dec:	2200      	movs	r2, #0
 8006dee:	4619      	mov	r1, r3
 8006df0:	f000 fc34 	bl	800765c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006df4:	e1c1      	b.n	800717a <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b04      	cmp	r3, #4
 8006dfa:	d003      	beq.n	8006e04 <USBH_HandleControl+0xe8>
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	f040 81bb 	bne.w	800717a <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	220b      	movs	r2, #11
 8006e08:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2203      	movs	r2, #3
 8006e0e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4619      	mov	r1, r3
 8006e22:	f000 fc1b 	bl	800765c <osMessagePut>
    break;
 8006e26:	e1a8      	b.n	800717a <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6899      	ldr	r1, [r3, #8]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	899a      	ldrh	r2, [r3, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	791b      	ldrb	r3, [r3, #4]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 f9e8 	bl	8007216 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2204      	movs	r2, #4
 8006e4a:	761a      	strb	r2, [r3, #24]
    break;
 8006e4c:	e19e      	b.n	800718c <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	791b      	ldrb	r3, [r3, #4]
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f004 f8db 	bl	800b010 <USBH_LL_GetURBState>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d110      	bne.n	8006e86 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2209      	movs	r2, #9
 8006e68:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2203      	movs	r2, #3
 8006e6e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e7e:	2200      	movs	r2, #0
 8006e80:	4619      	mov	r1, r3
 8006e82:	f000 fbeb 	bl	800765c <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	2b05      	cmp	r3, #5
 8006e8a:	d110      	bne.n	8006eae <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2203      	movs	r2, #3
 8006e94:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4619      	mov	r1, r3
 8006ea8:	f000 fbd8 	bl	800765c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006eac:	e167      	b.n	800717e <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 8006eae:	7bbb      	ldrb	r3, [r7, #14]
 8006eb0:	2b04      	cmp	r3, #4
 8006eb2:	f040 8164 	bne.w	800717e <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	220b      	movs	r2, #11
 8006eba:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	f000 fbc2 	bl	800765c <osMessagePut>
    break;
 8006ed8:	e151      	b.n	800717e <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6899      	ldr	r1, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	899a      	ldrh	r2, [r3, #12]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	7958      	ldrb	r0, [r3, #5]
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	9300      	str	r3, [sp, #0]
 8006eea:	4603      	mov	r3, r0
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f000 f96d 	bl	80071cc <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2206      	movs	r2, #6
 8006f02:	761a      	strb	r2, [r3, #24]
    break;
 8006f04:	e142      	b.n	800718c <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	795b      	ldrb	r3, [r3, #5]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f004 f87f 	bl	800b010 <USBH_LL_GetURBState>
 8006f12:	4603      	mov	r3, r0
 8006f14:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d111      	bne.n	8006f40 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2207      	movs	r2, #7
 8006f20:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2203      	movs	r2, #3
 8006f26:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f36:	2200      	movs	r2, #0
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f000 fb8f 	bl	800765c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8006f3e:	e120      	b.n	8007182 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2b05      	cmp	r3, #5
 8006f44:	d113      	bne.n	8006f6e <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	220c      	movs	r2, #12
 8006f4a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 8006f4c:	2303      	movs	r3, #3
 8006f4e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2203      	movs	r2, #3
 8006f54:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f64:	2200      	movs	r2, #0
 8006f66:	4619      	mov	r1, r3
 8006f68:	f000 fb78 	bl	800765c <osMessagePut>
    break;
 8006f6c:	e109      	b.n	8007182 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 8006f6e:	7bbb      	ldrb	r3, [r7, #14]
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d111      	bne.n	8006f98 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2205      	movs	r2, #5
 8006f78:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2203      	movs	r2, #3
 8006f7e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006f8e:	2200      	movs	r2, #0
 8006f90:	4619      	mov	r1, r3
 8006f92:	f000 fb63 	bl	800765c <osMessagePut>
    break;
 8006f96:	e0f4      	b.n	8007182 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 8006f98:	7bbb      	ldrb	r3, [r7, #14]
 8006f9a:	2b04      	cmp	r3, #4
 8006f9c:	f040 80f1 	bne.w	8007182 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	220b      	movs	r2, #11
 8006fa4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2203      	movs	r2, #3
 8006fae:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	f000 fb4b 	bl	800765c <osMessagePut>
    break;
 8006fc6:	e0dc      	b.n	8007182 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	791b      	ldrb	r3, [r3, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	2100      	movs	r1, #0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 f920 	bl	8007216 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8006fdc:	b29a      	uxth	r2, r3
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2208      	movs	r2, #8
 8006fe6:	761a      	strb	r2, [r3, #24]

    break;
 8006fe8:	e0d0      	b.n	800718c <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	791b      	ldrb	r3, [r3, #4]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f004 f80d 	bl	800b010 <USBH_LL_GetURBState>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 8006ffa:	7bbb      	ldrb	r3, [r7, #14]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d113      	bne.n	8007028 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	220d      	movs	r2, #13
 8007004:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 8007006:	2300      	movs	r3, #0
 8007008:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2203      	movs	r2, #3
 800700e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800701e:	2200      	movs	r2, #0
 8007020:	4619      	mov	r1, r3
 8007022:	f000 fb1b 	bl	800765c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 8007026:	e0ae      	b.n	8007186 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d111      	bne.n	8007052 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	220b      	movs	r2, #11
 8007032:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2203      	movs	r2, #3
 8007038:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007048:	2200      	movs	r2, #0
 800704a:	4619      	mov	r1, r3
 800704c:	f000 fb06 	bl	800765c <osMessagePut>
    break;
 8007050:	e099      	b.n	8007186 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	2b05      	cmp	r3, #5
 8007056:	f040 8096 	bne.w	8007186 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800705a:	2303      	movs	r3, #3
 800705c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2203      	movs	r2, #3
 8007062:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007072:	2200      	movs	r2, #0
 8007074:	4619      	mov	r1, r3
 8007076:	f000 faf1 	bl	800765c <osMessagePut>
    break;
 800707a:	e084      	b.n	8007186 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	795a      	ldrb	r2, [r3, #5]
 8007080:	2301      	movs	r3, #1
 8007082:	9300      	str	r3, [sp, #0]
 8007084:	4613      	mov	r3, r2
 8007086:	2200      	movs	r2, #0
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f89e 	bl	80071cc <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 8007096:	b29a      	uxth	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	220a      	movs	r2, #10
 80070a0:	761a      	strb	r2, [r3, #24]
    break;
 80070a2:	e073      	b.n	800718c <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	795b      	ldrb	r3, [r3, #5]
 80070a8:	4619      	mov	r1, r3
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f003 ffb0 	bl	800b010 <USBH_LL_GetURBState>
 80070b0:	4603      	mov	r3, r0
 80070b2:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 80070b4:	7bbb      	ldrb	r3, [r7, #14]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d113      	bne.n	80070e2 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 80070ba:	2300      	movs	r3, #0
 80070bc:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	220d      	movs	r2, #13
 80070c2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2203      	movs	r2, #3
 80070c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80070d8:	2200      	movs	r2, #0
 80070da:	4619      	mov	r1, r3
 80070dc:	f000 fabe 	bl	800765c <osMessagePut>
#endif
#endif
      }

    }
    break;
 80070e0:	e053      	b.n	800718a <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d111      	bne.n	800710c <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2209      	movs	r2, #9
 80070ec:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2203      	movs	r2, #3
 80070f2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007102:	2200      	movs	r2, #0
 8007104:	4619      	mov	r1, r3
 8007106:	f000 faa9 	bl	800765c <osMessagePut>
    break;
 800710a:	e03e      	b.n	800718a <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800710c:	7bbb      	ldrb	r3, [r7, #14]
 800710e:	2b04      	cmp	r3, #4
 8007110:	d13b      	bne.n	800718a <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	220b      	movs	r2, #11
 8007116:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2203      	movs	r2, #3
 800711c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800712c:	2200      	movs	r2, #0
 800712e:	4619      	mov	r1, r3
 8007130:	f000 fa94 	bl	800765c <osMessagePut>
    break;
 8007134:	e029      	b.n	800718a <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7e5b      	ldrb	r3, [r3, #25]
 800713a:	3301      	adds	r3, #1
 800713c:	b2da      	uxtb	r2, r3
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	765a      	strb	r2, [r3, #25]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	7e5b      	ldrb	r3, [r3, #25]
 8007146:	2b02      	cmp	r3, #2
 8007148:	d809      	bhi.n	800715e <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f003 fe73 	bl	800ae36 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800715c:	e016      	b.n	800718c <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007164:	2106      	movs	r1, #6
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 8007170:	2302      	movs	r3, #2
 8007172:	73fb      	strb	r3, [r7, #15]
    break;
 8007174:	e00a      	b.n	800718c <USBH_HandleControl+0x470>

  default:
    break;
 8007176:	bf00      	nop
 8007178:	e008      	b.n	800718c <USBH_HandleControl+0x470>
    break;
 800717a:	bf00      	nop
 800717c:	e006      	b.n	800718c <USBH_HandleControl+0x470>
    break;
 800717e:	bf00      	nop
 8007180:	e004      	b.n	800718c <USBH_HandleControl+0x470>
    break;
 8007182:	bf00      	nop
 8007184:	e002      	b.n	800718c <USBH_HandleControl+0x470>
    break;
 8007186:	bf00      	nop
 8007188:	e000      	b.n	800718c <USBH_HandleControl+0x470>
    break;
 800718a:	bf00      	nop
  }
  return status;
 800718c:	7bfb      	ldrb	r3, [r7, #15]
}
 800718e:	4618      	mov	r0, r3
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop

08007198 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af04      	add	r7, sp, #16
 800719e:	60f8      	str	r0, [r7, #12]
 80071a0:	60b9      	str	r1, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071a6:	79f9      	ldrb	r1, [r7, #7]
 80071a8:	2300      	movs	r3, #0
 80071aa:	9303      	str	r3, [sp, #12]
 80071ac:	2308      	movs	r3, #8
 80071ae:	9302      	str	r3, [sp, #8]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	9301      	str	r3, [sp, #4]
 80071b4:	2300      	movs	r3, #0
 80071b6:	9300      	str	r3, [sp, #0]
 80071b8:	2300      	movs	r3, #0
 80071ba:	2200      	movs	r2, #0
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f003 fef6 	bl	800afae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af04      	add	r7, sp, #16
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	4611      	mov	r1, r2
 80071d8:	461a      	mov	r2, r3
 80071da:	460b      	mov	r3, r1
 80071dc:	80fb      	strh	r3, [r7, #6]
 80071de:	4613      	mov	r3, r2
 80071e0:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d001      	beq.n	80071f0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80071f0:	7979      	ldrb	r1, [r7, #5]
 80071f2:	7e3b      	ldrb	r3, [r7, #24]
 80071f4:	9303      	str	r3, [sp, #12]
 80071f6:	88fb      	ldrh	r3, [r7, #6]
 80071f8:	9302      	str	r3, [sp, #8]
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	2301      	movs	r3, #1
 8007200:	9300      	str	r3, [sp, #0]
 8007202:	2300      	movs	r3, #0
 8007204:	2200      	movs	r2, #0
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f003 fed1 	bl	800afae <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800720c:	2300      	movs	r3, #0
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b088      	sub	sp, #32
 800721a:	af04      	add	r7, sp, #16
 800721c:	60f8      	str	r0, [r7, #12]
 800721e:	60b9      	str	r1, [r7, #8]
 8007220:	4611      	mov	r1, r2
 8007222:	461a      	mov	r2, r3
 8007224:	460b      	mov	r3, r1
 8007226:	80fb      	strh	r3, [r7, #6]
 8007228:	4613      	mov	r3, r2
 800722a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800722c:	7979      	ldrb	r1, [r7, #5]
 800722e:	2300      	movs	r3, #0
 8007230:	9303      	str	r3, [sp, #12]
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	9302      	str	r3, [sp, #8]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	2301      	movs	r3, #1
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	2300      	movs	r3, #0
 8007240:	2201      	movs	r2, #1
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f003 feb3 	bl	800afae <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007248:	2300      	movs	r3, #0

}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b088      	sub	sp, #32
 8007256:	af04      	add	r7, sp, #16
 8007258:	60f8      	str	r0, [r7, #12]
 800725a:	60b9      	str	r1, [r7, #8]
 800725c:	4611      	mov	r1, r2
 800725e:	461a      	mov	r2, r3
 8007260:	460b      	mov	r3, r1
 8007262:	80fb      	strh	r3, [r7, #6]
 8007264:	4613      	mov	r3, r2
 8007266:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800726e:	2b00      	cmp	r3, #0
 8007270:	d001      	beq.n	8007276 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007272:	2300      	movs	r3, #0
 8007274:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 8007276:	7979      	ldrb	r1, [r7, #5]
 8007278:	7e3b      	ldrb	r3, [r7, #24]
 800727a:	9303      	str	r3, [sp, #12]
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	9302      	str	r3, [sp, #8]
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	9301      	str	r3, [sp, #4]
 8007284:	2301      	movs	r3, #1
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	2302      	movs	r3, #2
 800728a:	2200      	movs	r2, #0
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f003 fe8e 	bl	800afae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af04      	add	r7, sp, #16
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	460b      	mov	r3, r1
 80072ac:	80fb      	strh	r3, [r7, #6]
 80072ae:	4613      	mov	r3, r2
 80072b0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 80072b2:	7979      	ldrb	r1, [r7, #5]
 80072b4:	2300      	movs	r3, #0
 80072b6:	9303      	str	r3, [sp, #12]
 80072b8:	88fb      	ldrh	r3, [r7, #6]
 80072ba:	9302      	str	r3, [sp, #8]
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	9301      	str	r3, [sp, #4]
 80072c0:	2301      	movs	r3, #1
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	2302      	movs	r3, #2
 80072c6:	2201      	movs	r2, #1
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f003 fe70 	bl	800afae <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af04      	add	r7, sp, #16
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	4608      	mov	r0, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	461a      	mov	r2, r3
 80072e6:	4603      	mov	r3, r0
 80072e8:	70fb      	strb	r3, [r7, #3]
 80072ea:	460b      	mov	r3, r1
 80072ec:	70bb      	strb	r3, [r7, #2]
 80072ee:	4613      	mov	r3, r2
 80072f0:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 80072f2:	7878      	ldrb	r0, [r7, #1]
 80072f4:	78ba      	ldrb	r2, [r7, #2]
 80072f6:	78f9      	ldrb	r1, [r7, #3]
 80072f8:	8b3b      	ldrh	r3, [r7, #24]
 80072fa:	9302      	str	r3, [sp, #8]
 80072fc:	7d3b      	ldrb	r3, [r7, #20]
 80072fe:	9301      	str	r3, [sp, #4]
 8007300:	7c3b      	ldrb	r3, [r7, #16]
 8007302:	9300      	str	r3, [sp, #0]
 8007304:	4603      	mov	r3, r0
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f003 fe03 	bl	800af12 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800730c:	2300      	movs	r3, #0

}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b082      	sub	sp, #8
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
 800731e:	460b      	mov	r3, r1
 8007320:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 8007322:	78fb      	ldrb	r3, [r7, #3]
 8007324:	4619      	mov	r1, r3
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f003 fe22 	bl	800af70 <USBH_LL_ClosePipe>

  return USBH_OK;
 800732c:	2300      	movs	r3, #0

}
 800732e:	4618      	mov	r0, r3
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}

08007336 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b084      	sub	sp, #16
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
 800733e:	460b      	mov	r3, r1
 8007340:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f000 f831 	bl	80073aa <USBH_GetFreePipe>
 8007348:	4603      	mov	r3, r0
 800734a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800734c:	89fb      	ldrh	r3, [r7, #14]
 800734e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007352:	4293      	cmp	r3, r2
 8007354:	d007      	beq.n	8007366 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	89fa      	ldrh	r2, [r7, #14]
 800735a:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	32e0      	adds	r2, #224	; 0xe0
 8007362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 8007366:	89fb      	ldrh	r3, [r7, #14]
 8007368:	b2db      	uxtb	r3, r3
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007372:	b480      	push	{r7}
 8007374:	b083      	sub	sp, #12
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800737e:	78fb      	ldrb	r3, [r7, #3]
 8007380:	2b0a      	cmp	r3, #10
 8007382:	d80b      	bhi.n	800739c <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	32e0      	adds	r2, #224	; 0xe0
 800738a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	f3c3 010e 	ubfx	r1, r3, #0, #15
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	32e0      	adds	r2, #224	; 0xe0
 8007398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	370c      	adds	r7, #12
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80073b2:	2300      	movs	r3, #0
 80073b4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80073b6:	2300      	movs	r3, #0
 80073b8:	73fb      	strb	r3, [r7, #15]
 80073ba:	e00e      	b.n	80073da <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80073bc:	7bfa      	ldrb	r2, [r7, #15]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32e0      	adds	r2, #224	; 0xe0
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d102      	bne.n	80073d4 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	b29b      	uxth	r3, r3
 80073d2:	e007      	b.n	80073e4 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	3301      	adds	r3, #1
 80073d8:	73fb      	strb	r3, [r7, #15]
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b0a      	cmp	r3, #10
 80073de:	d9ed      	bls.n	80073bc <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 80073e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b085      	sub	sp, #20
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	4603      	mov	r3, r0
 80073f8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80073fa:	2300      	movs	r3, #0
 80073fc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80073fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007402:	2b84      	cmp	r3, #132	; 0x84
 8007404:	d005      	beq.n	8007412 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007406:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	4413      	add	r3, r2
 800740e:	3303      	adds	r3, #3
 8007410:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007412:	68fb      	ldr	r3, [r7, #12]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007426:	f3ef 8305 	mrs	r3, IPSR
 800742a:	607b      	str	r3, [r7, #4]
  return(result);
 800742c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800742e:	2b00      	cmp	r3, #0
 8007430:	bf14      	ite	ne
 8007432:	2301      	movne	r3, #1
 8007434:	2300      	moveq	r3, #0
 8007436:	b2db      	uxtb	r3, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007448:	f001 f9b4 	bl	80087b4 <vTaskStartScheduler>
  
  return osOK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	bd80      	pop	{r7, pc}

08007452 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007452:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007454:	b089      	sub	sp, #36	; 0x24
 8007456:	af04      	add	r7, sp, #16
 8007458:	6078      	str	r0, [r7, #4]
 800745a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	695b      	ldr	r3, [r3, #20]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d020      	beq.n	80074a6 <osThreadCreate+0x54>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	699b      	ldr	r3, [r3, #24]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01c      	beq.n	80074a6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	685c      	ldr	r4, [r3, #4]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681d      	ldr	r5, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	691e      	ldr	r6, [r3, #16]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff ffb6 	bl	80073f0 <makeFreeRtosPriority>
 8007484:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	695b      	ldr	r3, [r3, #20]
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800748e:	9202      	str	r2, [sp, #8]
 8007490:	9301      	str	r3, [sp, #4]
 8007492:	9100      	str	r1, [sp, #0]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	4632      	mov	r2, r6
 8007498:	4629      	mov	r1, r5
 800749a:	4620      	mov	r0, r4
 800749c:	f000 ffd0 	bl	8008440 <xTaskCreateStatic>
 80074a0:	4603      	mov	r3, r0
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	e01c      	b.n	80074e0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685c      	ldr	r4, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80074b2:	b29e      	uxth	r6, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f7ff ff98 	bl	80073f0 <makeFreeRtosPriority>
 80074c0:	4602      	mov	r2, r0
 80074c2:	f107 030c 	add.w	r3, r7, #12
 80074c6:	9301      	str	r3, [sp, #4]
 80074c8:	9200      	str	r2, [sp, #0]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	4632      	mov	r2, r6
 80074ce:	4629      	mov	r1, r5
 80074d0:	4620      	mov	r0, r4
 80074d2:	f001 f80e 	bl	80084f2 <xTaskCreate>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d001      	beq.n	80074e0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	e000      	b.n	80074e2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80074e0:	68fb      	ldr	r3, [r7, #12]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080074ea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80074ea:	b580      	push	{r7, lr}
 80074ec:	b084      	sub	sp, #16
 80074ee:	af00      	add	r7, sp, #0
 80074f0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d001      	beq.n	8007500 <osDelay+0x16>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	e000      	b.n	8007502 <osDelay+0x18>
 8007500:	2301      	movs	r3, #1
 8007502:	4618      	mov	r0, r3
 8007504:	f001 f922 	bl	800874c <vTaskDelay>
  
  return osOK;
 8007508:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	460b      	mov	r3, r1
 800751e:	607a      	str	r2, [r7, #4]
 8007520:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d013      	beq.n	8007552 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800752a:	7afb      	ldrb	r3, [r7, #11]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d101      	bne.n	8007534 <osTimerCreate+0x20>
 8007530:	2101      	movs	r1, #1
 8007532:	e000      	b.n	8007536 <osTimerCreate+0x22>
 8007534:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800753a:	68fa      	ldr	r2, [r7, #12]
 800753c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800753e:	9201      	str	r2, [sp, #4]
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	460a      	mov	r2, r1
 8007546:	2101      	movs	r1, #1
 8007548:	480b      	ldr	r0, [pc, #44]	; (8007578 <osTimerCreate+0x64>)
 800754a:	f001 fee2 	bl	8009312 <xTimerCreateStatic>
 800754e:	4603      	mov	r3, r0
 8007550:	e00e      	b.n	8007570 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 8007552:	7afb      	ldrb	r3, [r7, #11]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d101      	bne.n	800755c <osTimerCreate+0x48>
 8007558:	2201      	movs	r2, #1
 800755a:	e000      	b.n	800755e <osTimerCreate+0x4a>
 800755c:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2101      	movs	r1, #1
 8007568:	4803      	ldr	r0, [pc, #12]	; (8007578 <osTimerCreate+0x64>)
 800756a:	f001 feb1 	bl	80092d0 <xTimerCreate>
 800756e:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 8007570:	4618      	mov	r0, r3
 8007572:	3710      	adds	r7, #16
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	0800b428 	.word	0x0800b428

0800757c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af02      	add	r7, sp, #8
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d101      	bne.n	800759c <osTimerStart+0x20>
    ticks = 1;
 8007598:	2301      	movs	r3, #1
 800759a:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 800759c:	f7ff ff40 	bl	8007420 <inHandlerMode>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d01b      	beq.n	80075de <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80075a6:	f107 020c 	add.w	r2, r7, #12
 80075aa:	2300      	movs	r3, #0
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	4613      	mov	r3, r2
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	2109      	movs	r1, #9
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 ff19 	bl	80093ec <xTimerGenericCommand>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d002      	beq.n	80075c6 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 80075c0:	23ff      	movs	r3, #255	; 0xff
 80075c2:	617b      	str	r3, [r7, #20]
 80075c4:	e018      	b.n	80075f8 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d015      	beq.n	80075f8 <osTimerStart+0x7c>
 80075cc:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <osTimerStart+0x88>)
 80075ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	f3bf 8f6f 	isb	sy
 80075dc:	e00c      	b.n	80075f8 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 80075de:	2300      	movs	r3, #0
 80075e0:	9300      	str	r3, [sp, #0]
 80075e2:	2300      	movs	r3, #0
 80075e4:	693a      	ldr	r2, [r7, #16]
 80075e6:	2104      	movs	r1, #4
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	f001 feff 	bl	80093ec <xTimerGenericCommand>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d001      	beq.n	80075f8 <osTimerStart+0x7c>
      result = osErrorOS;
 80075f4:	23ff      	movs	r3, #255	; 0xff
 80075f6:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 80075f8:	697b      	ldr	r3, [r7, #20]
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3718      	adds	r7, #24
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	e000ed04 	.word	0xe000ed04

08007608 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007608:	b590      	push	{r4, r7, lr}
 800760a:	b085      	sub	sp, #20
 800760c:	af02      	add	r7, sp, #8
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d012      	beq.n	8007640 <osMessageCreate+0x38>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	68db      	ldr	r3, [r3, #12]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00e      	beq.n	8007640 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6818      	ldr	r0, [r3, #0]
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6859      	ldr	r1, [r3, #4]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	689a      	ldr	r2, [r3, #8]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	68dc      	ldr	r4, [r3, #12]
 8007632:	2300      	movs	r3, #0
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	4623      	mov	r3, r4
 8007638:	f000 f9e0 	bl	80079fc <xQueueGenericCreateStatic>
 800763c:	4603      	mov	r3, r0
 800763e:	e008      	b.n	8007652 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6818      	ldr	r0, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	2200      	movs	r2, #0
 800764a:	4619      	mov	r1, r3
 800764c:	f000 fa48 	bl	8007ae0 <xQueueGenericCreate>
 8007650:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	bd90      	pop	{r4, r7, pc}
	...

0800765c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b086      	sub	sp, #24
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007668:	2300      	movs	r3, #0
 800766a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <osMessagePut+0x1e>
    ticks = 1;
 8007676:	2301      	movs	r3, #1
 8007678:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800767a:	f7ff fed1 	bl	8007420 <inHandlerMode>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d018      	beq.n	80076b6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007684:	f107 0210 	add.w	r2, r7, #16
 8007688:	f107 0108 	add.w	r1, r7, #8
 800768c:	2300      	movs	r3, #0
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fb7c 	bl	8007d8c <xQueueGenericSendFromISR>
 8007694:	4603      	mov	r3, r0
 8007696:	2b01      	cmp	r3, #1
 8007698:	d001      	beq.n	800769e <osMessagePut+0x42>
      return osErrorOS;
 800769a:	23ff      	movs	r3, #255	; 0xff
 800769c:	e018      	b.n	80076d0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d014      	beq.n	80076ce <osMessagePut+0x72>
 80076a4:	4b0c      	ldr	r3, [pc, #48]	; (80076d8 <osMessagePut+0x7c>)
 80076a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	f3bf 8f4f 	dsb	sy
 80076b0:	f3bf 8f6f 	isb	sy
 80076b4:	e00b      	b.n	80076ce <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80076b6:	f107 0108 	add.w	r1, r7, #8
 80076ba:	2300      	movs	r3, #0
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fa6a 	bl	8007b98 <xQueueGenericSend>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b01      	cmp	r3, #1
 80076c8:	d001      	beq.n	80076ce <osMessagePut+0x72>
      return osErrorOS;
 80076ca:	23ff      	movs	r3, #255	; 0xff
 80076cc:	e000      	b.n	80076d0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80076ce:	2300      	movs	r3, #0
}
 80076d0:	4618      	mov	r0, r3
 80076d2:	3718      	adds	r7, #24
 80076d4:	46bd      	mov	sp, r7
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	e000ed04 	.word	0xe000ed04

080076dc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80076dc:	b590      	push	{r4, r7, lr}
 80076de:	b08b      	sub	sp, #44	; 0x2c
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80076ec:	2300      	movs	r3, #0
 80076ee:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <osMessageGet+0x30>
    event.status = osErrorParameter;
 80076f6:	2380      	movs	r3, #128	; 0x80
 80076f8:	617b      	str	r3, [r7, #20]
    return event;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	461c      	mov	r4, r3
 80076fe:	f107 0314 	add.w	r3, r7, #20
 8007702:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007706:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800770a:	e054      	b.n	80077b6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800770c:	2300      	movs	r3, #0
 800770e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007710:	2300      	movs	r3, #0
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d103      	bne.n	8007724 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800771c:	f04f 33ff 	mov.w	r3, #4294967295
 8007720:	627b      	str	r3, [r7, #36]	; 0x24
 8007722:	e009      	b.n	8007738 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d006      	beq.n	8007738 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800772e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007730:	2b00      	cmp	r3, #0
 8007732:	d101      	bne.n	8007738 <osMessageGet+0x5c>
      ticks = 1;
 8007734:	2301      	movs	r3, #1
 8007736:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007738:	f7ff fe72 	bl	8007420 <inHandlerMode>
 800773c:	4603      	mov	r3, r0
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01c      	beq.n	800777c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007742:	f107 0220 	add.w	r2, r7, #32
 8007746:	f107 0314 	add.w	r3, r7, #20
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	68b8      	ldr	r0, [r7, #8]
 8007750:	f000 fc8c 	bl	800806c <xQueueReceiveFromISR>
 8007754:	4603      	mov	r3, r0
 8007756:	2b01      	cmp	r3, #1
 8007758:	d102      	bne.n	8007760 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800775a:	2310      	movs	r3, #16
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	e001      	b.n	8007764 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007760:	2300      	movs	r3, #0
 8007762:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d01d      	beq.n	80077a6 <osMessageGet+0xca>
 800776a:	4b15      	ldr	r3, [pc, #84]	; (80077c0 <osMessageGet+0xe4>)
 800776c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	e014      	b.n	80077a6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800777c:	f107 0314 	add.w	r3, r7, #20
 8007780:	3304      	adds	r3, #4
 8007782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007784:	4619      	mov	r1, r3
 8007786:	68b8      	ldr	r0, [r7, #8]
 8007788:	f000 fb94 	bl	8007eb4 <xQueueReceive>
 800778c:	4603      	mov	r3, r0
 800778e:	2b01      	cmp	r3, #1
 8007790:	d102      	bne.n	8007798 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007792:	2310      	movs	r3, #16
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	e006      	b.n	80077a6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	2b00      	cmp	r3, #0
 800779c:	d101      	bne.n	80077a2 <osMessageGet+0xc6>
 800779e:	2300      	movs	r3, #0
 80077a0:	e000      	b.n	80077a4 <osMessageGet+0xc8>
 80077a2:	2340      	movs	r3, #64	; 0x40
 80077a4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	461c      	mov	r4, r3
 80077aa:	f107 0314 	add.w	r3, r7, #20
 80077ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	372c      	adds	r7, #44	; 0x2c
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd90      	pop	{r4, r7, pc}
 80077be:	bf00      	nop
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b083      	sub	sp, #12
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f103 0208 	add.w	r2, r3, #8
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f04f 32ff 	mov.w	r2, #4294967295
 80077dc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f103 0208 	add.w	r2, r3, #8
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f103 0208 	add.w	r2, r3, #8
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2200      	movs	r2, #0
 80077f6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2200      	movs	r2, #0
 8007810:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007812:	bf00      	nop
 8007814:	370c      	adds	r7, #12
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
 8007826:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	685b      	ldr	r3, [r3, #4]
 800782c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	68fa      	ldr	r2, [r7, #12]
 8007832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	689a      	ldr	r2, [r3, #8]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	687a      	ldr	r2, [r7, #4]
 800784e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	1c5a      	adds	r2, r3, #1
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	601a      	str	r2, [r3, #0]
}
 800785a:	bf00      	nop
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007866:	b480      	push	{r7}
 8007868:	b085      	sub	sp, #20
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
 800786e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800787c:	d103      	bne.n	8007886 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	691b      	ldr	r3, [r3, #16]
 8007882:	60fb      	str	r3, [r7, #12]
 8007884:	e00c      	b.n	80078a0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	3308      	adds	r3, #8
 800788a:	60fb      	str	r3, [r7, #12]
 800788c:	e002      	b.n	8007894 <vListInsert+0x2e>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68ba      	ldr	r2, [r7, #8]
 800789c:	429a      	cmp	r2, r3
 800789e:	d2f6      	bcs.n	800788e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685a      	ldr	r2, [r3, #4]
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	683a      	ldr	r2, [r7, #0]
 80078ae:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	68fa      	ldr	r2, [r7, #12]
 80078b4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	687a      	ldr	r2, [r7, #4]
 80078c0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	1c5a      	adds	r2, r3, #1
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]
}
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80078d8:	b480      	push	{r7}
 80078da:	b085      	sub	sp, #20
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	691b      	ldr	r3, [r3, #16]
 80078e4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6892      	ldr	r2, [r2, #8]
 80078ee:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	6852      	ldr	r2, [r2, #4]
 80078f8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	429a      	cmp	r2, r3
 8007902:	d103      	bne.n	800790c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	689a      	ldr	r2, [r3, #8]
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2200      	movs	r2, #0
 8007910:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	1e5a      	subs	r2, r3, #1
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr

0800792c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d109      	bne.n	8007954 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007944:	f383 8811 	msr	BASEPRI, r3
 8007948:	f3bf 8f6f 	isb	sy
 800794c:	f3bf 8f4f 	dsb	sy
 8007950:	60bb      	str	r3, [r7, #8]
 8007952:	e7fe      	b.n	8007952 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007954:	f002 f91a 	bl	8009b8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007960:	68f9      	ldr	r1, [r7, #12]
 8007962:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007964:	fb01 f303 	mul.w	r3, r1, r3
 8007968:	441a      	add	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007984:	3b01      	subs	r3, #1
 8007986:	68f9      	ldr	r1, [r7, #12]
 8007988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800798a:	fb01 f303 	mul.w	r3, r1, r3
 800798e:	441a      	add	r2, r3
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	22ff      	movs	r2, #255	; 0xff
 8007998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	22ff      	movs	r2, #255	; 0xff
 80079a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d114      	bne.n	80079d4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d01a      	beq.n	80079e8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3310      	adds	r3, #16
 80079b6:	4618      	mov	r0, r3
 80079b8:	f001 f97e 	bl	8008cb8 <xTaskRemoveFromEventList>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d012      	beq.n	80079e8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80079c2:	4b0d      	ldr	r3, [pc, #52]	; (80079f8 <xQueueGenericReset+0xcc>)
 80079c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	f3bf 8f6f 	isb	sy
 80079d2:	e009      	b.n	80079e8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	3310      	adds	r3, #16
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fef3 	bl	80077c4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	3324      	adds	r3, #36	; 0x24
 80079e2:	4618      	mov	r0, r3
 80079e4:	f7ff feee 	bl	80077c4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80079e8:	f002 f8fe 	bl	8009be8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80079ec:	2301      	movs	r3, #1
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	e000ed04 	.word	0xe000ed04

080079fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b08e      	sub	sp, #56	; 0x38
 8007a00:	af02      	add	r7, sp, #8
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
 8007a08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <xQueueGenericCreateStatic+0x28>
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a22:	e7fe      	b.n	8007a22 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d109      	bne.n	8007a3e <xQueueGenericCreateStatic+0x42>
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a3c:	e7fe      	b.n	8007a3c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <xQueueGenericCreateStatic+0x4e>
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <xQueueGenericCreateStatic+0x52>
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e000      	b.n	8007a50 <xQueueGenericCreateStatic+0x54>
 8007a4e:	2300      	movs	r3, #0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d109      	bne.n	8007a68 <xQueueGenericCreateStatic+0x6c>
 8007a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	f3bf 8f6f 	isb	sy
 8007a60:	f3bf 8f4f 	dsb	sy
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	e7fe      	b.n	8007a66 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d102      	bne.n	8007a74 <xQueueGenericCreateStatic+0x78>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <xQueueGenericCreateStatic+0x7c>
 8007a74:	2301      	movs	r3, #1
 8007a76:	e000      	b.n	8007a7a <xQueueGenericCreateStatic+0x7e>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d109      	bne.n	8007a92 <xQueueGenericCreateStatic+0x96>
 8007a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a82:	f383 8811 	msr	BASEPRI, r3
 8007a86:	f3bf 8f6f 	isb	sy
 8007a8a:	f3bf 8f4f 	dsb	sy
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	e7fe      	b.n	8007a90 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a92:	2348      	movs	r3, #72	; 0x48
 8007a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	2b48      	cmp	r3, #72	; 0x48
 8007a9a:	d009      	beq.n	8007ab0 <xQueueGenericCreateStatic+0xb4>
 8007a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa0:	f383 8811 	msr	BASEPRI, r3
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	61bb      	str	r3, [r7, #24]
 8007aae:	e7fe      	b.n	8007aae <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00d      	beq.n	8007ad6 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ac2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ac8:	9300      	str	r3, [sp, #0]
 8007aca:	4613      	mov	r3, r2
 8007acc:	687a      	ldr	r2, [r7, #4]
 8007ace:	68b9      	ldr	r1, [r7, #8]
 8007ad0:	68f8      	ldr	r0, [r7, #12]
 8007ad2:	f000 f842 	bl	8007b5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3730      	adds	r7, #48	; 0x30
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b08a      	sub	sp, #40	; 0x28
 8007ae4:	af02      	add	r7, sp, #8
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	4613      	mov	r3, r2
 8007aec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d109      	bne.n	8007b08 <xQueueGenericCreate+0x28>
 8007af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007af8:	f383 8811 	msr	BASEPRI, r3
 8007afc:	f3bf 8f6f 	isb	sy
 8007b00:	f3bf 8f4f 	dsb	sy
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	e7fe      	b.n	8007b06 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d102      	bne.n	8007b14 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	61fb      	str	r3, [r7, #28]
 8007b12:	e004      	b.n	8007b1e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	fb02 f303 	mul.w	r3, r2, r3
 8007b1c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3348      	adds	r3, #72	; 0x48
 8007b22:	4618      	mov	r0, r3
 8007b24:	f002 f94c 	bl	8009dc0 <pvPortMalloc>
 8007b28:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00f      	beq.n	8007b50 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	3348      	adds	r3, #72	; 0x48
 8007b34:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007b3e:	79fa      	ldrb	r2, [r7, #7]
 8007b40:	69bb      	ldr	r3, [r7, #24]
 8007b42:	9300      	str	r3, [sp, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	697a      	ldr	r2, [r7, #20]
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 f805 	bl	8007b5a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8007b50:	69bb      	ldr	r3, [r7, #24]
	}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3720      	adds	r7, #32
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b084      	sub	sp, #16
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	60f8      	str	r0, [r7, #12]
 8007b62:	60b9      	str	r1, [r7, #8]
 8007b64:	607a      	str	r2, [r7, #4]
 8007b66:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d103      	bne.n	8007b76 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	69ba      	ldr	r2, [r7, #24]
 8007b72:	601a      	str	r2, [r3, #0]
 8007b74:	e002      	b.n	8007b7c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b76:	69bb      	ldr	r3, [r7, #24]
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b88:	2101      	movs	r1, #1
 8007b8a:	69b8      	ldr	r0, [r7, #24]
 8007b8c:	f7ff fece 	bl	800792c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b90:	bf00      	nop
 8007b92:	3710      	adds	r7, #16
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b08e      	sub	sp, #56	; 0x38
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
 8007ba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d109      	bne.n	8007bc8 <xQueueGenericSend+0x30>
 8007bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8007bc6:	e7fe      	b.n	8007bc6 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d103      	bne.n	8007bd6 <xQueueGenericSend+0x3e>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d101      	bne.n	8007bda <xQueueGenericSend+0x42>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e000      	b.n	8007bdc <xQueueGenericSend+0x44>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d109      	bne.n	8007bf4 <xQueueGenericSend+0x5c>
 8007be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be4:	f383 8811 	msr	BASEPRI, r3
 8007be8:	f3bf 8f6f 	isb	sy
 8007bec:	f3bf 8f4f 	dsb	sy
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bf2:	e7fe      	b.n	8007bf2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d103      	bne.n	8007c02 <xQueueGenericSend+0x6a>
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	2b01      	cmp	r3, #1
 8007c00:	d101      	bne.n	8007c06 <xQueueGenericSend+0x6e>
 8007c02:	2301      	movs	r3, #1
 8007c04:	e000      	b.n	8007c08 <xQueueGenericSend+0x70>
 8007c06:	2300      	movs	r3, #0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d109      	bne.n	8007c20 <xQueueGenericSend+0x88>
 8007c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c10:	f383 8811 	msr	BASEPRI, r3
 8007c14:	f3bf 8f6f 	isb	sy
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	623b      	str	r3, [r7, #32]
 8007c1e:	e7fe      	b.n	8007c1e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c20:	f001 fa06 	bl	8009030 <xTaskGetSchedulerState>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d102      	bne.n	8007c30 <xQueueGenericSend+0x98>
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d101      	bne.n	8007c34 <xQueueGenericSend+0x9c>
 8007c30:	2301      	movs	r3, #1
 8007c32:	e000      	b.n	8007c36 <xQueueGenericSend+0x9e>
 8007c34:	2300      	movs	r3, #0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d109      	bne.n	8007c4e <xQueueGenericSend+0xb6>
 8007c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	61fb      	str	r3, [r7, #28]
 8007c4c:	e7fe      	b.n	8007c4c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c4e:	f001 ff9d 	bl	8009b8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <xQueueGenericSend+0xcc>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d129      	bne.n	8007cb8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6a:	f000 fa7c 	bl	8008166 <prvCopyDataToQueue>
 8007c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d010      	beq.n	8007c9a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	3324      	adds	r3, #36	; 0x24
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f001 f81b 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d013      	beq.n	8007cb0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c88:	4b3f      	ldr	r3, [pc, #252]	; (8007d88 <xQueueGenericSend+0x1f0>)
 8007c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	e00a      	b.n	8007cb0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ca0:	4b39      	ldr	r3, [pc, #228]	; (8007d88 <xQueueGenericSend+0x1f0>)
 8007ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cb0:	f001 ff9a 	bl	8009be8 <vPortExitCritical>
				return pdPASS;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e063      	b.n	8007d80 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cbe:	f001 ff93 	bl	8009be8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e05c      	b.n	8007d80 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d106      	bne.n	8007cda <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ccc:	f107 0314 	add.w	r3, r7, #20
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f853 	bl	8008d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cda:	f001 ff85 	bl	8009be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cde:	f000 fdcd 	bl	800887c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ce2:	f001 ff53 	bl	8009b8c <vPortEnterCritical>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cec:	b25b      	sxtb	r3, r3
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d103      	bne.n	8007cfc <xQueueGenericSend+0x164>
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d02:	b25b      	sxtb	r3, r3
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d103      	bne.n	8007d12 <xQueueGenericSend+0x17a>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d12:	f001 ff69 	bl	8009be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d16:	1d3a      	adds	r2, r7, #4
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 f842 	bl	8008da8 <xTaskCheckForTimeOut>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d124      	bne.n	8007d74 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d2c:	f000 fb13 	bl	8008356 <prvIsQueueFull>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d018      	beq.n	8007d68 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	3310      	adds	r3, #16
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 ff6c 	bl	8008c1c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d46:	f000 fa9e 	bl	8008286 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d4a:	f000 fda5 	bl	8008898 <xTaskResumeAll>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f47f af7c 	bne.w	8007c4e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8007d56:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <xQueueGenericSend+0x1f0>)
 8007d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	e772      	b.n	8007c4e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d6a:	f000 fa8c 	bl	8008286 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d6e:	f000 fd93 	bl	8008898 <xTaskResumeAll>
 8007d72:	e76c      	b.n	8007c4e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d76:	f000 fa86 	bl	8008286 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d7a:	f000 fd8d 	bl	8008898 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d7e:	2300      	movs	r3, #0
		}
	}
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3738      	adds	r7, #56	; 0x38
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08e      	sub	sp, #56	; 0x38
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d109      	bne.n	8007db8 <xQueueGenericSendFromISR+0x2c>
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
 8007db6:	e7fe      	b.n	8007db6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d103      	bne.n	8007dc6 <xQueueGenericSendFromISR+0x3a>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d101      	bne.n	8007dca <xQueueGenericSendFromISR+0x3e>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e000      	b.n	8007dcc <xQueueGenericSendFromISR+0x40>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d109      	bne.n	8007de4 <xQueueGenericSendFromISR+0x58>
 8007dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd4:	f383 8811 	msr	BASEPRI, r3
 8007dd8:	f3bf 8f6f 	isb	sy
 8007ddc:	f3bf 8f4f 	dsb	sy
 8007de0:	623b      	str	r3, [r7, #32]
 8007de2:	e7fe      	b.n	8007de2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d103      	bne.n	8007df2 <xQueueGenericSendFromISR+0x66>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d101      	bne.n	8007df6 <xQueueGenericSendFromISR+0x6a>
 8007df2:	2301      	movs	r3, #1
 8007df4:	e000      	b.n	8007df8 <xQueueGenericSendFromISR+0x6c>
 8007df6:	2300      	movs	r3, #0
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d109      	bne.n	8007e10 <xQueueGenericSendFromISR+0x84>
 8007dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e00:	f383 8811 	msr	BASEPRI, r3
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	f3bf 8f4f 	dsb	sy
 8007e0c:	61fb      	str	r3, [r7, #28]
 8007e0e:	e7fe      	b.n	8007e0e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e10:	f001 ff98 	bl	8009d44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e14:	f3ef 8211 	mrs	r2, BASEPRI
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	61ba      	str	r2, [r7, #24]
 8007e2a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e2c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d302      	bcc.n	8007e42 <xQueueGenericSendFromISR+0xb6>
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d12c      	bne.n	8007e9c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e4c:	683a      	ldr	r2, [r7, #0]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e52:	f000 f988 	bl	8008166 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e56:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e5e:	d112      	bne.n	8007e86 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d016      	beq.n	8007e96 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6a:	3324      	adds	r3, #36	; 0x24
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f000 ff23 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d00e      	beq.n	8007e96 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00b      	beq.n	8007e96 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	601a      	str	r2, [r3, #0]
 8007e84:	e007      	b.n	8007e96 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	b25a      	sxtb	r2, r3
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e96:	2301      	movs	r3, #1
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007e9a:	e001      	b.n	8007ea0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3738      	adds	r7, #56	; 0x38
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b08c      	sub	sp, #48	; 0x30
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d109      	bne.n	8007ee2 <xQueueReceive+0x2e>
	__asm volatile
 8007ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ed2:	f383 8811 	msr	BASEPRI, r3
 8007ed6:	f3bf 8f6f 	isb	sy
 8007eda:	f3bf 8f4f 	dsb	sy
 8007ede:	623b      	str	r3, [r7, #32]
 8007ee0:	e7fe      	b.n	8007ee0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d103      	bne.n	8007ef0 <xQueueReceive+0x3c>
 8007ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <xQueueReceive+0x40>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e000      	b.n	8007ef6 <xQueueReceive+0x42>
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d109      	bne.n	8007f0e <xQueueReceive+0x5a>
 8007efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007efe:	f383 8811 	msr	BASEPRI, r3
 8007f02:	f3bf 8f6f 	isb	sy
 8007f06:	f3bf 8f4f 	dsb	sy
 8007f0a:	61fb      	str	r3, [r7, #28]
 8007f0c:	e7fe      	b.n	8007f0c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f0e:	f001 f88f 	bl	8009030 <xTaskGetSchedulerState>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d102      	bne.n	8007f1e <xQueueReceive+0x6a>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d101      	bne.n	8007f22 <xQueueReceive+0x6e>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e000      	b.n	8007f24 <xQueueReceive+0x70>
 8007f22:	2300      	movs	r3, #0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d109      	bne.n	8007f3c <xQueueReceive+0x88>
 8007f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f2c:	f383 8811 	msr	BASEPRI, r3
 8007f30:	f3bf 8f6f 	isb	sy
 8007f34:	f3bf 8f4f 	dsb	sy
 8007f38:	61bb      	str	r3, [r7, #24]
 8007f3a:	e7fe      	b.n	8007f3a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f3c:	f001 fe26 	bl	8009b8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f44:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01f      	beq.n	8007f8c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f50:	f000 f973 	bl	800823a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	1e5a      	subs	r2, r3, #1
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00f      	beq.n	8007f84 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f66:	3310      	adds	r3, #16
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 fea5 	bl	8008cb8 <xTaskRemoveFromEventList>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d007      	beq.n	8007f84 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f74:	4b3c      	ldr	r3, [pc, #240]	; (8008068 <xQueueReceive+0x1b4>)
 8007f76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f7a:	601a      	str	r2, [r3, #0]
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f84:	f001 fe30 	bl	8009be8 <vPortExitCritical>
				return pdPASS;
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e069      	b.n	8008060 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f92:	f001 fe29 	bl	8009be8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f96:	2300      	movs	r3, #0
 8007f98:	e062      	b.n	8008060 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d106      	bne.n	8007fae <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fa0:	f107 0310 	add.w	r3, r7, #16
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f000 fee9 	bl	8008d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007faa:	2301      	movs	r3, #1
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fae:	f001 fe1b 	bl	8009be8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fb2:	f000 fc63 	bl	800887c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fb6:	f001 fde9 	bl	8009b8c <vPortEnterCritical>
 8007fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fc0:	b25b      	sxtb	r3, r3
 8007fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc6:	d103      	bne.n	8007fd0 <xQueueReceive+0x11c>
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	2200      	movs	r2, #0
 8007fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fd6:	b25b      	sxtb	r3, r3
 8007fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fdc:	d103      	bne.n	8007fe6 <xQueueReceive+0x132>
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fe6:	f001 fdff 	bl	8009be8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fea:	1d3a      	adds	r2, r7, #4
 8007fec:	f107 0310 	add.w	r3, r7, #16
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f000 fed8 	bl	8008da8 <xTaskCheckForTimeOut>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d123      	bne.n	8008046 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ffe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008000:	f000 f993 	bl	800832a <prvIsQueueEmpty>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d017      	beq.n	800803a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800800a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800800c:	3324      	adds	r3, #36	; 0x24
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4611      	mov	r1, r2
 8008012:	4618      	mov	r0, r3
 8008014:	f000 fe02 	bl	8008c1c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800801a:	f000 f934 	bl	8008286 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800801e:	f000 fc3b 	bl	8008898 <xTaskResumeAll>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d189      	bne.n	8007f3c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8008028:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <xQueueReceive+0x1b4>)
 800802a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	e780      	b.n	8007f3c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800803a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800803c:	f000 f923 	bl	8008286 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008040:	f000 fc2a 	bl	8008898 <xTaskResumeAll>
 8008044:	e77a      	b.n	8007f3c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008046:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008048:	f000 f91d 	bl	8008286 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800804c:	f000 fc24 	bl	8008898 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008052:	f000 f96a 	bl	800832a <prvIsQueueEmpty>
 8008056:	4603      	mov	r3, r0
 8008058:	2b00      	cmp	r3, #0
 800805a:	f43f af6f 	beq.w	8007f3c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800805e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8008060:	4618      	mov	r0, r3
 8008062:	3730      	adds	r7, #48	; 0x30
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08e      	sub	sp, #56	; 0x38
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800807c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807e:	2b00      	cmp	r3, #0
 8008080:	d109      	bne.n	8008096 <xQueueReceiveFromISR+0x2a>
 8008082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008086:	f383 8811 	msr	BASEPRI, r3
 800808a:	f3bf 8f6f 	isb	sy
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	623b      	str	r3, [r7, #32]
 8008094:	e7fe      	b.n	8008094 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d103      	bne.n	80080a4 <xQueueReceiveFromISR+0x38>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d101      	bne.n	80080a8 <xQueueReceiveFromISR+0x3c>
 80080a4:	2301      	movs	r3, #1
 80080a6:	e000      	b.n	80080aa <xQueueReceiveFromISR+0x3e>
 80080a8:	2300      	movs	r3, #0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d109      	bne.n	80080c2 <xQueueReceiveFromISR+0x56>
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	61fb      	str	r3, [r7, #28]
 80080c0:	e7fe      	b.n	80080c0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80080c2:	f001 fe3f 	bl	8009d44 <vPortValidateInterruptPriority>
	__asm volatile
 80080c6:	f3ef 8211 	mrs	r2, BASEPRI
 80080ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	61ba      	str	r2, [r7, #24]
 80080dc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80080de:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80080e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80080e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d02f      	beq.n	800814e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80080ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80080f8:	68b9      	ldr	r1, [r7, #8]
 80080fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80080fc:	f000 f89d 	bl	800823a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008102:	1e5a      	subs	r2, r3, #1
 8008104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008106:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d112      	bne.n	8008138 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d016      	beq.n	8008148 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800811a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811c:	3310      	adds	r3, #16
 800811e:	4618      	mov	r0, r3
 8008120:	f000 fdca 	bl	8008cb8 <xTaskRemoveFromEventList>
 8008124:	4603      	mov	r3, r0
 8008126:	2b00      	cmp	r3, #0
 8008128:	d00e      	beq.n	8008148 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d00b      	beq.n	8008148 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	e007      	b.n	8008148 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800813c:	3301      	adds	r3, #1
 800813e:	b2db      	uxtb	r3, r3
 8008140:	b25a      	sxtb	r2, r3
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008148:	2301      	movs	r3, #1
 800814a:	637b      	str	r3, [r7, #52]	; 0x34
 800814c:	e001      	b.n	8008152 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800814e:	2300      	movs	r3, #0
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800815c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800815e:	4618      	mov	r0, r3
 8008160:	3738      	adds	r7, #56	; 0x38
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	60f8      	str	r0, [r7, #12]
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008172:	2300      	movs	r3, #0
 8008174:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800817a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10d      	bne.n	80081a0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d14d      	bne.n	8008228 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	4618      	mov	r0, r3
 8008192:	f000 ff6b 	bl	800906c <xTaskPriorityDisinherit>
 8008196:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2200      	movs	r2, #0
 800819c:	605a      	str	r2, [r3, #4]
 800819e:	e043      	b.n	8008228 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d119      	bne.n	80081da <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	6898      	ldr	r0, [r3, #8]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ae:	461a      	mov	r2, r3
 80081b0:	68b9      	ldr	r1, [r7, #8]
 80081b2:	f003 f841 	bl	800b238 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081be:	441a      	add	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	689a      	ldr	r2, [r3, #8]
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d32b      	bcc.n	8008228 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	609a      	str	r2, [r3, #8]
 80081d8:	e026      	b.n	8008228 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	68d8      	ldr	r0, [r3, #12]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	461a      	mov	r2, r3
 80081e4:	68b9      	ldr	r1, [r7, #8]
 80081e6:	f003 f827 	bl	800b238 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68da      	ldr	r2, [r3, #12]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	425b      	negs	r3, r3
 80081f4:	441a      	add	r2, r3
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	429a      	cmp	r2, r3
 8008204:	d207      	bcs.n	8008216 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	685a      	ldr	r2, [r3, #4]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820e:	425b      	negs	r3, r3
 8008210:	441a      	add	r2, r3
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d105      	bne.n	8008228 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d002      	beq.n	8008228 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	3b01      	subs	r3, #1
 8008226:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	1c5a      	adds	r2, r3, #1
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008230:	697b      	ldr	r3, [r7, #20]
}
 8008232:	4618      	mov	r0, r3
 8008234:	3718      	adds	r7, #24
 8008236:	46bd      	mov	sp, r7
 8008238:	bd80      	pop	{r7, pc}

0800823a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800823a:	b580      	push	{r7, lr}
 800823c:	b082      	sub	sp, #8
 800823e:	af00      	add	r7, sp, #0
 8008240:	6078      	str	r0, [r7, #4]
 8008242:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008248:	2b00      	cmp	r3, #0
 800824a:	d018      	beq.n	800827e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68da      	ldr	r2, [r3, #12]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008254:	441a      	add	r2, r3
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68da      	ldr	r2, [r3, #12]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	429a      	cmp	r2, r3
 8008264:	d303      	bcc.n	800826e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	68d9      	ldr	r1, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	461a      	mov	r2, r3
 8008278:	6838      	ldr	r0, [r7, #0]
 800827a:	f002 ffdd 	bl	800b238 <memcpy>
	}
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008286:	b580      	push	{r7, lr}
 8008288:	b084      	sub	sp, #16
 800828a:	af00      	add	r7, sp, #0
 800828c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800828e:	f001 fc7d 	bl	8009b8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008298:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800829a:	e011      	b.n	80082c0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d012      	beq.n	80082ca <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	3324      	adds	r3, #36	; 0x24
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fd05 	bl	8008cb8 <xTaskRemoveFromEventList>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d001      	beq.n	80082b8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80082b4:	f000 fdd8 	bl	8008e68 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80082b8:	7bfb      	ldrb	r3, [r7, #15]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	dce9      	bgt.n	800829c <prvUnlockQueue+0x16>
 80082c8:	e000      	b.n	80082cc <prvUnlockQueue+0x46>
					break;
 80082ca:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	22ff      	movs	r2, #255	; 0xff
 80082d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80082d4:	f001 fc88 	bl	8009be8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082d8:	f001 fc58 	bl	8009b8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082e2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082e4:	e011      	b.n	800830a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d012      	beq.n	8008314 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	3310      	adds	r3, #16
 80082f2:	4618      	mov	r0, r3
 80082f4:	f000 fce0 	bl	8008cb8 <xTaskRemoveFromEventList>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80082fe:	f000 fdb3 	bl	8008e68 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008302:	7bbb      	ldrb	r3, [r7, #14]
 8008304:	3b01      	subs	r3, #1
 8008306:	b2db      	uxtb	r3, r3
 8008308:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800830a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800830e:	2b00      	cmp	r3, #0
 8008310:	dce9      	bgt.n	80082e6 <prvUnlockQueue+0x60>
 8008312:	e000      	b.n	8008316 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008314:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	22ff      	movs	r2, #255	; 0xff
 800831a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800831e:	f001 fc63 	bl	8009be8 <vPortExitCritical>
}
 8008322:	bf00      	nop
 8008324:	3710      	adds	r7, #16
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}

0800832a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800832a:	b580      	push	{r7, lr}
 800832c:	b084      	sub	sp, #16
 800832e:	af00      	add	r7, sp, #0
 8008330:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008332:	f001 fc2b 	bl	8009b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	2b00      	cmp	r3, #0
 800833c:	d102      	bne.n	8008344 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800833e:	2301      	movs	r3, #1
 8008340:	60fb      	str	r3, [r7, #12]
 8008342:	e001      	b.n	8008348 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008344:	2300      	movs	r3, #0
 8008346:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008348:	f001 fc4e 	bl	8009be8 <vPortExitCritical>

	return xReturn;
 800834c:	68fb      	ldr	r3, [r7, #12]
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008356:	b580      	push	{r7, lr}
 8008358:	b084      	sub	sp, #16
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800835e:	f001 fc15 	bl	8009b8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800836a:	429a      	cmp	r2, r3
 800836c:	d102      	bne.n	8008374 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800836e:	2301      	movs	r3, #1
 8008370:	60fb      	str	r3, [r7, #12]
 8008372:	e001      	b.n	8008378 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008374:	2300      	movs	r3, #0
 8008376:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008378:	f001 fc36 	bl	8009be8 <vPortExitCritical>

	return xReturn;
 800837c:	68fb      	ldr	r3, [r7, #12]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008392:	2300      	movs	r3, #0
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	e014      	b.n	80083c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008398:	4a0e      	ldr	r2, [pc, #56]	; (80083d4 <vQueueAddToRegistry+0x4c>)
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d10b      	bne.n	80083bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80083a4:	490b      	ldr	r1, [pc, #44]	; (80083d4 <vQueueAddToRegistry+0x4c>)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80083ae:	4a09      	ldr	r2, [pc, #36]	; (80083d4 <vQueueAddToRegistry+0x4c>)
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	00db      	lsls	r3, r3, #3
 80083b4:	4413      	add	r3, r2
 80083b6:	687a      	ldr	r2, [r7, #4]
 80083b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80083ba:	e005      	b.n	80083c8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	3301      	adds	r3, #1
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	2b07      	cmp	r3, #7
 80083c6:	d9e7      	bls.n	8008398 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80083c8:	bf00      	nop
 80083ca:	3714      	adds	r7, #20
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr
 80083d4:	200045b8 	.word	0x200045b8

080083d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80083e8:	f001 fbd0 	bl	8009b8c <vPortEnterCritical>
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80083f2:	b25b      	sxtb	r3, r3
 80083f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083f8:	d103      	bne.n	8008402 <vQueueWaitForMessageRestricted+0x2a>
 80083fa:	697b      	ldr	r3, [r7, #20]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008408:	b25b      	sxtb	r3, r3
 800840a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800840e:	d103      	bne.n	8008418 <vQueueWaitForMessageRestricted+0x40>
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	2200      	movs	r2, #0
 8008414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008418:	f001 fbe6 	bl	8009be8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	2b00      	cmp	r3, #0
 8008422:	d106      	bne.n	8008432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	3324      	adds	r3, #36	; 0x24
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fc19 	bl	8008c64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008432:	6978      	ldr	r0, [r7, #20]
 8008434:	f7ff ff27 	bl	8008286 <prvUnlockQueue>
	}
 8008438:	bf00      	nop
 800843a:	3718      	adds	r7, #24
 800843c:	46bd      	mov	sp, r7
 800843e:	bd80      	pop	{r7, pc}

08008440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008440:	b580      	push	{r7, lr}
 8008442:	b08e      	sub	sp, #56	; 0x38
 8008444:	af04      	add	r7, sp, #16
 8008446:	60f8      	str	r0, [r7, #12]
 8008448:	60b9      	str	r1, [r7, #8]
 800844a:	607a      	str	r2, [r7, #4]
 800844c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800844e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008450:	2b00      	cmp	r3, #0
 8008452:	d109      	bne.n	8008468 <xTaskCreateStatic+0x28>
	__asm volatile
 8008454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008458:	f383 8811 	msr	BASEPRI, r3
 800845c:	f3bf 8f6f 	isb	sy
 8008460:	f3bf 8f4f 	dsb	sy
 8008464:	623b      	str	r3, [r7, #32]
 8008466:	e7fe      	b.n	8008466 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <xTaskCreateStatic+0x42>
 800846e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008472:	f383 8811 	msr	BASEPRI, r3
 8008476:	f3bf 8f6f 	isb	sy
 800847a:	f3bf 8f4f 	dsb	sy
 800847e:	61fb      	str	r3, [r7, #28]
 8008480:	e7fe      	b.n	8008480 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008482:	2354      	movs	r3, #84	; 0x54
 8008484:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	2b54      	cmp	r3, #84	; 0x54
 800848a:	d009      	beq.n	80084a0 <xTaskCreateStatic+0x60>
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	f383 8811 	msr	BASEPRI, r3
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	f3bf 8f4f 	dsb	sy
 800849c:	61bb      	str	r3, [r7, #24]
 800849e:	e7fe      	b.n	800849e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80084a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01e      	beq.n	80084e4 <xTaskCreateStatic+0xa4>
 80084a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d01b      	beq.n	80084e4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80084b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80084b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80084b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b8:	2202      	movs	r2, #2
 80084ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80084be:	2300      	movs	r3, #0
 80084c0:	9303      	str	r3, [sp, #12]
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	9302      	str	r3, [sp, #8]
 80084c6:	f107 0314 	add.w	r3, r7, #20
 80084ca:	9301      	str	r3, [sp, #4]
 80084cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	687a      	ldr	r2, [r7, #4]
 80084d4:	68b9      	ldr	r1, [r7, #8]
 80084d6:	68f8      	ldr	r0, [r7, #12]
 80084d8:	f000 f850 	bl	800857c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80084dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084de:	f000 f8cb 	bl	8008678 <prvAddNewTaskToReadyList>
 80084e2:	e001      	b.n	80084e8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80084e4:	2300      	movs	r3, #0
 80084e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80084e8:	697b      	ldr	r3, [r7, #20]
	}
 80084ea:	4618      	mov	r0, r3
 80084ec:	3728      	adds	r7, #40	; 0x28
 80084ee:	46bd      	mov	sp, r7
 80084f0:	bd80      	pop	{r7, pc}

080084f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80084f2:	b580      	push	{r7, lr}
 80084f4:	b08c      	sub	sp, #48	; 0x30
 80084f6:	af04      	add	r7, sp, #16
 80084f8:	60f8      	str	r0, [r7, #12]
 80084fa:	60b9      	str	r1, [r7, #8]
 80084fc:	603b      	str	r3, [r7, #0]
 80084fe:	4613      	mov	r3, r2
 8008500:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008502:	88fb      	ldrh	r3, [r7, #6]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4618      	mov	r0, r3
 8008508:	f001 fc5a 	bl	8009dc0 <pvPortMalloc>
 800850c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00e      	beq.n	8008532 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008514:	2054      	movs	r0, #84	; 0x54
 8008516:	f001 fc53 	bl	8009dc0 <pvPortMalloc>
 800851a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d003      	beq.n	800852a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	697a      	ldr	r2, [r7, #20]
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
 8008528:	e005      	b.n	8008536 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800852a:	6978      	ldr	r0, [r7, #20]
 800852c:	f001 fd0a 	bl	8009f44 <vPortFree>
 8008530:	e001      	b.n	8008536 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008532:	2300      	movs	r3, #0
 8008534:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d017      	beq.n	800856c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	2200      	movs	r2, #0
 8008540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008544:	88fa      	ldrh	r2, [r7, #6]
 8008546:	2300      	movs	r3, #0
 8008548:	9303      	str	r3, [sp, #12]
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	9302      	str	r3, [sp, #8]
 800854e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008554:	9300      	str	r3, [sp, #0]
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	68b9      	ldr	r1, [r7, #8]
 800855a:	68f8      	ldr	r0, [r7, #12]
 800855c:	f000 f80e 	bl	800857c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008560:	69f8      	ldr	r0, [r7, #28]
 8008562:	f000 f889 	bl	8008678 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008566:	2301      	movs	r3, #1
 8008568:	61bb      	str	r3, [r7, #24]
 800856a:	e002      	b.n	8008572 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800856c:	f04f 33ff 	mov.w	r3, #4294967295
 8008570:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008572:	69bb      	ldr	r3, [r7, #24]
	}
 8008574:	4618      	mov	r0, r3
 8008576:	3720      	adds	r7, #32
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800858a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008594:	3b01      	subs	r3, #1
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	f023 0307 	bic.w	r3, r3, #7
 80085a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <prvInitialiseNewTask+0x46>
 80085ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b2:	f383 8811 	msr	BASEPRI, r3
 80085b6:	f3bf 8f6f 	isb	sy
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	617b      	str	r3, [r7, #20]
 80085c0:	e7fe      	b.n	80085c0 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085c2:	2300      	movs	r3, #0
 80085c4:	61fb      	str	r3, [r7, #28]
 80085c6:	e012      	b.n	80085ee <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	4413      	add	r3, r2
 80085ce:	7819      	ldrb	r1, [r3, #0]
 80085d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d2:	69fb      	ldr	r3, [r7, #28]
 80085d4:	4413      	add	r3, r2
 80085d6:	3334      	adds	r3, #52	; 0x34
 80085d8:	460a      	mov	r2, r1
 80085da:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	4413      	add	r3, r2
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d006      	beq.n	80085f6 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80085e8:	69fb      	ldr	r3, [r7, #28]
 80085ea:	3301      	adds	r3, #1
 80085ec:	61fb      	str	r3, [r7, #28]
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	2b0f      	cmp	r3, #15
 80085f2:	d9e9      	bls.n	80085c8 <prvInitialiseNewTask+0x4c>
 80085f4:	e000      	b.n	80085f8 <prvInitialiseNewTask+0x7c>
		{
			break;
 80085f6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008602:	2b06      	cmp	r3, #6
 8008604:	d901      	bls.n	800860a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008606:	2306      	movs	r3, #6
 8008608:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800860a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800860e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008614:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008618:	2200      	movs	r2, #0
 800861a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800861c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861e:	3304      	adds	r3, #4
 8008620:	4618      	mov	r0, r3
 8008622:	f7ff f8ef 	bl	8007804 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008628:	3318      	adds	r3, #24
 800862a:	4618      	mov	r0, r3
 800862c:	f7ff f8ea 	bl	8007804 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008634:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008638:	f1c3 0207 	rsb	r2, r3, #7
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008644:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2200      	movs	r2, #0
 800864a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	2200      	movs	r2, #0
 8008650:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	68f9      	ldr	r1, [r7, #12]
 8008658:	69b8      	ldr	r0, [r7, #24]
 800865a:	f001 f96f 	bl	800993c <pxPortInitialiseStack>
 800865e:	4602      	mov	r2, r0
 8008660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008662:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800866a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800866c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800866e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008670:	bf00      	nop
 8008672:	3720      	adds	r7, #32
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b082      	sub	sp, #8
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008680:	f001 fa84 	bl	8009b8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008684:	4b2a      	ldr	r3, [pc, #168]	; (8008730 <prvAddNewTaskToReadyList+0xb8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3301      	adds	r3, #1
 800868a:	4a29      	ldr	r2, [pc, #164]	; (8008730 <prvAddNewTaskToReadyList+0xb8>)
 800868c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800868e:	4b29      	ldr	r3, [pc, #164]	; (8008734 <prvAddNewTaskToReadyList+0xbc>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d109      	bne.n	80086aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008696:	4a27      	ldr	r2, [pc, #156]	; (8008734 <prvAddNewTaskToReadyList+0xbc>)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800869c:	4b24      	ldr	r3, [pc, #144]	; (8008730 <prvAddNewTaskToReadyList+0xb8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b01      	cmp	r3, #1
 80086a2:	d110      	bne.n	80086c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80086a4:	f000 fc04 	bl	8008eb0 <prvInitialiseTaskLists>
 80086a8:	e00d      	b.n	80086c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80086aa:	4b23      	ldr	r3, [pc, #140]	; (8008738 <prvAddNewTaskToReadyList+0xc0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d109      	bne.n	80086c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80086b2:	4b20      	ldr	r3, [pc, #128]	; (8008734 <prvAddNewTaskToReadyList+0xbc>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086bc:	429a      	cmp	r2, r3
 80086be:	d802      	bhi.n	80086c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80086c0:	4a1c      	ldr	r2, [pc, #112]	; (8008734 <prvAddNewTaskToReadyList+0xbc>)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80086c6:	4b1d      	ldr	r3, [pc, #116]	; (800873c <prvAddNewTaskToReadyList+0xc4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3301      	adds	r3, #1
 80086cc:	4a1b      	ldr	r2, [pc, #108]	; (800873c <prvAddNewTaskToReadyList+0xc4>)
 80086ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d4:	2201      	movs	r2, #1
 80086d6:	409a      	lsls	r2, r3
 80086d8:	4b19      	ldr	r3, [pc, #100]	; (8008740 <prvAddNewTaskToReadyList+0xc8>)
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4313      	orrs	r3, r2
 80086de:	4a18      	ldr	r2, [pc, #96]	; (8008740 <prvAddNewTaskToReadyList+0xc8>)
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e6:	4613      	mov	r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4413      	add	r3, r2
 80086ec:	009b      	lsls	r3, r3, #2
 80086ee:	4a15      	ldr	r2, [pc, #84]	; (8008744 <prvAddNewTaskToReadyList+0xcc>)
 80086f0:	441a      	add	r2, r3
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	3304      	adds	r3, #4
 80086f6:	4619      	mov	r1, r3
 80086f8:	4610      	mov	r0, r2
 80086fa:	f7ff f890 	bl	800781e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80086fe:	f001 fa73 	bl	8009be8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008702:	4b0d      	ldr	r3, [pc, #52]	; (8008738 <prvAddNewTaskToReadyList+0xc0>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d00e      	beq.n	8008728 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800870a:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <prvAddNewTaskToReadyList+0xbc>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008714:	429a      	cmp	r2, r3
 8008716:	d207      	bcs.n	8008728 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008718:	4b0b      	ldr	r3, [pc, #44]	; (8008748 <prvAddNewTaskToReadyList+0xd0>)
 800871a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800871e:	601a      	str	r2, [r3, #0]
 8008720:	f3bf 8f4f 	dsb	sy
 8008724:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008728:	bf00      	nop
 800872a:	3708      	adds	r7, #8
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	200001b4 	.word	0x200001b4
 8008734:	200000b4 	.word	0x200000b4
 8008738:	200001c0 	.word	0x200001c0
 800873c:	200001d0 	.word	0x200001d0
 8008740:	200001bc 	.word	0x200001bc
 8008744:	200000b8 	.word	0x200000b8
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d016      	beq.n	800878c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800875e:	4b13      	ldr	r3, [pc, #76]	; (80087ac <vTaskDelay+0x60>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d009      	beq.n	800877a <vTaskDelay+0x2e>
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60bb      	str	r3, [r7, #8]
 8008778:	e7fe      	b.n	8008778 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800877a:	f000 f87f 	bl	800887c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800877e:	2100      	movs	r1, #0
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 fcf7 	bl	8009174 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008786:	f000 f887 	bl	8008898 <xTaskResumeAll>
 800878a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d107      	bne.n	80087a2 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008792:	4b07      	ldr	r3, [pc, #28]	; (80087b0 <vTaskDelay+0x64>)
 8008794:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008798:	601a      	str	r2, [r3, #0]
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80087a2:	bf00      	nop
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200001dc 	.word	0x200001dc
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08a      	sub	sp, #40	; 0x28
 80087b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80087ba:	2300      	movs	r3, #0
 80087bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80087be:	2300      	movs	r3, #0
 80087c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80087c2:	463a      	mov	r2, r7
 80087c4:	1d39      	adds	r1, r7, #4
 80087c6:	f107 0308 	add.w	r3, r7, #8
 80087ca:	4618      	mov	r0, r3
 80087cc:	f001 fcce 	bl	800a16c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	68ba      	ldr	r2, [r7, #8]
 80087d6:	9202      	str	r2, [sp, #8]
 80087d8:	9301      	str	r3, [sp, #4]
 80087da:	2300      	movs	r3, #0
 80087dc:	9300      	str	r3, [sp, #0]
 80087de:	2300      	movs	r3, #0
 80087e0:	460a      	mov	r2, r1
 80087e2:	4920      	ldr	r1, [pc, #128]	; (8008864 <vTaskStartScheduler+0xb0>)
 80087e4:	4820      	ldr	r0, [pc, #128]	; (8008868 <vTaskStartScheduler+0xb4>)
 80087e6:	f7ff fe2b 	bl	8008440 <xTaskCreateStatic>
 80087ea:	4602      	mov	r2, r0
 80087ec:	4b1f      	ldr	r3, [pc, #124]	; (800886c <vTaskStartScheduler+0xb8>)
 80087ee:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80087f0:	4b1e      	ldr	r3, [pc, #120]	; (800886c <vTaskStartScheduler+0xb8>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d002      	beq.n	80087fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80087f8:	2301      	movs	r3, #1
 80087fa:	617b      	str	r3, [r7, #20]
 80087fc:	e001      	b.n	8008802 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	2b01      	cmp	r3, #1
 8008806:	d102      	bne.n	800880e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008808:	f000 fd1a 	bl	8009240 <xTimerCreateTimerTask>
 800880c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	2b01      	cmp	r3, #1
 8008812:	d115      	bne.n	8008840 <vTaskStartScheduler+0x8c>
 8008814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008826:	4b12      	ldr	r3, [pc, #72]	; (8008870 <vTaskStartScheduler+0xbc>)
 8008828:	f04f 32ff 	mov.w	r2, #4294967295
 800882c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800882e:	4b11      	ldr	r3, [pc, #68]	; (8008874 <vTaskStartScheduler+0xc0>)
 8008830:	2201      	movs	r2, #1
 8008832:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008834:	4b10      	ldr	r3, [pc, #64]	; (8008878 <vTaskStartScheduler+0xc4>)
 8008836:	2200      	movs	r2, #0
 8008838:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800883a:	f001 f909 	bl	8009a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800883e:	e00d      	b.n	800885c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008846:	d109      	bne.n	800885c <vTaskStartScheduler+0xa8>
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	60fb      	str	r3, [r7, #12]
 800885a:	e7fe      	b.n	800885a <vTaskStartScheduler+0xa6>
}
 800885c:	bf00      	nop
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	0800b42c 	.word	0x0800b42c
 8008868:	08008e81 	.word	0x08008e81
 800886c:	200001d8 	.word	0x200001d8
 8008870:	200001d4 	.word	0x200001d4
 8008874:	200001c0 	.word	0x200001c0
 8008878:	200001b8 	.word	0x200001b8

0800887c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008880:	4b04      	ldr	r3, [pc, #16]	; (8008894 <vTaskSuspendAll+0x18>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	3301      	adds	r3, #1
 8008886:	4a03      	ldr	r2, [pc, #12]	; (8008894 <vTaskSuspendAll+0x18>)
 8008888:	6013      	str	r3, [r2, #0]
}
 800888a:	bf00      	nop
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	200001dc 	.word	0x200001dc

08008898 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80088a2:	2300      	movs	r3, #0
 80088a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80088a6:	4b41      	ldr	r3, [pc, #260]	; (80089ac <xTaskResumeAll+0x114>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d109      	bne.n	80088c2 <xTaskResumeAll+0x2a>
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	f383 8811 	msr	BASEPRI, r3
 80088b6:	f3bf 8f6f 	isb	sy
 80088ba:	f3bf 8f4f 	dsb	sy
 80088be:	603b      	str	r3, [r7, #0]
 80088c0:	e7fe      	b.n	80088c0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80088c2:	f001 f963 	bl	8009b8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <xTaskResumeAll+0x114>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	3b01      	subs	r3, #1
 80088cc:	4a37      	ldr	r2, [pc, #220]	; (80089ac <xTaskResumeAll+0x114>)
 80088ce:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088d0:	4b36      	ldr	r3, [pc, #216]	; (80089ac <xTaskResumeAll+0x114>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d161      	bne.n	800899c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80088d8:	4b35      	ldr	r3, [pc, #212]	; (80089b0 <xTaskResumeAll+0x118>)
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d05d      	beq.n	800899c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088e0:	e02e      	b.n	8008940 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80088e2:	4b34      	ldr	r3, [pc, #208]	; (80089b4 <xTaskResumeAll+0x11c>)
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	3318      	adds	r3, #24
 80088ee:	4618      	mov	r0, r3
 80088f0:	f7fe fff2 	bl	80078d8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	3304      	adds	r3, #4
 80088f8:	4618      	mov	r0, r3
 80088fa:	f7fe ffed 	bl	80078d8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008902:	2201      	movs	r2, #1
 8008904:	409a      	lsls	r2, r3
 8008906:	4b2c      	ldr	r3, [pc, #176]	; (80089b8 <xTaskResumeAll+0x120>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4313      	orrs	r3, r2
 800890c:	4a2a      	ldr	r2, [pc, #168]	; (80089b8 <xTaskResumeAll+0x120>)
 800890e:	6013      	str	r3, [r2, #0]
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008914:	4613      	mov	r3, r2
 8008916:	009b      	lsls	r3, r3, #2
 8008918:	4413      	add	r3, r2
 800891a:	009b      	lsls	r3, r3, #2
 800891c:	4a27      	ldr	r2, [pc, #156]	; (80089bc <xTaskResumeAll+0x124>)
 800891e:	441a      	add	r2, r3
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3304      	adds	r3, #4
 8008924:	4619      	mov	r1, r3
 8008926:	4610      	mov	r0, r2
 8008928:	f7fe ff79 	bl	800781e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008930:	4b23      	ldr	r3, [pc, #140]	; (80089c0 <xTaskResumeAll+0x128>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008936:	429a      	cmp	r2, r3
 8008938:	d302      	bcc.n	8008940 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800893a:	4b22      	ldr	r3, [pc, #136]	; (80089c4 <xTaskResumeAll+0x12c>)
 800893c:	2201      	movs	r2, #1
 800893e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008940:	4b1c      	ldr	r3, [pc, #112]	; (80089b4 <xTaskResumeAll+0x11c>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1cc      	bne.n	80088e2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800894e:	f000 fb49 	bl	8008fe4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008952:	4b1d      	ldr	r3, [pc, #116]	; (80089c8 <xTaskResumeAll+0x130>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d010      	beq.n	8008980 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800895e:	f000 f847 	bl	80089f0 <xTaskIncrementTick>
 8008962:	4603      	mov	r3, r0
 8008964:	2b00      	cmp	r3, #0
 8008966:	d002      	beq.n	800896e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8008968:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <xTaskResumeAll+0x12c>)
 800896a:	2201      	movs	r2, #1
 800896c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	3b01      	subs	r3, #1
 8008972:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1f1      	bne.n	800895e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800897a:	4b13      	ldr	r3, [pc, #76]	; (80089c8 <xTaskResumeAll+0x130>)
 800897c:	2200      	movs	r2, #0
 800897e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008980:	4b10      	ldr	r3, [pc, #64]	; (80089c4 <xTaskResumeAll+0x12c>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d009      	beq.n	800899c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008988:	2301      	movs	r3, #1
 800898a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800898c:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <xTaskResumeAll+0x134>)
 800898e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800899c:	f001 f924 	bl	8009be8 <vPortExitCritical>

	return xAlreadyYielded;
 80089a0:	68bb      	ldr	r3, [r7, #8]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}
 80089aa:	bf00      	nop
 80089ac:	200001dc 	.word	0x200001dc
 80089b0:	200001b4 	.word	0x200001b4
 80089b4:	20000174 	.word	0x20000174
 80089b8:	200001bc 	.word	0x200001bc
 80089bc:	200000b8 	.word	0x200000b8
 80089c0:	200000b4 	.word	0x200000b4
 80089c4:	200001c8 	.word	0x200001c8
 80089c8:	200001c4 	.word	0x200001c4
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80089d6:	4b05      	ldr	r3, [pc, #20]	; (80089ec <xTaskGetTickCount+0x1c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80089dc:	687b      	ldr	r3, [r7, #4]
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	200001b8 	.word	0x200001b8

080089f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80089f6:	2300      	movs	r3, #0
 80089f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089fa:	4b50      	ldr	r3, [pc, #320]	; (8008b3c <xTaskIncrementTick+0x14c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f040 808c 	bne.w	8008b1c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008a04:	4b4e      	ldr	r3, [pc, #312]	; (8008b40 <xTaskIncrementTick+0x150>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	3301      	adds	r3, #1
 8008a0a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008a0c:	4a4c      	ldr	r2, [pc, #304]	; (8008b40 <xTaskIncrementTick+0x150>)
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008a12:	693b      	ldr	r3, [r7, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d11f      	bne.n	8008a58 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008a18:	4b4a      	ldr	r3, [pc, #296]	; (8008b44 <xTaskIncrementTick+0x154>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d009      	beq.n	8008a36 <xTaskIncrementTick+0x46>
 8008a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a26:	f383 8811 	msr	BASEPRI, r3
 8008a2a:	f3bf 8f6f 	isb	sy
 8008a2e:	f3bf 8f4f 	dsb	sy
 8008a32:	603b      	str	r3, [r7, #0]
 8008a34:	e7fe      	b.n	8008a34 <xTaskIncrementTick+0x44>
 8008a36:	4b43      	ldr	r3, [pc, #268]	; (8008b44 <xTaskIncrementTick+0x154>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	4b42      	ldr	r3, [pc, #264]	; (8008b48 <xTaskIncrementTick+0x158>)
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a40      	ldr	r2, [pc, #256]	; (8008b44 <xTaskIncrementTick+0x154>)
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	4a40      	ldr	r2, [pc, #256]	; (8008b48 <xTaskIncrementTick+0x158>)
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	6013      	str	r3, [r2, #0]
 8008a4a:	4b40      	ldr	r3, [pc, #256]	; (8008b4c <xTaskIncrementTick+0x15c>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	3301      	adds	r3, #1
 8008a50:	4a3e      	ldr	r2, [pc, #248]	; (8008b4c <xTaskIncrementTick+0x15c>)
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	f000 fac6 	bl	8008fe4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008a58:	4b3d      	ldr	r3, [pc, #244]	; (8008b50 <xTaskIncrementTick+0x160>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d34d      	bcc.n	8008afe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a62:	4b38      	ldr	r3, [pc, #224]	; (8008b44 <xTaskIncrementTick+0x154>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d101      	bne.n	8008a70 <xTaskIncrementTick+0x80>
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e000      	b.n	8008a72 <xTaskIncrementTick+0x82>
 8008a70:	2300      	movs	r3, #0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a76:	4b36      	ldr	r3, [pc, #216]	; (8008b50 <xTaskIncrementTick+0x160>)
 8008a78:	f04f 32ff 	mov.w	r2, #4294967295
 8008a7c:	601a      	str	r2, [r3, #0]
					break;
 8008a7e:	e03e      	b.n	8008afe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008a80:	4b30      	ldr	r3, [pc, #192]	; (8008b44 <xTaskIncrementTick+0x154>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d203      	bcs.n	8008aa0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a98:	4a2d      	ldr	r2, [pc, #180]	; (8008b50 <xTaskIncrementTick+0x160>)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6013      	str	r3, [r2, #0]
						break;
 8008a9e:	e02e      	b.n	8008afe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	3304      	adds	r3, #4
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	f7fe ff17 	bl	80078d8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d004      	beq.n	8008abc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ab2:	68bb      	ldr	r3, [r7, #8]
 8008ab4:	3318      	adds	r3, #24
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7fe ff0e 	bl	80078d8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	409a      	lsls	r2, r3
 8008ac4:	4b23      	ldr	r3, [pc, #140]	; (8008b54 <xTaskIncrementTick+0x164>)
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	4a22      	ldr	r2, [pc, #136]	; (8008b54 <xTaskIncrementTick+0x164>)
 8008acc:	6013      	str	r3, [r2, #0]
 8008ace:	68bb      	ldr	r3, [r7, #8]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad2:	4613      	mov	r3, r2
 8008ad4:	009b      	lsls	r3, r3, #2
 8008ad6:	4413      	add	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4a1f      	ldr	r2, [pc, #124]	; (8008b58 <xTaskIncrementTick+0x168>)
 8008adc:	441a      	add	r2, r3
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	3304      	adds	r3, #4
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	4610      	mov	r0, r2
 8008ae6:	f7fe fe9a 	bl	800781e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008aee:	4b1b      	ldr	r3, [pc, #108]	; (8008b5c <xTaskIncrementTick+0x16c>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d3b4      	bcc.n	8008a62 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008af8:	2301      	movs	r3, #1
 8008afa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008afc:	e7b1      	b.n	8008a62 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008afe:	4b17      	ldr	r3, [pc, #92]	; (8008b5c <xTaskIncrementTick+0x16c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b04:	4914      	ldr	r1, [pc, #80]	; (8008b58 <xTaskIncrementTick+0x168>)
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d907      	bls.n	8008b26 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008b16:	2301      	movs	r3, #1
 8008b18:	617b      	str	r3, [r7, #20]
 8008b1a:	e004      	b.n	8008b26 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008b1c:	4b10      	ldr	r3, [pc, #64]	; (8008b60 <xTaskIncrementTick+0x170>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	3301      	adds	r3, #1
 8008b22:	4a0f      	ldr	r2, [pc, #60]	; (8008b60 <xTaskIncrementTick+0x170>)
 8008b24:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008b26:	4b0f      	ldr	r3, [pc, #60]	; (8008b64 <xTaskIncrementTick+0x174>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d001      	beq.n	8008b32 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008b32:	697b      	ldr	r3, [r7, #20]
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	200001dc 	.word	0x200001dc
 8008b40:	200001b8 	.word	0x200001b8
 8008b44:	2000016c 	.word	0x2000016c
 8008b48:	20000170 	.word	0x20000170
 8008b4c:	200001cc 	.word	0x200001cc
 8008b50:	200001d4 	.word	0x200001d4
 8008b54:	200001bc 	.word	0x200001bc
 8008b58:	200000b8 	.word	0x200000b8
 8008b5c:	200000b4 	.word	0x200000b4
 8008b60:	200001c4 	.word	0x200001c4
 8008b64:	200001c8 	.word	0x200001c8

08008b68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b087      	sub	sp, #28
 8008b6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008b6e:	4b26      	ldr	r3, [pc, #152]	; (8008c08 <vTaskSwitchContext+0xa0>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008b76:	4b25      	ldr	r3, [pc, #148]	; (8008c0c <vTaskSwitchContext+0xa4>)
 8008b78:	2201      	movs	r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008b7c:	e03e      	b.n	8008bfc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8008b7e:	4b23      	ldr	r3, [pc, #140]	; (8008c0c <vTaskSwitchContext+0xa4>)
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8008b84:	4b22      	ldr	r3, [pc, #136]	; (8008c10 <vTaskSwitchContext+0xa8>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	fab3 f383 	clz	r3, r3
 8008b90:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008b92:	7afb      	ldrb	r3, [r7, #11]
 8008b94:	f1c3 031f 	rsb	r3, r3, #31
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	491e      	ldr	r1, [pc, #120]	; (8008c14 <vTaskSwitchContext+0xac>)
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	4613      	mov	r3, r2
 8008ba0:	009b      	lsls	r3, r3, #2
 8008ba2:	4413      	add	r3, r2
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	440b      	add	r3, r1
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d109      	bne.n	8008bc2 <vTaskSwitchContext+0x5a>
	__asm volatile
 8008bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bb2:	f383 8811 	msr	BASEPRI, r3
 8008bb6:	f3bf 8f6f 	isb	sy
 8008bba:	f3bf 8f4f 	dsb	sy
 8008bbe:	607b      	str	r3, [r7, #4]
 8008bc0:	e7fe      	b.n	8008bc0 <vTaskSwitchContext+0x58>
 8008bc2:	697a      	ldr	r2, [r7, #20]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	4a11      	ldr	r2, [pc, #68]	; (8008c14 <vTaskSwitchContext+0xac>)
 8008bce:	4413      	add	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	685a      	ldr	r2, [r3, #4]
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	605a      	str	r2, [r3, #4]
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	3308      	adds	r3, #8
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d104      	bne.n	8008bf2 <vTaskSwitchContext+0x8a>
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	685a      	ldr	r2, [r3, #4]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	605a      	str	r2, [r3, #4]
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4a07      	ldr	r2, [pc, #28]	; (8008c18 <vTaskSwitchContext+0xb0>)
 8008bfa:	6013      	str	r3, [r2, #0]
}
 8008bfc:	bf00      	nop
 8008bfe:	371c      	adds	r7, #28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	200001dc 	.word	0x200001dc
 8008c0c:	200001c8 	.word	0x200001c8
 8008c10:	200001bc 	.word	0x200001bc
 8008c14:	200000b8 	.word	0x200000b8
 8008c18:	200000b4 	.word	0x200000b4

08008c1c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d109      	bne.n	8008c40 <vTaskPlaceOnEventList+0x24>
 8008c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c30:	f383 8811 	msr	BASEPRI, r3
 8008c34:	f3bf 8f6f 	isb	sy
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	60fb      	str	r3, [r7, #12]
 8008c3e:	e7fe      	b.n	8008c3e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c40:	4b07      	ldr	r3, [pc, #28]	; (8008c60 <vTaskPlaceOnEventList+0x44>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	3318      	adds	r3, #24
 8008c46:	4619      	mov	r1, r3
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f7fe fe0c 	bl	8007866 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008c4e:	2101      	movs	r1, #1
 8008c50:	6838      	ldr	r0, [r7, #0]
 8008c52:	f000 fa8f 	bl	8009174 <prvAddCurrentTaskToDelayedList>
}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	200000b4 	.word	0x200000b4

08008c64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d109      	bne.n	8008c8a <vTaskPlaceOnEventListRestricted+0x26>
 8008c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7a:	f383 8811 	msr	BASEPRI, r3
 8008c7e:	f3bf 8f6f 	isb	sy
 8008c82:	f3bf 8f4f 	dsb	sy
 8008c86:	617b      	str	r3, [r7, #20]
 8008c88:	e7fe      	b.n	8008c88 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c8a:	4b0a      	ldr	r3, [pc, #40]	; (8008cb4 <vTaskPlaceOnEventListRestricted+0x50>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	3318      	adds	r3, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f7fe fdc3 	bl	800781e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d002      	beq.n	8008ca4 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8008c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8008ca2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008ca4:	6879      	ldr	r1, [r7, #4]
 8008ca6:	68b8      	ldr	r0, [r7, #8]
 8008ca8:	f000 fa64 	bl	8009174 <prvAddCurrentTaskToDelayedList>
	}
 8008cac:	bf00      	nop
 8008cae:	3718      	adds	r7, #24
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	200000b4 	.word	0x200000b4

08008cb8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d109      	bne.n	8008ce2 <xTaskRemoveFromEventList+0x2a>
 8008cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd2:	f383 8811 	msr	BASEPRI, r3
 8008cd6:	f3bf 8f6f 	isb	sy
 8008cda:	f3bf 8f4f 	dsb	sy
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e7fe      	b.n	8008ce0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	3318      	adds	r3, #24
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f7fe fdf6 	bl	80078d8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cec:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <xTaskRemoveFromEventList+0xac>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11c      	bne.n	8008d2e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	3304      	adds	r3, #4
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f7fe fded 	bl	80078d8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d02:	2201      	movs	r2, #1
 8008d04:	409a      	lsls	r2, r3
 8008d06:	4b18      	ldr	r3, [pc, #96]	; (8008d68 <xTaskRemoveFromEventList+0xb0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	4a16      	ldr	r2, [pc, #88]	; (8008d68 <xTaskRemoveFromEventList+0xb0>)
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	4613      	mov	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	4413      	add	r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4a13      	ldr	r2, [pc, #76]	; (8008d6c <xTaskRemoveFromEventList+0xb4>)
 8008d1e:	441a      	add	r2, r3
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	3304      	adds	r3, #4
 8008d24:	4619      	mov	r1, r3
 8008d26:	4610      	mov	r0, r2
 8008d28:	f7fe fd79 	bl	800781e <vListInsertEnd>
 8008d2c:	e005      	b.n	8008d3a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	3318      	adds	r3, #24
 8008d32:	4619      	mov	r1, r3
 8008d34:	480e      	ldr	r0, [pc, #56]	; (8008d70 <xTaskRemoveFromEventList+0xb8>)
 8008d36:	f7fe fd72 	bl	800781e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	4b0d      	ldr	r3, [pc, #52]	; (8008d74 <xTaskRemoveFromEventList+0xbc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d905      	bls.n	8008d54 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008d4c:	4b0a      	ldr	r3, [pc, #40]	; (8008d78 <xTaskRemoveFromEventList+0xc0>)
 8008d4e:	2201      	movs	r2, #1
 8008d50:	601a      	str	r2, [r3, #0]
 8008d52:	e001      	b.n	8008d58 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8008d54:	2300      	movs	r3, #0
 8008d56:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8008d58:	697b      	ldr	r3, [r7, #20]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	200001dc 	.word	0x200001dc
 8008d68:	200001bc 	.word	0x200001bc
 8008d6c:	200000b8 	.word	0x200000b8
 8008d70:	20000174 	.word	0x20000174
 8008d74:	200000b4 	.word	0x200000b4
 8008d78:	200001c8 	.word	0x200001c8

08008d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b083      	sub	sp, #12
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d84:	4b06      	ldr	r3, [pc, #24]	; (8008da0 <vTaskInternalSetTimeOutState+0x24>)
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <vTaskInternalSetTimeOutState+0x28>)
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	605a      	str	r2, [r3, #4]
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr
 8008da0:	200001cc 	.word	0x200001cc
 8008da4:	200001b8 	.word	0x200001b8

08008da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b088      	sub	sp, #32
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d109      	bne.n	8008dcc <xTaskCheckForTimeOut+0x24>
 8008db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dbc:	f383 8811 	msr	BASEPRI, r3
 8008dc0:	f3bf 8f6f 	isb	sy
 8008dc4:	f3bf 8f4f 	dsb	sy
 8008dc8:	613b      	str	r3, [r7, #16]
 8008dca:	e7fe      	b.n	8008dca <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d109      	bne.n	8008de6 <xTaskCheckForTimeOut+0x3e>
 8008dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	60fb      	str	r3, [r7, #12]
 8008de4:	e7fe      	b.n	8008de4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8008de6:	f000 fed1 	bl	8009b8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008dea:	4b1d      	ldr	r3, [pc, #116]	; (8008e60 <xTaskCheckForTimeOut+0xb8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	685b      	ldr	r3, [r3, #4]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e02:	d102      	bne.n	8008e0a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	e023      	b.n	8008e52 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	4b15      	ldr	r3, [pc, #84]	; (8008e64 <xTaskCheckForTimeOut+0xbc>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d007      	beq.n	8008e26 <xTaskCheckForTimeOut+0x7e>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	69ba      	ldr	r2, [r7, #24]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d302      	bcc.n	8008e26 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008e20:	2301      	movs	r3, #1
 8008e22:	61fb      	str	r3, [r7, #28]
 8008e24:	e015      	b.n	8008e52 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	697a      	ldr	r2, [r7, #20]
 8008e2c:	429a      	cmp	r2, r3
 8008e2e:	d20b      	bcs.n	8008e48 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	1ad2      	subs	r2, r2, r3
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff ff9d 	bl	8008d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	61fb      	str	r3, [r7, #28]
 8008e46:	e004      	b.n	8008e52 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008e52:	f000 fec9 	bl	8009be8 <vPortExitCritical>

	return xReturn;
 8008e56:	69fb      	ldr	r3, [r7, #28]
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3720      	adds	r7, #32
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200001b8 	.word	0x200001b8
 8008e64:	200001cc 	.word	0x200001cc

08008e68 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008e68:	b480      	push	{r7}
 8008e6a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008e6c:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <vTaskMissedYield+0x14>)
 8008e6e:	2201      	movs	r2, #1
 8008e70:	601a      	str	r2, [r3, #0]
}
 8008e72:	bf00      	nop
 8008e74:	46bd      	mov	sp, r7
 8008e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7a:	4770      	bx	lr
 8008e7c:	200001c8 	.word	0x200001c8

08008e80 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e88:	f000 f852 	bl	8008f30 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <prvIdleTask+0x28>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d9f9      	bls.n	8008e88 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <prvIdleTask+0x2c>)
 8008e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e9a:	601a      	str	r2, [r3, #0]
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008ea4:	e7f0      	b.n	8008e88 <prvIdleTask+0x8>
 8008ea6:	bf00      	nop
 8008ea8:	200000b8 	.word	0x200000b8
 8008eac:	e000ed04 	.word	0xe000ed04

08008eb0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	607b      	str	r3, [r7, #4]
 8008eba:	e00c      	b.n	8008ed6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	4613      	mov	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4413      	add	r3, r2
 8008ec4:	009b      	lsls	r3, r3, #2
 8008ec6:	4a12      	ldr	r2, [pc, #72]	; (8008f10 <prvInitialiseTaskLists+0x60>)
 8008ec8:	4413      	add	r3, r2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7fe fc7a 	bl	80077c4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3301      	adds	r3, #1
 8008ed4:	607b      	str	r3, [r7, #4]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b06      	cmp	r3, #6
 8008eda:	d9ef      	bls.n	8008ebc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008edc:	480d      	ldr	r0, [pc, #52]	; (8008f14 <prvInitialiseTaskLists+0x64>)
 8008ede:	f7fe fc71 	bl	80077c4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ee2:	480d      	ldr	r0, [pc, #52]	; (8008f18 <prvInitialiseTaskLists+0x68>)
 8008ee4:	f7fe fc6e 	bl	80077c4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ee8:	480c      	ldr	r0, [pc, #48]	; (8008f1c <prvInitialiseTaskLists+0x6c>)
 8008eea:	f7fe fc6b 	bl	80077c4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008eee:	480c      	ldr	r0, [pc, #48]	; (8008f20 <prvInitialiseTaskLists+0x70>)
 8008ef0:	f7fe fc68 	bl	80077c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ef4:	480b      	ldr	r0, [pc, #44]	; (8008f24 <prvInitialiseTaskLists+0x74>)
 8008ef6:	f7fe fc65 	bl	80077c4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008efa:	4b0b      	ldr	r3, [pc, #44]	; (8008f28 <prvInitialiseTaskLists+0x78>)
 8008efc:	4a05      	ldr	r2, [pc, #20]	; (8008f14 <prvInitialiseTaskLists+0x64>)
 8008efe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f00:	4b0a      	ldr	r3, [pc, #40]	; (8008f2c <prvInitialiseTaskLists+0x7c>)
 8008f02:	4a05      	ldr	r2, [pc, #20]	; (8008f18 <prvInitialiseTaskLists+0x68>)
 8008f04:	601a      	str	r2, [r3, #0]
}
 8008f06:	bf00      	nop
 8008f08:	3708      	adds	r7, #8
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	200000b8 	.word	0x200000b8
 8008f14:	20000144 	.word	0x20000144
 8008f18:	20000158 	.word	0x20000158
 8008f1c:	20000174 	.word	0x20000174
 8008f20:	20000188 	.word	0x20000188
 8008f24:	200001a0 	.word	0x200001a0
 8008f28:	2000016c 	.word	0x2000016c
 8008f2c:	20000170 	.word	0x20000170

08008f30 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f36:	e019      	b.n	8008f6c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f38:	f000 fe28 	bl	8009b8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008f3c:	4b0f      	ldr	r3, [pc, #60]	; (8008f7c <prvCheckTasksWaitingTermination+0x4c>)
 8008f3e:	68db      	ldr	r3, [r3, #12]
 8008f40:	68db      	ldr	r3, [r3, #12]
 8008f42:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	3304      	adds	r3, #4
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f7fe fcc5 	bl	80078d8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <prvCheckTasksWaitingTermination+0x50>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a0a      	ldr	r2, [pc, #40]	; (8008f80 <prvCheckTasksWaitingTermination+0x50>)
 8008f56:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f58:	4b0a      	ldr	r3, [pc, #40]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3b01      	subs	r3, #1
 8008f5e:	4a09      	ldr	r2, [pc, #36]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f60:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f62:	f000 fe41 	bl	8009be8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f80e 	bl	8008f88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f6c:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <prvCheckTasksWaitingTermination+0x54>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e1      	bne.n	8008f38 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f74:	bf00      	nop
 8008f76:	3708      	adds	r7, #8
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}
 8008f7c:	20000188 	.word	0x20000188
 8008f80:	200001b4 	.word	0x200001b4
 8008f84:	2000019c 	.word	0x2000019c

08008f88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d108      	bne.n	8008fac <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f000 ffd0 	bl	8009f44 <vPortFree>
				vPortFree( pxTCB );
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 ffcd 	bl	8009f44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008faa:	e017      	b.n	8008fdc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d103      	bne.n	8008fbe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f000 ffc4 	bl	8009f44 <vPortFree>
	}
 8008fbc:	e00e      	b.n	8008fdc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fc4:	2b02      	cmp	r3, #2
 8008fc6:	d009      	beq.n	8008fdc <prvDeleteTCB+0x54>
 8008fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fcc:	f383 8811 	msr	BASEPRI, r3
 8008fd0:	f3bf 8f6f 	isb	sy
 8008fd4:	f3bf 8f4f 	dsb	sy
 8008fd8:	60fb      	str	r3, [r7, #12]
 8008fda:	e7fe      	b.n	8008fda <prvDeleteTCB+0x52>
	}
 8008fdc:	bf00      	nop
 8008fde:	3710      	adds	r7, #16
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}

08008fe4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fea:	4b0f      	ldr	r3, [pc, #60]	; (8009028 <prvResetNextTaskUnblockTime+0x44>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d101      	bne.n	8008ff8 <prvResetNextTaskUnblockTime+0x14>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e000      	b.n	8008ffa <prvResetNextTaskUnblockTime+0x16>
 8008ff8:	2300      	movs	r3, #0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d004      	beq.n	8009008 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ffe:	4b0b      	ldr	r3, [pc, #44]	; (800902c <prvResetNextTaskUnblockTime+0x48>)
 8009000:	f04f 32ff 	mov.w	r2, #4294967295
 8009004:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009006:	e008      	b.n	800901a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009008:	4b07      	ldr	r3, [pc, #28]	; (8009028 <prvResetNextTaskUnblockTime+0x44>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	68db      	ldr	r3, [r3, #12]
 800900e:	68db      	ldr	r3, [r3, #12]
 8009010:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	4a05      	ldr	r2, [pc, #20]	; (800902c <prvResetNextTaskUnblockTime+0x48>)
 8009018:	6013      	str	r3, [r2, #0]
}
 800901a:	bf00      	nop
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	2000016c 	.word	0x2000016c
 800902c:	200001d4 	.word	0x200001d4

08009030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009036:	4b0b      	ldr	r3, [pc, #44]	; (8009064 <xTaskGetSchedulerState+0x34>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d102      	bne.n	8009044 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800903e:	2301      	movs	r3, #1
 8009040:	607b      	str	r3, [r7, #4]
 8009042:	e008      	b.n	8009056 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009044:	4b08      	ldr	r3, [pc, #32]	; (8009068 <xTaskGetSchedulerState+0x38>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d102      	bne.n	8009052 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800904c:	2302      	movs	r3, #2
 800904e:	607b      	str	r3, [r7, #4]
 8009050:	e001      	b.n	8009056 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009052:	2300      	movs	r3, #0
 8009054:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009056:	687b      	ldr	r3, [r7, #4]
	}
 8009058:	4618      	mov	r0, r3
 800905a:	370c      	adds	r7, #12
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	200001c0 	.word	0x200001c0
 8009068:	200001dc 	.word	0x200001dc

0800906c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800906c:	b580      	push	{r7, lr}
 800906e:	b086      	sub	sp, #24
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009078:	2300      	movs	r3, #0
 800907a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d06c      	beq.n	800915c <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009082:	4b39      	ldr	r3, [pc, #228]	; (8009168 <xTaskPriorityDisinherit+0xfc>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	429a      	cmp	r2, r3
 800908a:	d009      	beq.n	80090a0 <xTaskPriorityDisinherit+0x34>
 800908c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009090:	f383 8811 	msr	BASEPRI, r3
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	f3bf 8f4f 	dsb	sy
 800909c:	60fb      	str	r3, [r7, #12]
 800909e:	e7fe      	b.n	800909e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <xTaskPriorityDisinherit+0x50>
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	e7fe      	b.n	80090ba <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090c0:	1e5a      	subs	r2, r3, #1
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80090c6:	693b      	ldr	r3, [r7, #16]
 80090c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d044      	beq.n	800915c <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d140      	bne.n	800915c <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	3304      	adds	r3, #4
 80090de:	4618      	mov	r0, r3
 80090e0:	f7fe fbfa 	bl	80078d8 <uxListRemove>
 80090e4:	4603      	mov	r3, r0
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d115      	bne.n	8009116 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80090ea:	693b      	ldr	r3, [r7, #16]
 80090ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090ee:	491f      	ldr	r1, [pc, #124]	; (800916c <xTaskPriorityDisinherit+0x100>)
 80090f0:	4613      	mov	r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	440b      	add	r3, r1
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d10a      	bne.n	8009116 <xTaskPriorityDisinherit+0xaa>
 8009100:	693b      	ldr	r3, [r7, #16]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	2201      	movs	r2, #1
 8009106:	fa02 f303 	lsl.w	r3, r2, r3
 800910a:	43da      	mvns	r2, r3
 800910c:	4b18      	ldr	r3, [pc, #96]	; (8009170 <xTaskPriorityDisinherit+0x104>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4013      	ands	r3, r2
 8009112:	4a17      	ldr	r2, [pc, #92]	; (8009170 <xTaskPriorityDisinherit+0x104>)
 8009114:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009116:	693b      	ldr	r3, [r7, #16]
 8009118:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800911e:	693b      	ldr	r3, [r7, #16]
 8009120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009122:	f1c3 0207 	rsb	r2, r3, #7
 8009126:	693b      	ldr	r3, [r7, #16]
 8009128:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800912e:	2201      	movs	r2, #1
 8009130:	409a      	lsls	r2, r3
 8009132:	4b0f      	ldr	r3, [pc, #60]	; (8009170 <xTaskPriorityDisinherit+0x104>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4313      	orrs	r3, r2
 8009138:	4a0d      	ldr	r2, [pc, #52]	; (8009170 <xTaskPriorityDisinherit+0x104>)
 800913a:	6013      	str	r3, [r2, #0]
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009140:	4613      	mov	r3, r2
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	4a08      	ldr	r2, [pc, #32]	; (800916c <xTaskPriorityDisinherit+0x100>)
 800914a:	441a      	add	r2, r3
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	3304      	adds	r3, #4
 8009150:	4619      	mov	r1, r3
 8009152:	4610      	mov	r0, r2
 8009154:	f7fe fb63 	bl	800781e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800915c:	697b      	ldr	r3, [r7, #20]
	}
 800915e:	4618      	mov	r0, r3
 8009160:	3718      	adds	r7, #24
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	200000b4 	.word	0x200000b4
 800916c:	200000b8 	.word	0x200000b8
 8009170:	200001bc 	.word	0x200001bc

08009174 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b084      	sub	sp, #16
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800917e:	4b29      	ldr	r3, [pc, #164]	; (8009224 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009184:	4b28      	ldr	r3, [pc, #160]	; (8009228 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	3304      	adds	r3, #4
 800918a:	4618      	mov	r0, r3
 800918c:	f7fe fba4 	bl	80078d8 <uxListRemove>
 8009190:	4603      	mov	r3, r0
 8009192:	2b00      	cmp	r3, #0
 8009194:	d10b      	bne.n	80091ae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009196:	4b24      	ldr	r3, [pc, #144]	; (8009228 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800919c:	2201      	movs	r2, #1
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	43da      	mvns	r2, r3
 80091a4:	4b21      	ldr	r3, [pc, #132]	; (800922c <prvAddCurrentTaskToDelayedList+0xb8>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4013      	ands	r3, r2
 80091aa:	4a20      	ldr	r2, [pc, #128]	; (800922c <prvAddCurrentTaskToDelayedList+0xb8>)
 80091ac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d10a      	bne.n	80091cc <prvAddCurrentTaskToDelayedList+0x58>
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d007      	beq.n	80091cc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091bc:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	3304      	adds	r3, #4
 80091c2:	4619      	mov	r1, r3
 80091c4:	481a      	ldr	r0, [pc, #104]	; (8009230 <prvAddCurrentTaskToDelayedList+0xbc>)
 80091c6:	f7fe fb2a 	bl	800781e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80091ca:	e026      	b.n	800921a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80091cc:	68fa      	ldr	r2, [r7, #12]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4413      	add	r3, r2
 80091d2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80091d4:	4b14      	ldr	r3, [pc, #80]	; (8009228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80091dc:	68ba      	ldr	r2, [r7, #8]
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d209      	bcs.n	80091f8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091e4:	4b13      	ldr	r3, [pc, #76]	; (8009234 <prvAddCurrentTaskToDelayedList+0xc0>)
 80091e6:	681a      	ldr	r2, [r3, #0]
 80091e8:	4b0f      	ldr	r3, [pc, #60]	; (8009228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	3304      	adds	r3, #4
 80091ee:	4619      	mov	r1, r3
 80091f0:	4610      	mov	r0, r2
 80091f2:	f7fe fb38 	bl	8007866 <vListInsert>
}
 80091f6:	e010      	b.n	800921a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80091f8:	4b0f      	ldr	r3, [pc, #60]	; (8009238 <prvAddCurrentTaskToDelayedList+0xc4>)
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	4b0a      	ldr	r3, [pc, #40]	; (8009228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	3304      	adds	r3, #4
 8009202:	4619      	mov	r1, r3
 8009204:	4610      	mov	r0, r2
 8009206:	f7fe fb2e 	bl	8007866 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <prvAddCurrentTaskToDelayedList+0xc8>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	429a      	cmp	r2, r3
 8009212:	d202      	bcs.n	800921a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009214:	4a09      	ldr	r2, [pc, #36]	; (800923c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6013      	str	r3, [r2, #0]
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	200001b8 	.word	0x200001b8
 8009228:	200000b4 	.word	0x200000b4
 800922c:	200001bc 	.word	0x200001bc
 8009230:	200001a0 	.word	0x200001a0
 8009234:	20000170 	.word	0x20000170
 8009238:	2000016c 	.word	0x2000016c
 800923c:	200001d4 	.word	0x200001d4

08009240 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b08a      	sub	sp, #40	; 0x28
 8009244:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800924a:	f000 fb37 	bl	80098bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800924e:	4b1c      	ldr	r3, [pc, #112]	; (80092c0 <xTimerCreateTimerTask+0x80>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d021      	beq.n	800929a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800925a:	2300      	movs	r3, #0
 800925c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800925e:	1d3a      	adds	r2, r7, #4
 8009260:	f107 0108 	add.w	r1, r7, #8
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	4618      	mov	r0, r3
 800926a:	f000 ff99 	bl	800a1a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800926e:	6879      	ldr	r1, [r7, #4]
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	9202      	str	r2, [sp, #8]
 8009276:	9301      	str	r3, [sp, #4]
 8009278:	2302      	movs	r3, #2
 800927a:	9300      	str	r3, [sp, #0]
 800927c:	2300      	movs	r3, #0
 800927e:	460a      	mov	r2, r1
 8009280:	4910      	ldr	r1, [pc, #64]	; (80092c4 <xTimerCreateTimerTask+0x84>)
 8009282:	4811      	ldr	r0, [pc, #68]	; (80092c8 <xTimerCreateTimerTask+0x88>)
 8009284:	f7ff f8dc 	bl	8008440 <xTaskCreateStatic>
 8009288:	4602      	mov	r2, r0
 800928a:	4b10      	ldr	r3, [pc, #64]	; (80092cc <xTimerCreateTimerTask+0x8c>)
 800928c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800928e:	4b0f      	ldr	r3, [pc, #60]	; (80092cc <xTimerCreateTimerTask+0x8c>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009296:	2301      	movs	r3, #1
 8009298:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d109      	bne.n	80092b4 <xTimerCreateTimerTask+0x74>
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	613b      	str	r3, [r7, #16]
 80092b2:	e7fe      	b.n	80092b2 <xTimerCreateTimerTask+0x72>
	return xReturn;
 80092b4:	697b      	ldr	r3, [r7, #20]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3718      	adds	r7, #24
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}
 80092be:	bf00      	nop
 80092c0:	20000210 	.word	0x20000210
 80092c4:	0800b434 	.word	0x0800b434
 80092c8:	08009505 	.word	0x08009505
 80092cc:	20000214 	.word	0x20000214

080092d0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b088      	sub	sp, #32
 80092d4:	af02      	add	r7, sp, #8
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
 80092dc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80092de:	202c      	movs	r0, #44	; 0x2c
 80092e0:	f000 fd6e 	bl	8009dc0 <pvPortMalloc>
 80092e4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d00d      	beq.n	8009308 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80092ec:	697b      	ldr	r3, [r7, #20]
 80092ee:	9301      	str	r3, [sp, #4]
 80092f0:	6a3b      	ldr	r3, [r7, #32]
 80092f2:	9300      	str	r3, [sp, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	687a      	ldr	r2, [r7, #4]
 80092f8:	68b9      	ldr	r1, [r7, #8]
 80092fa:	68f8      	ldr	r0, [r7, #12]
 80092fc:	f000 f844 	bl	8009388 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009300:	697b      	ldr	r3, [r7, #20]
 8009302:	2200      	movs	r2, #0
 8009304:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009308:	697b      	ldr	r3, [r7, #20]
	}
 800930a:	4618      	mov	r0, r3
 800930c:	3718      	adds	r7, #24
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}

08009312 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009312:	b580      	push	{r7, lr}
 8009314:	b08a      	sub	sp, #40	; 0x28
 8009316:	af02      	add	r7, sp, #8
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	607a      	str	r2, [r7, #4]
 800931e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009320:	232c      	movs	r3, #44	; 0x2c
 8009322:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	2b2c      	cmp	r3, #44	; 0x2c
 8009328:	d009      	beq.n	800933e <xTimerCreateStatic+0x2c>
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	61bb      	str	r3, [r7, #24]
 800933c:	e7fe      	b.n	800933c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009340:	2b00      	cmp	r3, #0
 8009342:	d109      	bne.n	8009358 <xTimerCreateStatic+0x46>
 8009344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	617b      	str	r3, [r7, #20]
 8009356:	e7fe      	b.n	8009356 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d00d      	beq.n	800937e <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	9301      	str	r3, [sp, #4]
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	9300      	str	r3, [sp, #0]
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	68b9      	ldr	r1, [r7, #8]
 8009370:	68f8      	ldr	r0, [r7, #12]
 8009372:	f000 f809 	bl	8009388 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009376:	69fb      	ldr	r3, [r7, #28]
 8009378:	2201      	movs	r2, #1
 800937a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 800937e:	69fb      	ldr	r3, [r7, #28]
	}
 8009380:	4618      	mov	r0, r3
 8009382:	3720      	adds	r7, #32
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b086      	sub	sp, #24
 800938c:	af00      	add	r7, sp, #0
 800938e:	60f8      	str	r0, [r7, #12]
 8009390:	60b9      	str	r1, [r7, #8]
 8009392:	607a      	str	r2, [r7, #4]
 8009394:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d109      	bne.n	80093b0 <prvInitialiseNewTimer+0x28>
 800939c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a0:	f383 8811 	msr	BASEPRI, r3
 80093a4:	f3bf 8f6f 	isb	sy
 80093a8:	f3bf 8f4f 	dsb	sy
 80093ac:	617b      	str	r3, [r7, #20]
 80093ae:	e7fe      	b.n	80093ae <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d015      	beq.n	80093e2 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80093b6:	f000 fa81 	bl	80098bc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80093ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80093c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c2:	68ba      	ldr	r2, [r7, #8]
 80093c4:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80093c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c8:	687a      	ldr	r2, [r7, #4]
 80093ca:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 80093cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ce:	683a      	ldr	r2, [r7, #0]
 80093d0:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80093d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d4:	6a3a      	ldr	r2, [r7, #32]
 80093d6:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80093d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093da:	3304      	adds	r3, #4
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fe fa11 	bl	8007804 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80093e2:	bf00      	nop
 80093e4:	3718      	adds	r7, #24
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
	...

080093ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b08a      	sub	sp, #40	; 0x28
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	60f8      	str	r0, [r7, #12]
 80093f4:	60b9      	str	r1, [r7, #8]
 80093f6:	607a      	str	r2, [r7, #4]
 80093f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d109      	bne.n	8009418 <xTimerGenericCommand+0x2c>
 8009404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009408:	f383 8811 	msr	BASEPRI, r3
 800940c:	f3bf 8f6f 	isb	sy
 8009410:	f3bf 8f4f 	dsb	sy
 8009414:	623b      	str	r3, [r7, #32]
 8009416:	e7fe      	b.n	8009416 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009418:	4b19      	ldr	r3, [pc, #100]	; (8009480 <xTimerGenericCommand+0x94>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d02a      	beq.n	8009476 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	2b05      	cmp	r3, #5
 8009430:	dc18      	bgt.n	8009464 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009432:	f7ff fdfd 	bl	8009030 <xTaskGetSchedulerState>
 8009436:	4603      	mov	r3, r0
 8009438:	2b02      	cmp	r3, #2
 800943a:	d109      	bne.n	8009450 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800943c:	4b10      	ldr	r3, [pc, #64]	; (8009480 <xTimerGenericCommand+0x94>)
 800943e:	6818      	ldr	r0, [r3, #0]
 8009440:	f107 0114 	add.w	r1, r7, #20
 8009444:	2300      	movs	r3, #0
 8009446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009448:	f7fe fba6 	bl	8007b98 <xQueueGenericSend>
 800944c:	6278      	str	r0, [r7, #36]	; 0x24
 800944e:	e012      	b.n	8009476 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009450:	4b0b      	ldr	r3, [pc, #44]	; (8009480 <xTimerGenericCommand+0x94>)
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	f107 0114 	add.w	r1, r7, #20
 8009458:	2300      	movs	r3, #0
 800945a:	2200      	movs	r2, #0
 800945c:	f7fe fb9c 	bl	8007b98 <xQueueGenericSend>
 8009460:	6278      	str	r0, [r7, #36]	; 0x24
 8009462:	e008      	b.n	8009476 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009464:	4b06      	ldr	r3, [pc, #24]	; (8009480 <xTimerGenericCommand+0x94>)
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	f107 0114 	add.w	r1, r7, #20
 800946c:	2300      	movs	r3, #0
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	f7fe fc8c 	bl	8007d8c <xQueueGenericSendFromISR>
 8009474:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009478:	4618      	mov	r0, r3
 800947a:	3728      	adds	r7, #40	; 0x28
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20000210 	.word	0x20000210

08009484 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b088      	sub	sp, #32
 8009488:	af02      	add	r7, sp, #8
 800948a:	6078      	str	r0, [r7, #4]
 800948c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800948e:	4b1c      	ldr	r3, [pc, #112]	; (8009500 <prvProcessExpiredTimer+0x7c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	68db      	ldr	r3, [r3, #12]
 8009496:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	3304      	adds	r3, #4
 800949c:	4618      	mov	r0, r3
 800949e:	f7fe fa1b 	bl	80078d8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	69db      	ldr	r3, [r3, #28]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d121      	bne.n	80094ee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	699a      	ldr	r2, [r3, #24]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	18d1      	adds	r1, r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	683a      	ldr	r2, [r7, #0]
 80094b6:	6978      	ldr	r0, [r7, #20]
 80094b8:	f000 f8c8 	bl	800964c <prvInsertTimerInActiveList>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d015      	beq.n	80094ee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094c2:	2300      	movs	r3, #0
 80094c4:	9300      	str	r3, [sp, #0]
 80094c6:	2300      	movs	r3, #0
 80094c8:	687a      	ldr	r2, [r7, #4]
 80094ca:	2100      	movs	r1, #0
 80094cc:	6978      	ldr	r0, [r7, #20]
 80094ce:	f7ff ff8d 	bl	80093ec <xTimerGenericCommand>
 80094d2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d109      	bne.n	80094ee <prvProcessExpiredTimer+0x6a>
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e7fe      	b.n	80094ec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094ee:	697b      	ldr	r3, [r7, #20]
 80094f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f2:	6978      	ldr	r0, [r7, #20]
 80094f4:	4798      	blx	r3
}
 80094f6:	bf00      	nop
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20000208 	.word	0x20000208

08009504 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800950c:	f107 0308 	add.w	r3, r7, #8
 8009510:	4618      	mov	r0, r3
 8009512:	f000 f857 	bl	80095c4 <prvGetNextExpireTime>
 8009516:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	4619      	mov	r1, r3
 800951c:	68f8      	ldr	r0, [r7, #12]
 800951e:	f000 f803 	bl	8009528 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009522:	f000 f8d5 	bl	80096d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009526:	e7f1      	b.n	800950c <prvTimerTask+0x8>

08009528 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009528:	b580      	push	{r7, lr}
 800952a:	b084      	sub	sp, #16
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009532:	f7ff f9a3 	bl	800887c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009536:	f107 0308 	add.w	r3, r7, #8
 800953a:	4618      	mov	r0, r3
 800953c:	f000 f866 	bl	800960c <prvSampleTimeNow>
 8009540:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009542:	68bb      	ldr	r3, [r7, #8]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d130      	bne.n	80095aa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d10a      	bne.n	8009564 <prvProcessTimerOrBlockTask+0x3c>
 800954e:	687a      	ldr	r2, [r7, #4]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	429a      	cmp	r2, r3
 8009554:	d806      	bhi.n	8009564 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009556:	f7ff f99f 	bl	8008898 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800955a:	68f9      	ldr	r1, [r7, #12]
 800955c:	6878      	ldr	r0, [r7, #4]
 800955e:	f7ff ff91 	bl	8009484 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009562:	e024      	b.n	80095ae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009564:	683b      	ldr	r3, [r7, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d008      	beq.n	800957c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800956a:	4b13      	ldr	r3, [pc, #76]	; (80095b8 <prvProcessTimerOrBlockTask+0x90>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	2b00      	cmp	r3, #0
 8009572:	bf0c      	ite	eq
 8009574:	2301      	moveq	r3, #1
 8009576:	2300      	movne	r3, #0
 8009578:	b2db      	uxtb	r3, r3
 800957a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800957c:	4b0f      	ldr	r3, [pc, #60]	; (80095bc <prvProcessTimerOrBlockTask+0x94>)
 800957e:	6818      	ldr	r0, [r3, #0]
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	1ad3      	subs	r3, r2, r3
 8009586:	683a      	ldr	r2, [r7, #0]
 8009588:	4619      	mov	r1, r3
 800958a:	f7fe ff25 	bl	80083d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800958e:	f7ff f983 	bl	8008898 <xTaskResumeAll>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10a      	bne.n	80095ae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009598:	4b09      	ldr	r3, [pc, #36]	; (80095c0 <prvProcessTimerOrBlockTask+0x98>)
 800959a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800959e:	601a      	str	r2, [r3, #0]
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	f3bf 8f6f 	isb	sy
}
 80095a8:	e001      	b.n	80095ae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80095aa:	f7ff f975 	bl	8008898 <xTaskResumeAll>
}
 80095ae:	bf00      	nop
 80095b0:	3710      	adds	r7, #16
 80095b2:	46bd      	mov	sp, r7
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	2000020c 	.word	0x2000020c
 80095bc:	20000210 	.word	0x20000210
 80095c0:	e000ed04 	.word	0xe000ed04

080095c4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80095cc:	4b0e      	ldr	r3, [pc, #56]	; (8009608 <prvGetNextExpireTime+0x44>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	bf0c      	ite	eq
 80095d6:	2301      	moveq	r3, #1
 80095d8:	2300      	movne	r3, #0
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d105      	bne.n	80095f6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095ea:	4b07      	ldr	r3, [pc, #28]	; (8009608 <prvGetNextExpireTime+0x44>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e001      	b.n	80095fa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095fa:	68fb      	ldr	r3, [r7, #12]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3714      	adds	r7, #20
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr
 8009608:	20000208 	.word	0x20000208

0800960c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009614:	f7ff f9dc 	bl	80089d0 <xTaskGetTickCount>
 8009618:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <prvSampleTimeNow+0x3c>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	68fa      	ldr	r2, [r7, #12]
 8009620:	429a      	cmp	r2, r3
 8009622:	d205      	bcs.n	8009630 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009624:	f000 f8ea 	bl	80097fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2201      	movs	r2, #1
 800962c:	601a      	str	r2, [r3, #0]
 800962e:	e002      	b.n	8009636 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009636:	4a04      	ldr	r2, [pc, #16]	; (8009648 <prvSampleTimeNow+0x3c>)
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800963c:	68fb      	ldr	r3, [r7, #12]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	20000218 	.word	0x20000218

0800964c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	607a      	str	r2, [r7, #4]
 8009658:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800965a:	2300      	movs	r3, #0
 800965c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	429a      	cmp	r2, r3
 8009670:	d812      	bhi.n	8009698 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	1ad2      	subs	r2, r2, r3
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	617b      	str	r3, [r7, #20]
 8009684:	e01b      	b.n	80096be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009686:	4b10      	ldr	r3, [pc, #64]	; (80096c8 <prvInsertTimerInActiveList+0x7c>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	3304      	adds	r3, #4
 800968e:	4619      	mov	r1, r3
 8009690:	4610      	mov	r0, r2
 8009692:	f7fe f8e8 	bl	8007866 <vListInsert>
 8009696:	e012      	b.n	80096be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	429a      	cmp	r2, r3
 800969e:	d206      	bcs.n	80096ae <prvInsertTimerInActiveList+0x62>
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	429a      	cmp	r2, r3
 80096a6:	d302      	bcc.n	80096ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	e007      	b.n	80096be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096ae:	4b07      	ldr	r3, [pc, #28]	; (80096cc <prvInsertTimerInActiveList+0x80>)
 80096b0:	681a      	ldr	r2, [r3, #0]
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	3304      	adds	r3, #4
 80096b6:	4619      	mov	r1, r3
 80096b8:	4610      	mov	r0, r2
 80096ba:	f7fe f8d4 	bl	8007866 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80096be:	697b      	ldr	r3, [r7, #20]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	2000020c 	.word	0x2000020c
 80096cc:	20000208 	.word	0x20000208

080096d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b08c      	sub	sp, #48	; 0x30
 80096d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096d6:	e07f      	b.n	80097d8 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	db7b      	blt.n	80097d6 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096de:	693b      	ldr	r3, [r7, #16]
 80096e0:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	695b      	ldr	r3, [r3, #20]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d004      	beq.n	80096f4 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	3304      	adds	r3, #4
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fe f8f2 	bl	80078d8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096f4:	1d3b      	adds	r3, r7, #4
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff ff88 	bl	800960c <prvSampleTimeNow>
 80096fc:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	2b09      	cmp	r3, #9
 8009702:	d869      	bhi.n	80097d8 <prvProcessReceivedCommands+0x108>
 8009704:	a201      	add	r2, pc, #4	; (adr r2, 800970c <prvProcessReceivedCommands+0x3c>)
 8009706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800970a:	bf00      	nop
 800970c:	08009735 	.word	0x08009735
 8009710:	08009735 	.word	0x08009735
 8009714:	08009735 	.word	0x08009735
 8009718:	080097d9 	.word	0x080097d9
 800971c:	0800978f 	.word	0x0800978f
 8009720:	080097c5 	.word	0x080097c5
 8009724:	08009735 	.word	0x08009735
 8009728:	08009735 	.word	0x08009735
 800972c:	080097d9 	.word	0x080097d9
 8009730:	0800978f 	.word	0x0800978f
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009734:	68fa      	ldr	r2, [r7, #12]
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	699b      	ldr	r3, [r3, #24]
 800973a:	18d1      	adds	r1, r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6a3a      	ldr	r2, [r7, #32]
 8009740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009742:	f7ff ff83 	bl	800964c <prvInsertTimerInActiveList>
 8009746:	4603      	mov	r3, r0
 8009748:	2b00      	cmp	r3, #0
 800974a:	d045      	beq.n	80097d8 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800974c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009752:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009756:	69db      	ldr	r3, [r3, #28]
 8009758:	2b01      	cmp	r3, #1
 800975a:	d13d      	bne.n	80097d8 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009760:	699b      	ldr	r3, [r3, #24]
 8009762:	441a      	add	r2, r3
 8009764:	2300      	movs	r3, #0
 8009766:	9300      	str	r3, [sp, #0]
 8009768:	2300      	movs	r3, #0
 800976a:	2100      	movs	r1, #0
 800976c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800976e:	f7ff fe3d 	bl	80093ec <xTimerGenericCommand>
 8009772:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d12e      	bne.n	80097d8 <prvProcessReceivedCommands+0x108>
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	61bb      	str	r3, [r7, #24]
 800978c:	e7fe      	b.n	800978c <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009792:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	699b      	ldr	r3, [r3, #24]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d109      	bne.n	80097b0 <prvProcessReceivedCommands+0xe0>
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	617b      	str	r3, [r7, #20]
 80097ae:	e7fe      	b.n	80097ae <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	699a      	ldr	r2, [r3, #24]
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	18d1      	adds	r1, r2, r3
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	6a3a      	ldr	r2, [r7, #32]
 80097bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097be:	f7ff ff45 	bl	800964c <prvInsertTimerInActiveList>
					break;
 80097c2:	e009      	b.n	80097d8 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80097c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d104      	bne.n	80097d8 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 80097ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097d0:	f000 fbb8 	bl	8009f44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80097d4:	e000      	b.n	80097d8 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80097d6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80097d8:	4b07      	ldr	r3, [pc, #28]	; (80097f8 <prvProcessReceivedCommands+0x128>)
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f107 0108 	add.w	r1, r7, #8
 80097e0:	2200      	movs	r2, #0
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7fe fb66 	bl	8007eb4 <xQueueReceive>
 80097e8:	4603      	mov	r3, r0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	f47f af74 	bne.w	80096d8 <prvProcessReceivedCommands+0x8>
	}
}
 80097f0:	bf00      	nop
 80097f2:	3728      	adds	r7, #40	; 0x28
 80097f4:	46bd      	mov	sp, r7
 80097f6:	bd80      	pop	{r7, pc}
 80097f8:	20000210 	.word	0x20000210

080097fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b088      	sub	sp, #32
 8009800:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009802:	e044      	b.n	800988e <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009804:	4b2b      	ldr	r3, [pc, #172]	; (80098b4 <prvSwitchTimerLists+0xb8>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68db      	ldr	r3, [r3, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800980e:	4b29      	ldr	r3, [pc, #164]	; (80098b4 <prvSwitchTimerLists+0xb8>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	68db      	ldr	r3, [r3, #12]
 8009816:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3304      	adds	r3, #4
 800981c:	4618      	mov	r0, r3
 800981e:	f7fe f85b 	bl	80078d8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	69db      	ldr	r3, [r3, #28]
 800982e:	2b01      	cmp	r3, #1
 8009830:	d12d      	bne.n	800988e <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	699b      	ldr	r3, [r3, #24]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	4413      	add	r3, r2
 800983a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800983c:	68ba      	ldr	r2, [r7, #8]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	429a      	cmp	r2, r3
 8009842:	d90e      	bls.n	8009862 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	68ba      	ldr	r2, [r7, #8]
 8009848:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009850:	4b18      	ldr	r3, [pc, #96]	; (80098b4 <prvSwitchTimerLists+0xb8>)
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3304      	adds	r3, #4
 8009858:	4619      	mov	r1, r3
 800985a:	4610      	mov	r0, r2
 800985c:	f7fe f803 	bl	8007866 <vListInsert>
 8009860:	e015      	b.n	800988e <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009862:	2300      	movs	r3, #0
 8009864:	9300      	str	r3, [sp, #0]
 8009866:	2300      	movs	r3, #0
 8009868:	693a      	ldr	r2, [r7, #16]
 800986a:	2100      	movs	r1, #0
 800986c:	68f8      	ldr	r0, [r7, #12]
 800986e:	f7ff fdbd 	bl	80093ec <xTimerGenericCommand>
 8009872:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d109      	bne.n	800988e <prvSwitchTimerLists+0x92>
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	603b      	str	r3, [r7, #0]
 800988c:	e7fe      	b.n	800988c <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800988e:	4b09      	ldr	r3, [pc, #36]	; (80098b4 <prvSwitchTimerLists+0xb8>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1b5      	bne.n	8009804 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009898:	4b06      	ldr	r3, [pc, #24]	; (80098b4 <prvSwitchTimerLists+0xb8>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800989e:	4b06      	ldr	r3, [pc, #24]	; (80098b8 <prvSwitchTimerLists+0xbc>)
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	4a04      	ldr	r2, [pc, #16]	; (80098b4 <prvSwitchTimerLists+0xb8>)
 80098a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80098a6:	4a04      	ldr	r2, [pc, #16]	; (80098b8 <prvSwitchTimerLists+0xbc>)
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	6013      	str	r3, [r2, #0]
}
 80098ac:	bf00      	nop
 80098ae:	3718      	adds	r7, #24
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20000208 	.word	0x20000208
 80098b8:	2000020c 	.word	0x2000020c

080098bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80098c2:	f000 f963 	bl	8009b8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80098c6:	4b15      	ldr	r3, [pc, #84]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d120      	bne.n	8009910 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80098ce:	4814      	ldr	r0, [pc, #80]	; (8009920 <prvCheckForValidListAndQueue+0x64>)
 80098d0:	f7fd ff78 	bl	80077c4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80098d4:	4813      	ldr	r0, [pc, #76]	; (8009924 <prvCheckForValidListAndQueue+0x68>)
 80098d6:	f7fd ff75 	bl	80077c4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80098da:	4b13      	ldr	r3, [pc, #76]	; (8009928 <prvCheckForValidListAndQueue+0x6c>)
 80098dc:	4a10      	ldr	r2, [pc, #64]	; (8009920 <prvCheckForValidListAndQueue+0x64>)
 80098de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80098e0:	4b12      	ldr	r3, [pc, #72]	; (800992c <prvCheckForValidListAndQueue+0x70>)
 80098e2:	4a10      	ldr	r2, [pc, #64]	; (8009924 <prvCheckForValidListAndQueue+0x68>)
 80098e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80098e6:	2300      	movs	r3, #0
 80098e8:	9300      	str	r3, [sp, #0]
 80098ea:	4b11      	ldr	r3, [pc, #68]	; (8009930 <prvCheckForValidListAndQueue+0x74>)
 80098ec:	4a11      	ldr	r2, [pc, #68]	; (8009934 <prvCheckForValidListAndQueue+0x78>)
 80098ee:	210c      	movs	r1, #12
 80098f0:	200a      	movs	r0, #10
 80098f2:	f7fe f883 	bl	80079fc <xQueueGenericCreateStatic>
 80098f6:	4602      	mov	r2, r0
 80098f8:	4b08      	ldr	r3, [pc, #32]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 80098fa:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80098fc:	4b07      	ldr	r3, [pc, #28]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009904:	4b05      	ldr	r3, [pc, #20]	; (800991c <prvCheckForValidListAndQueue+0x60>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	490b      	ldr	r1, [pc, #44]	; (8009938 <prvCheckForValidListAndQueue+0x7c>)
 800990a:	4618      	mov	r0, r3
 800990c:	f7fe fd3c 	bl	8008388 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009910:	f000 f96a 	bl	8009be8 <vPortExitCritical>
}
 8009914:	bf00      	nop
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	20000210 	.word	0x20000210
 8009920:	200001e0 	.word	0x200001e0
 8009924:	200001f4 	.word	0x200001f4
 8009928:	20000208 	.word	0x20000208
 800992c:	2000020c 	.word	0x2000020c
 8009930:	20000294 	.word	0x20000294
 8009934:	2000021c 	.word	0x2000021c
 8009938:	0800b43c 	.word	0x0800b43c

0800993c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	3b04      	subs	r3, #4
 800994c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009954:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	3b04      	subs	r3, #4
 800995a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	f023 0201 	bic.w	r2, r3, #1
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3b04      	subs	r3, #4
 800996a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800996c:	4a0c      	ldr	r2, [pc, #48]	; (80099a0 <pxPortInitialiseStack+0x64>)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	3b14      	subs	r3, #20
 8009976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	3b04      	subs	r3, #4
 8009982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f06f 0202 	mvn.w	r2, #2
 800998a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	3b20      	subs	r3, #32
 8009990:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009992:	68fb      	ldr	r3, [r7, #12]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr
 80099a0:	080099a5 	.word	0x080099a5

080099a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80099aa:	2300      	movs	r3, #0
 80099ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80099ae:	4b11      	ldr	r3, [pc, #68]	; (80099f4 <prvTaskExitError+0x50>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d009      	beq.n	80099cc <prvTaskExitError+0x28>
 80099b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099bc:	f383 8811 	msr	BASEPRI, r3
 80099c0:	f3bf 8f6f 	isb	sy
 80099c4:	f3bf 8f4f 	dsb	sy
 80099c8:	60fb      	str	r3, [r7, #12]
 80099ca:	e7fe      	b.n	80099ca <prvTaskExitError+0x26>
 80099cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80099de:	bf00      	nop
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0fc      	beq.n	80099e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	20000028 	.word	0x20000028
	...

08009a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a00:	4b07      	ldr	r3, [pc, #28]	; (8009a20 <pxCurrentTCBConst2>)
 8009a02:	6819      	ldr	r1, [r3, #0]
 8009a04:	6808      	ldr	r0, [r1, #0]
 8009a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a0a:	f380 8809 	msr	PSP, r0
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f04f 0000 	mov.w	r0, #0
 8009a16:	f380 8811 	msr	BASEPRI, r0
 8009a1a:	4770      	bx	lr
 8009a1c:	f3af 8000 	nop.w

08009a20 <pxCurrentTCBConst2>:
 8009a20:	200000b4 	.word	0x200000b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a24:	bf00      	nop
 8009a26:	bf00      	nop

08009a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a28:	4808      	ldr	r0, [pc, #32]	; (8009a4c <prvPortStartFirstTask+0x24>)
 8009a2a:	6800      	ldr	r0, [r0, #0]
 8009a2c:	6800      	ldr	r0, [r0, #0]
 8009a2e:	f380 8808 	msr	MSP, r0
 8009a32:	f04f 0000 	mov.w	r0, #0
 8009a36:	f380 8814 	msr	CONTROL, r0
 8009a3a:	b662      	cpsie	i
 8009a3c:	b661      	cpsie	f
 8009a3e:	f3bf 8f4f 	dsb	sy
 8009a42:	f3bf 8f6f 	isb	sy
 8009a46:	df00      	svc	0
 8009a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009a4a:	bf00      	nop
 8009a4c:	e000ed08 	.word	0xe000ed08

08009a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a56:	4b44      	ldr	r3, [pc, #272]	; (8009b68 <xPortStartScheduler+0x118>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a44      	ldr	r2, [pc, #272]	; (8009b6c <xPortStartScheduler+0x11c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d109      	bne.n	8009a74 <xPortStartScheduler+0x24>
 8009a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	613b      	str	r3, [r7, #16]
 8009a72:	e7fe      	b.n	8009a72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a74:	4b3c      	ldr	r3, [pc, #240]	; (8009b68 <xPortStartScheduler+0x118>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a3d      	ldr	r2, [pc, #244]	; (8009b70 <xPortStartScheduler+0x120>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d109      	bne.n	8009a92 <xPortStartScheduler+0x42>
 8009a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a82:	f383 8811 	msr	BASEPRI, r3
 8009a86:	f3bf 8f6f 	isb	sy
 8009a8a:	f3bf 8f4f 	dsb	sy
 8009a8e:	60fb      	str	r3, [r7, #12]
 8009a90:	e7fe      	b.n	8009a90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a92:	4b38      	ldr	r3, [pc, #224]	; (8009b74 <xPortStartScheduler+0x124>)
 8009a94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	b2db      	uxtb	r3, r3
 8009a9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	22ff      	movs	r2, #255	; 0xff
 8009aa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009aac:	78fb      	ldrb	r3, [r7, #3]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ab4:	b2da      	uxtb	r2, r3
 8009ab6:	4b30      	ldr	r3, [pc, #192]	; (8009b78 <xPortStartScheduler+0x128>)
 8009ab8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009aba:	4b30      	ldr	r3, [pc, #192]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009abc:	2207      	movs	r2, #7
 8009abe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ac0:	e009      	b.n	8009ad6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8009ac2:	4b2e      	ldr	r3, [pc, #184]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3b01      	subs	r3, #1
 8009ac8:	4a2c      	ldr	r2, [pc, #176]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009aca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009acc:	78fb      	ldrb	r3, [r7, #3]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009ad6:	78fb      	ldrb	r3, [r7, #3]
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ade:	2b80      	cmp	r3, #128	; 0x80
 8009ae0:	d0ef      	beq.n	8009ac2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009ae2:	4b26      	ldr	r3, [pc, #152]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f1c3 0307 	rsb	r3, r3, #7
 8009aea:	2b04      	cmp	r3, #4
 8009aec:	d009      	beq.n	8009b02 <xPortStartScheduler+0xb2>
 8009aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af2:	f383 8811 	msr	BASEPRI, r3
 8009af6:	f3bf 8f6f 	isb	sy
 8009afa:	f3bf 8f4f 	dsb	sy
 8009afe:	60bb      	str	r3, [r7, #8]
 8009b00:	e7fe      	b.n	8009b00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b02:	4b1e      	ldr	r3, [pc, #120]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	021b      	lsls	r3, r3, #8
 8009b08:	4a1c      	ldr	r2, [pc, #112]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009b0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b0c:	4b1b      	ldr	r3, [pc, #108]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b14:	4a19      	ldr	r2, [pc, #100]	; (8009b7c <xPortStartScheduler+0x12c>)
 8009b16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b20:	4b17      	ldr	r3, [pc, #92]	; (8009b80 <xPortStartScheduler+0x130>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	4a16      	ldr	r2, [pc, #88]	; (8009b80 <xPortStartScheduler+0x130>)
 8009b26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b2c:	4b14      	ldr	r3, [pc, #80]	; (8009b80 <xPortStartScheduler+0x130>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a13      	ldr	r2, [pc, #76]	; (8009b80 <xPortStartScheduler+0x130>)
 8009b32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b38:	f000 f8d6 	bl	8009ce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b3c:	4b11      	ldr	r3, [pc, #68]	; (8009b84 <xPortStartScheduler+0x134>)
 8009b3e:	2200      	movs	r2, #0
 8009b40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b42:	f000 f8f5 	bl	8009d30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b46:	4b10      	ldr	r3, [pc, #64]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a0f      	ldr	r2, [pc, #60]	; (8009b88 <xPortStartScheduler+0x138>)
 8009b4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b52:	f7ff ff69 	bl	8009a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b56:	f7ff f807 	bl	8008b68 <vTaskSwitchContext>
	prvTaskExitError();
 8009b5a:	f7ff ff23 	bl	80099a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	e000ed00 	.word	0xe000ed00
 8009b6c:	410fc271 	.word	0x410fc271
 8009b70:	410fc270 	.word	0x410fc270
 8009b74:	e000e400 	.word	0xe000e400
 8009b78:	200002dc 	.word	0x200002dc
 8009b7c:	200002e0 	.word	0x200002e0
 8009b80:	e000ed20 	.word	0xe000ed20
 8009b84:	20000028 	.word	0x20000028
 8009b88:	e000ef34 	.word	0xe000ef34

08009b8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b96:	f383 8811 	msr	BASEPRI, r3
 8009b9a:	f3bf 8f6f 	isb	sy
 8009b9e:	f3bf 8f4f 	dsb	sy
 8009ba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009ba4:	4b0e      	ldr	r3, [pc, #56]	; (8009be0 <vPortEnterCritical+0x54>)
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	4a0d      	ldr	r2, [pc, #52]	; (8009be0 <vPortEnterCritical+0x54>)
 8009bac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009bae:	4b0c      	ldr	r3, [pc, #48]	; (8009be0 <vPortEnterCritical+0x54>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	2b01      	cmp	r3, #1
 8009bb4:	d10e      	bne.n	8009bd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <vPortEnterCritical+0x58>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	b2db      	uxtb	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d009      	beq.n	8009bd4 <vPortEnterCritical+0x48>
 8009bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	603b      	str	r3, [r7, #0]
 8009bd2:	e7fe      	b.n	8009bd2 <vPortEnterCritical+0x46>
	}
}
 8009bd4:	bf00      	nop
 8009bd6:	370c      	adds	r7, #12
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bde:	4770      	bx	lr
 8009be0:	20000028 	.word	0x20000028
 8009be4:	e000ed04 	.word	0xe000ed04

08009be8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009be8:	b480      	push	{r7}
 8009bea:	b083      	sub	sp, #12
 8009bec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009bee:	4b11      	ldr	r3, [pc, #68]	; (8009c34 <vPortExitCritical+0x4c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d109      	bne.n	8009c0a <vPortExitCritical+0x22>
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	f383 8811 	msr	BASEPRI, r3
 8009bfe:	f3bf 8f6f 	isb	sy
 8009c02:	f3bf 8f4f 	dsb	sy
 8009c06:	607b      	str	r3, [r7, #4]
 8009c08:	e7fe      	b.n	8009c08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8009c0a:	4b0a      	ldr	r3, [pc, #40]	; (8009c34 <vPortExitCritical+0x4c>)
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	4a08      	ldr	r2, [pc, #32]	; (8009c34 <vPortExitCritical+0x4c>)
 8009c12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c14:	4b07      	ldr	r3, [pc, #28]	; (8009c34 <vPortExitCritical+0x4c>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d104      	bne.n	8009c26 <vPortExitCritical+0x3e>
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c26:	bf00      	nop
 8009c28:	370c      	adds	r7, #12
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr
 8009c32:	bf00      	nop
 8009c34:	20000028 	.word	0x20000028
	...

08009c40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c40:	f3ef 8009 	mrs	r0, PSP
 8009c44:	f3bf 8f6f 	isb	sy
 8009c48:	4b15      	ldr	r3, [pc, #84]	; (8009ca0 <pxCurrentTCBConst>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	f01e 0f10 	tst.w	lr, #16
 8009c50:	bf08      	it	eq
 8009c52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5a:	6010      	str	r0, [r2, #0]
 8009c5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009c64:	f380 8811 	msr	BASEPRI, r0
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
 8009c70:	f7fe ff7a 	bl	8008b68 <vTaskSwitchContext>
 8009c74:	f04f 0000 	mov.w	r0, #0
 8009c78:	f380 8811 	msr	BASEPRI, r0
 8009c7c:	bc09      	pop	{r0, r3}
 8009c7e:	6819      	ldr	r1, [r3, #0]
 8009c80:	6808      	ldr	r0, [r1, #0]
 8009c82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c86:	f01e 0f10 	tst.w	lr, #16
 8009c8a:	bf08      	it	eq
 8009c8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c90:	f380 8809 	msr	PSP, r0
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	4770      	bx	lr
 8009c9a:	bf00      	nop
 8009c9c:	f3af 8000 	nop.w

08009ca0 <pxCurrentTCBConst>:
 8009ca0:	200000b4 	.word	0x200000b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ca4:	bf00      	nop
 8009ca6:	bf00      	nop

08009ca8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b082      	sub	sp, #8
 8009cac:	af00      	add	r7, sp, #0
	__asm volatile
 8009cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cb2:	f383 8811 	msr	BASEPRI, r3
 8009cb6:	f3bf 8f6f 	isb	sy
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009cc0:	f7fe fe96 	bl	80089f0 <xTaskIncrementTick>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009cca:	4b06      	ldr	r3, [pc, #24]	; (8009ce4 <xPortSysTickHandler+0x3c>)
 8009ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cd0:	601a      	str	r2, [r3, #0]
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	e000ed04 	.word	0xe000ed04

08009ce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009ce8:	b480      	push	{r7}
 8009cea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <vPortSetupTimerInterrupt+0x34>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cf2:	4b0b      	ldr	r3, [pc, #44]	; (8009d20 <vPortSetupTimerInterrupt+0x38>)
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009cf8:	4b0a      	ldr	r3, [pc, #40]	; (8009d24 <vPortSetupTimerInterrupt+0x3c>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a0a      	ldr	r2, [pc, #40]	; (8009d28 <vPortSetupTimerInterrupt+0x40>)
 8009cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8009d02:	099b      	lsrs	r3, r3, #6
 8009d04:	4a09      	ldr	r2, [pc, #36]	; (8009d2c <vPortSetupTimerInterrupt+0x44>)
 8009d06:	3b01      	subs	r3, #1
 8009d08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d0a:	4b04      	ldr	r3, [pc, #16]	; (8009d1c <vPortSetupTimerInterrupt+0x34>)
 8009d0c:	2207      	movs	r2, #7
 8009d0e:	601a      	str	r2, [r3, #0]
}
 8009d10:	bf00      	nop
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	e000e010 	.word	0xe000e010
 8009d20:	e000e018 	.word	0xe000e018
 8009d24:	2000002c 	.word	0x2000002c
 8009d28:	10624dd3 	.word	0x10624dd3
 8009d2c:	e000e014 	.word	0xe000e014

08009d30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d40 <vPortEnableVFP+0x10>
 8009d34:	6801      	ldr	r1, [r0, #0]
 8009d36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d3a:	6001      	str	r1, [r0, #0]
 8009d3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d3e:	bf00      	nop
 8009d40:	e000ed88 	.word	0xe000ed88

08009d44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d44:	b480      	push	{r7}
 8009d46:	b085      	sub	sp, #20
 8009d48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d4a:	f3ef 8305 	mrs	r3, IPSR
 8009d4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b0f      	cmp	r3, #15
 8009d54:	d913      	bls.n	8009d7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d56:	4a16      	ldr	r2, [pc, #88]	; (8009db0 <vPortValidateInterruptPriority+0x6c>)
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d60:	4b14      	ldr	r3, [pc, #80]	; (8009db4 <vPortValidateInterruptPriority+0x70>)
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	7afa      	ldrb	r2, [r7, #11]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d209      	bcs.n	8009d7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	607b      	str	r3, [r7, #4]
 8009d7c:	e7fe      	b.n	8009d7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d7e:	4b0e      	ldr	r3, [pc, #56]	; (8009db8 <vPortValidateInterruptPriority+0x74>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009d86:	4b0d      	ldr	r3, [pc, #52]	; (8009dbc <vPortValidateInterruptPriority+0x78>)
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	429a      	cmp	r2, r3
 8009d8c:	d909      	bls.n	8009da2 <vPortValidateInterruptPriority+0x5e>
 8009d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d92:	f383 8811 	msr	BASEPRI, r3
 8009d96:	f3bf 8f6f 	isb	sy
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	603b      	str	r3, [r7, #0]
 8009da0:	e7fe      	b.n	8009da0 <vPortValidateInterruptPriority+0x5c>
	}
 8009da2:	bf00      	nop
 8009da4:	3714      	adds	r7, #20
 8009da6:	46bd      	mov	sp, r7
 8009da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	e000e3f0 	.word	0xe000e3f0
 8009db4:	200002dc 	.word	0x200002dc
 8009db8:	e000ed0c 	.word	0xe000ed0c
 8009dbc:	200002e0 	.word	0x200002e0

08009dc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08a      	sub	sp, #40	; 0x28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009dcc:	f7fe fd56 	bl	800887c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009dd0:	4b57      	ldr	r3, [pc, #348]	; (8009f30 <pvPortMalloc+0x170>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d101      	bne.n	8009ddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009dd8:	f000 f90c 	bl	8009ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ddc:	4b55      	ldr	r3, [pc, #340]	; (8009f34 <pvPortMalloc+0x174>)
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4013      	ands	r3, r2
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	f040 808c 	bne.w	8009f02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d01c      	beq.n	8009e2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8009df0:	2208      	movs	r2, #8
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4413      	add	r3, r2
 8009df6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f003 0307 	and.w	r3, r3, #7
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d013      	beq.n	8009e2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f023 0307 	bic.w	r3, r3, #7
 8009e08:	3308      	adds	r3, #8
 8009e0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	f003 0307 	and.w	r3, r3, #7
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d009      	beq.n	8009e2a <pvPortMalloc+0x6a>
 8009e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1a:	f383 8811 	msr	BASEPRI, r3
 8009e1e:	f3bf 8f6f 	isb	sy
 8009e22:	f3bf 8f4f 	dsb	sy
 8009e26:	617b      	str	r3, [r7, #20]
 8009e28:	e7fe      	b.n	8009e28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d068      	beq.n	8009f02 <pvPortMalloc+0x142>
 8009e30:	4b41      	ldr	r3, [pc, #260]	; (8009f38 <pvPortMalloc+0x178>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d863      	bhi.n	8009f02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e3a:	4b40      	ldr	r3, [pc, #256]	; (8009f3c <pvPortMalloc+0x17c>)
 8009e3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e3e:	4b3f      	ldr	r3, [pc, #252]	; (8009f3c <pvPortMalloc+0x17c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e44:	e004      	b.n	8009e50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8009e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	429a      	cmp	r2, r3
 8009e58:	d903      	bls.n	8009e62 <pvPortMalloc+0xa2>
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1f1      	bne.n	8009e46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009e62:	4b33      	ldr	r3, [pc, #204]	; (8009f30 <pvPortMalloc+0x170>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d04a      	beq.n	8009f02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e6c:	6a3b      	ldr	r3, [r7, #32]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2208      	movs	r2, #8
 8009e72:	4413      	add	r3, r2
 8009e74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	681a      	ldr	r2, [r3, #0]
 8009e7a:	6a3b      	ldr	r3, [r7, #32]
 8009e7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e80:	685a      	ldr	r2, [r3, #4]
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	1ad2      	subs	r2, r2, r3
 8009e86:	2308      	movs	r3, #8
 8009e88:	005b      	lsls	r3, r3, #1
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d91e      	bls.n	8009ecc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	4413      	add	r3, r2
 8009e94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	f003 0307 	and.w	r3, r3, #7
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d009      	beq.n	8009eb4 <pvPortMalloc+0xf4>
 8009ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea4:	f383 8811 	msr	BASEPRI, r3
 8009ea8:	f3bf 8f6f 	isb	sy
 8009eac:	f3bf 8f4f 	dsb	sy
 8009eb0:	613b      	str	r3, [r7, #16]
 8009eb2:	e7fe      	b.n	8009eb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	1ad2      	subs	r2, r2, r3
 8009ebc:	69bb      	ldr	r3, [r7, #24]
 8009ebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009ec6:	69b8      	ldr	r0, [r7, #24]
 8009ec8:	f000 f8f6 	bl	800a0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ecc:	4b1a      	ldr	r3, [pc, #104]	; (8009f38 <pvPortMalloc+0x178>)
 8009ece:	681a      	ldr	r2, [r3, #0]
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	1ad3      	subs	r3, r2, r3
 8009ed6:	4a18      	ldr	r2, [pc, #96]	; (8009f38 <pvPortMalloc+0x178>)
 8009ed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009eda:	4b17      	ldr	r3, [pc, #92]	; (8009f38 <pvPortMalloc+0x178>)
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	4b18      	ldr	r3, [pc, #96]	; (8009f40 <pvPortMalloc+0x180>)
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	429a      	cmp	r2, r3
 8009ee4:	d203      	bcs.n	8009eee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <pvPortMalloc+0x178>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4a15      	ldr	r2, [pc, #84]	; (8009f40 <pvPortMalloc+0x180>)
 8009eec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	685a      	ldr	r2, [r3, #4]
 8009ef2:	4b10      	ldr	r3, [pc, #64]	; (8009f34 <pvPortMalloc+0x174>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	431a      	orrs	r2, r3
 8009ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009efe:	2200      	movs	r2, #0
 8009f00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f02:	f7fe fcc9 	bl	8008898 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f06:	69fb      	ldr	r3, [r7, #28]
 8009f08:	f003 0307 	and.w	r3, r3, #7
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d009      	beq.n	8009f24 <pvPortMalloc+0x164>
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
 8009f22:	e7fe      	b.n	8009f22 <pvPortMalloc+0x162>
	return pvReturn;
 8009f24:	69fb      	ldr	r3, [r7, #28]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3728      	adds	r7, #40	; 0x28
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20003eec 	.word	0x20003eec
 8009f34:	20003ef8 	.word	0x20003ef8
 8009f38:	20003ef0 	.word	0x20003ef0
 8009f3c:	20003ee4 	.word	0x20003ee4
 8009f40:	20003ef4 	.word	0x20003ef4

08009f44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b086      	sub	sp, #24
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d046      	beq.n	8009fe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009f56:	2308      	movs	r3, #8
 8009f58:	425b      	negs	r3, r3
 8009f5a:	697a      	ldr	r2, [r7, #20]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009f60:	697b      	ldr	r3, [r7, #20]
 8009f62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	685a      	ldr	r2, [r3, #4]
 8009f68:	4b20      	ldr	r3, [pc, #128]	; (8009fec <vPortFree+0xa8>)
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4013      	ands	r3, r2
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d109      	bne.n	8009f86 <vPortFree+0x42>
 8009f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e7fe      	b.n	8009f84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <vPortFree+0x5e>
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	60bb      	str	r3, [r7, #8]
 8009fa0:	e7fe      	b.n	8009fa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009fa2:	693b      	ldr	r3, [r7, #16]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	4b11      	ldr	r3, [pc, #68]	; (8009fec <vPortFree+0xa8>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	4013      	ands	r3, r2
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d019      	beq.n	8009fe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d115      	bne.n	8009fe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	4b0b      	ldr	r3, [pc, #44]	; (8009fec <vPortFree+0xa8>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	43db      	mvns	r3, r3
 8009fc2:	401a      	ands	r2, r3
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009fc8:	f7fe fc58 	bl	800887c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	4b07      	ldr	r3, [pc, #28]	; (8009ff0 <vPortFree+0xac>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	4a06      	ldr	r2, [pc, #24]	; (8009ff0 <vPortFree+0xac>)
 8009fd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fda:	6938      	ldr	r0, [r7, #16]
 8009fdc:	f000 f86c 	bl	800a0b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009fe0:	f7fe fc5a 	bl	8008898 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009fe4:	bf00      	nop
 8009fe6:	3718      	adds	r7, #24
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	bd80      	pop	{r7, pc}
 8009fec:	20003ef8 	.word	0x20003ef8
 8009ff0:	20003ef0 	.word	0x20003ef0

08009ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a000:	4b27      	ldr	r3, [pc, #156]	; (800a0a0 <prvHeapInit+0xac>)
 800a002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 0307 	and.w	r3, r3, #7
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d00c      	beq.n	800a028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	3307      	adds	r3, #7
 800a012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a01c:	68ba      	ldr	r2, [r7, #8]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	4a1f      	ldr	r2, [pc, #124]	; (800a0a0 <prvHeapInit+0xac>)
 800a024:	4413      	add	r3, r2
 800a026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a02c:	4a1d      	ldr	r2, [pc, #116]	; (800a0a4 <prvHeapInit+0xb0>)
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a032:	4b1c      	ldr	r3, [pc, #112]	; (800a0a4 <prvHeapInit+0xb0>)
 800a034:	2200      	movs	r2, #0
 800a036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	68ba      	ldr	r2, [r7, #8]
 800a03c:	4413      	add	r3, r2
 800a03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a040:	2208      	movs	r2, #8
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	1a9b      	subs	r3, r3, r2
 800a046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f023 0307 	bic.w	r3, r3, #7
 800a04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4a15      	ldr	r2, [pc, #84]	; (800a0a8 <prvHeapInit+0xb4>)
 800a054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a056:	4b14      	ldr	r3, [pc, #80]	; (800a0a8 <prvHeapInit+0xb4>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2200      	movs	r2, #0
 800a05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a05e:	4b12      	ldr	r3, [pc, #72]	; (800a0a8 <prvHeapInit+0xb4>)
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	2200      	movs	r2, #0
 800a064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	68fa      	ldr	r2, [r7, #12]
 800a06e:	1ad2      	subs	r2, r2, r3
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a074:	4b0c      	ldr	r3, [pc, #48]	; (800a0a8 <prvHeapInit+0xb4>)
 800a076:	681a      	ldr	r2, [r3, #0]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <prvHeapInit+0xb8>)
 800a082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	4a09      	ldr	r2, [pc, #36]	; (800a0b0 <prvHeapInit+0xbc>)
 800a08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <prvHeapInit+0xc0>)
 800a08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a092:	601a      	str	r2, [r3, #0]
}
 800a094:	bf00      	nop
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	200002e4 	.word	0x200002e4
 800a0a4:	20003ee4 	.word	0x20003ee4
 800a0a8:	20003eec 	.word	0x20003eec
 800a0ac:	20003ef4 	.word	0x20003ef4
 800a0b0:	20003ef0 	.word	0x20003ef0
 800a0b4:	20003ef8 	.word	0x20003ef8

0800a0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a0c0:	4b28      	ldr	r3, [pc, #160]	; (800a164 <prvInsertBlockIntoFreeList+0xac>)
 800a0c2:	60fb      	str	r3, [r7, #12]
 800a0c4:	e002      	b.n	800a0cc <prvInsertBlockIntoFreeList+0x14>
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	60fb      	str	r3, [r7, #12]
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	687a      	ldr	r2, [r7, #4]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d8f7      	bhi.n	800a0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	685b      	ldr	r3, [r3, #4]
 800a0de:	68ba      	ldr	r2, [r7, #8]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	429a      	cmp	r2, r3
 800a0e6:	d108      	bne.n	800a0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	685a      	ldr	r2, [r3, #4]
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	441a      	add	r2, r3
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	68ba      	ldr	r2, [r7, #8]
 800a104:	441a      	add	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d118      	bne.n	800a140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	4b15      	ldr	r3, [pc, #84]	; (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	429a      	cmp	r2, r3
 800a118:	d00d      	beq.n	800a136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	441a      	add	r2, r3
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a12a:	68fb      	ldr	r3, [r7, #12]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	681a      	ldr	r2, [r3, #0]
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	601a      	str	r2, [r3, #0]
 800a134:	e008      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a136:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <prvInsertBlockIntoFreeList+0xb0>)
 800a138:	681a      	ldr	r2, [r3, #0]
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	601a      	str	r2, [r3, #0]
 800a13e:	e003      	b.n	800a148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d002      	beq.n	800a156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a156:	bf00      	nop
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr
 800a162:	bf00      	nop
 800a164:	20003ee4 	.word	0x20003ee4
 800a168:	20003eec 	.word	0x20003eec

0800a16c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a16c:	b480      	push	{r7}
 800a16e:	b085      	sub	sp, #20
 800a170:	af00      	add	r7, sp, #0
 800a172:	60f8      	str	r0, [r7, #12]
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	4a07      	ldr	r2, [pc, #28]	; (800a198 <vApplicationGetIdleTaskMemory+0x2c>)
 800a17c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	4a06      	ldr	r2, [pc, #24]	; (800a19c <vApplicationGetIdleTaskMemory+0x30>)
 800a182:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	2280      	movs	r2, #128	; 0x80
 800a188:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800a18a:	bf00      	nop
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	20003efc 	.word	0x20003efc
 800a19c:	20003f50 	.word	0x20003f50

0800a1a0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	4a07      	ldr	r2, [pc, #28]	; (800a1cc <vApplicationGetTimerTaskMemory+0x2c>)
 800a1b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	4a06      	ldr	r2, [pc, #24]	; (800a1d0 <vApplicationGetTimerTaskMemory+0x30>)
 800a1b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1be:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800a1c0:	bf00      	nop
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	20004150 	.word	0x20004150
 800a1d0:	200041a4 	.word	0x200041a4

0800a1d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a1d4:	b5b0      	push	{r4, r5, r7, lr}
 800a1d6:	b08a      	sub	sp, #40	; 0x28
 800a1d8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a1da:	f7f6 f981 	bl	80004e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a1de:	f000 f835 	bl	800a24c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800a1e2:	f000 f973 	bl	800a4cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800a1e6:	f000 f8b3 	bl	800a350 <MX_I2C1_Init>
  MX_I2S3_Init();
 800a1ea:	f000 f8df 	bl	800a3ac <MX_I2S3_Init>
  MX_SPI1_Init();
 800a1ee:	f000 f90d 	bl	800a40c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800a1f2:	f000 f941 	bl	800a478 <MX_USART2_UART_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of myTimer01 */
  osTimerDef(myTimer01, Callback01);
 800a1f6:	4b11      	ldr	r3, [pc, #68]	; (800a23c <main+0x68>)
 800a1f8:	623b      	str	r3, [r7, #32]
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	627b      	str	r3, [r7, #36]	; 0x24
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800a1fe:	f107 0320 	add.w	r3, r7, #32
 800a202:	2200      	movs	r2, #0
 800a204:	2101      	movs	r1, #1
 800a206:	4618      	mov	r0, r3
 800a208:	f7fd f984 	bl	8007514 <osTimerCreate>
 800a20c:	4602      	mov	r2, r0
 800a20e:	4b0c      	ldr	r3, [pc, #48]	; (800a240 <main+0x6c>)
 800a210:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800a212:	4b0c      	ldr	r3, [pc, #48]	; (800a244 <main+0x70>)
 800a214:	1d3c      	adds	r4, r7, #4
 800a216:	461d      	mov	r5, r3
 800a218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a21a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a21c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800a224:	1d3b      	adds	r3, r7, #4
 800a226:	2100      	movs	r1, #0
 800a228:	4618      	mov	r0, r3
 800a22a:	f7fd f912 	bl	8007452 <osThreadCreate>
 800a22e:	4602      	mov	r2, r0
 800a230:	4b05      	ldr	r3, [pc, #20]	; (800a248 <main+0x74>)
 800a232:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a234:	f7fd f906 	bl	8007444 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a238:	e7fe      	b.n	800a238 <main+0x64>
 800a23a:	bf00      	nop
 800a23c:	0800a789 	.word	0x0800a789
 800a240:	20004650 	.word	0x20004650
 800a244:	0800b450 	.word	0x0800b450
 800a248:	200045f8 	.word	0x200045f8

0800a24c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b098      	sub	sp, #96	; 0x60
 800a250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a252:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a256:	2230      	movs	r2, #48	; 0x30
 800a258:	2100      	movs	r1, #0
 800a25a:	4618      	mov	r0, r3
 800a25c:	f000 fff7 	bl	800b24e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a260:	f107 031c 	add.w	r3, r7, #28
 800a264:	2200      	movs	r2, #0
 800a266:	601a      	str	r2, [r3, #0]
 800a268:	605a      	str	r2, [r3, #4]
 800a26a:	609a      	str	r2, [r3, #8]
 800a26c:	60da      	str	r2, [r3, #12]
 800a26e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a270:	f107 030c 	add.w	r3, r7, #12
 800a274:	2200      	movs	r2, #0
 800a276:	601a      	str	r2, [r3, #0]
 800a278:	605a      	str	r2, [r3, #4]
 800a27a:	609a      	str	r2, [r3, #8]
 800a27c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a27e:	2300      	movs	r3, #0
 800a280:	60bb      	str	r3, [r7, #8]
 800a282:	4b31      	ldr	r3, [pc, #196]	; (800a348 <SystemClock_Config+0xfc>)
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	4a30      	ldr	r2, [pc, #192]	; (800a348 <SystemClock_Config+0xfc>)
 800a288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a28c:	6413      	str	r3, [r2, #64]	; 0x40
 800a28e:	4b2e      	ldr	r3, [pc, #184]	; (800a348 <SystemClock_Config+0xfc>)
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a296:	60bb      	str	r3, [r7, #8]
 800a298:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a29a:	2300      	movs	r3, #0
 800a29c:	607b      	str	r3, [r7, #4]
 800a29e:	4b2b      	ldr	r3, [pc, #172]	; (800a34c <SystemClock_Config+0x100>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4a2a      	ldr	r2, [pc, #168]	; (800a34c <SystemClock_Config+0x100>)
 800a2a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2a8:	6013      	str	r3, [r2, #0]
 800a2aa:	4b28      	ldr	r3, [pc, #160]	; (800a34c <SystemClock_Config+0x100>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2b2:	607b      	str	r3, [r7, #4]
 800a2b4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a2ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a2be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a2c0:	2302      	movs	r3, #2
 800a2c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a2c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a2c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800a2ca:	2308      	movs	r3, #8
 800a2cc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800a2ce:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800a2d2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a2d4:	2302      	movs	r3, #2
 800a2d6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a2d8:	2307      	movs	r3, #7
 800a2da:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a2dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7f8 feb1 	bl	8003048 <HAL_RCC_OscConfig>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d001      	beq.n	800a2f0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 800a2ec:	f000 fa56 	bl	800a79c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a2f0:	230f      	movs	r3, #15
 800a2f2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a2fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a300:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a302:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a306:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a308:	f107 031c 	add.w	r3, r7, #28
 800a30c:	2105      	movs	r1, #5
 800a30e:	4618      	mov	r0, r3
 800a310:	f7f9 f90a 	bl	8003528 <HAL_RCC_ClockConfig>
 800a314:	4603      	mov	r3, r0
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800a31a:	f000 fa3f 	bl	800a79c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800a31e:	2301      	movs	r3, #1
 800a320:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800a322:	23c0      	movs	r3, #192	; 0xc0
 800a324:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800a326:	2302      	movs	r3, #2
 800a328:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a32a:	f107 030c 	add.w	r3, r7, #12
 800a32e:	4618      	mov	r0, r3
 800a330:	f7f9 faec 	bl	800390c <HAL_RCCEx_PeriphCLKConfig>
 800a334:	4603      	mov	r3, r0
 800a336:	2b00      	cmp	r3, #0
 800a338:	d001      	beq.n	800a33e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a33a:	f000 fa2f 	bl	800a79c <Error_Handler>
  }
}
 800a33e:	bf00      	nop
 800a340:	3760      	adds	r7, #96	; 0x60
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	40023800 	.word	0x40023800
 800a34c:	40007000 	.word	0x40007000

0800a350 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a354:	4b12      	ldr	r3, [pc, #72]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a356:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <MX_I2C1_Init+0x54>)
 800a358:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a35a:	4b11      	ldr	r3, [pc, #68]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a35c:	4a12      	ldr	r2, [pc, #72]	; (800a3a8 <MX_I2C1_Init+0x58>)
 800a35e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a360:	4b0f      	ldr	r3, [pc, #60]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a362:	2200      	movs	r2, #0
 800a364:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a366:	4b0e      	ldr	r3, [pc, #56]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a368:	2200      	movs	r2, #0
 800a36a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a36c:	4b0c      	ldr	r3, [pc, #48]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a36e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a372:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a374:	4b0a      	ldr	r3, [pc, #40]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a376:	2200      	movs	r2, #0
 800a378:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a37c:	2200      	movs	r2, #0
 800a37e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a380:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a382:	2200      	movs	r2, #0
 800a384:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a386:	4b06      	ldr	r3, [pc, #24]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a388:	2200      	movs	r2, #0
 800a38a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a38c:	4804      	ldr	r0, [pc, #16]	; (800a3a0 <MX_I2C1_Init+0x50>)
 800a38e:	f7f8 f883 	bl	8002498 <HAL_I2C_Init>
 800a392:	4603      	mov	r3, r0
 800a394:	2b00      	cmp	r3, #0
 800a396:	d001      	beq.n	800a39c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a398:	f000 fa00 	bl	800a79c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a39c:	bf00      	nop
 800a39e:	bd80      	pop	{r7, pc}
 800a3a0:	200045fc 	.word	0x200045fc
 800a3a4:	40005400 	.word	0x40005400
 800a3a8:	000186a0 	.word	0x000186a0

0800a3ac <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800a3b0:	4b13      	ldr	r3, [pc, #76]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3b2:	4a14      	ldr	r2, [pc, #80]	; (800a404 <MX_I2S3_Init+0x58>)
 800a3b4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800a3b6:	4b12      	ldr	r3, [pc, #72]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3bc:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800a3be:	4b10      	ldr	r3, [pc, #64]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800a3c4:	4b0e      	ldr	r3, [pc, #56]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800a3ca:	4b0d      	ldr	r3, [pc, #52]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3d0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800a3d2:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3d4:	4a0c      	ldr	r2, [pc, #48]	; (800a408 <MX_I2S3_Init+0x5c>)
 800a3d6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800a3d8:	4b09      	ldr	r3, [pc, #36]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800a3de:	4b08      	ldr	r3, [pc, #32]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800a3ea:	4805      	ldr	r0, [pc, #20]	; (800a400 <MX_I2S3_Init+0x54>)
 800a3ec:	f7f8 f98c 	bl	8002708 <HAL_I2S_Init>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d001      	beq.n	800a3fa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800a3f6:	f000 f9d1 	bl	800a79c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800a3fa:	bf00      	nop
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	200046ec 	.word	0x200046ec
 800a404:	40003c00 	.word	0x40003c00
 800a408:	00017700 	.word	0x00017700

0800a40c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800a410:	4b17      	ldr	r3, [pc, #92]	; (800a470 <MX_SPI1_Init+0x64>)
 800a412:	4a18      	ldr	r2, [pc, #96]	; (800a474 <MX_SPI1_Init+0x68>)
 800a414:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800a416:	4b16      	ldr	r3, [pc, #88]	; (800a470 <MX_SPI1_Init+0x64>)
 800a418:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a41c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a41e:	4b14      	ldr	r3, [pc, #80]	; (800a470 <MX_SPI1_Init+0x64>)
 800a420:	2200      	movs	r2, #0
 800a422:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a424:	4b12      	ldr	r3, [pc, #72]	; (800a470 <MX_SPI1_Init+0x64>)
 800a426:	2200      	movs	r2, #0
 800a428:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a42a:	4b11      	ldr	r3, [pc, #68]	; (800a470 <MX_SPI1_Init+0x64>)
 800a42c:	2200      	movs	r2, #0
 800a42e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a430:	4b0f      	ldr	r3, [pc, #60]	; (800a470 <MX_SPI1_Init+0x64>)
 800a432:	2200      	movs	r2, #0
 800a434:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800a436:	4b0e      	ldr	r3, [pc, #56]	; (800a470 <MX_SPI1_Init+0x64>)
 800a438:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a43c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a43e:	4b0c      	ldr	r3, [pc, #48]	; (800a470 <MX_SPI1_Init+0x64>)
 800a440:	2200      	movs	r2, #0
 800a442:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a444:	4b0a      	ldr	r3, [pc, #40]	; (800a470 <MX_SPI1_Init+0x64>)
 800a446:	2200      	movs	r2, #0
 800a448:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800a44a:	4b09      	ldr	r3, [pc, #36]	; (800a470 <MX_SPI1_Init+0x64>)
 800a44c:	2200      	movs	r2, #0
 800a44e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a450:	4b07      	ldr	r3, [pc, #28]	; (800a470 <MX_SPI1_Init+0x64>)
 800a452:	2200      	movs	r2, #0
 800a454:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800a456:	4b06      	ldr	r3, [pc, #24]	; (800a470 <MX_SPI1_Init+0x64>)
 800a458:	220a      	movs	r2, #10
 800a45a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a45c:	4804      	ldr	r0, [pc, #16]	; (800a470 <MX_SPI1_Init+0x64>)
 800a45e:	f7f9 fb93 	bl	8003b88 <HAL_SPI_Init>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800a468:	f000 f998 	bl	800a79c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a46c:	bf00      	nop
 800a46e:	bd80      	pop	{r7, pc}
 800a470:	20004654 	.word	0x20004654
 800a474:	40013000 	.word	0x40013000

0800a478 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a47c:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a47e:	4a12      	ldr	r2, [pc, #72]	; (800a4c8 <MX_USART2_UART_Init+0x50>)
 800a480:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800a482:	4b10      	ldr	r3, [pc, #64]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a488:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a48a:	4b0e      	ldr	r3, [pc, #56]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a490:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a492:	2200      	movs	r2, #0
 800a494:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a496:	4b0b      	ldr	r3, [pc, #44]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a498:	2200      	movs	r2, #0
 800a49a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a49c:	4b09      	ldr	r3, [pc, #36]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a49e:	220c      	movs	r2, #12
 800a4a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4a2:	4b08      	ldr	r3, [pc, #32]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4a8:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a4ae:	4805      	ldr	r0, [pc, #20]	; (800a4c4 <MX_USART2_UART_Init+0x4c>)
 800a4b0:	f7f9 fbce 	bl	8003c50 <HAL_UART_Init>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d001      	beq.n	800a4be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800a4ba:	f000 f96f 	bl	800a79c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a4be:	bf00      	nop
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	200046ac 	.word	0x200046ac
 800a4c8:	40004400 	.word	0x40004400

0800a4cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b08c      	sub	sp, #48	; 0x30
 800a4d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4d2:	f107 031c 	add.w	r3, r7, #28
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	605a      	str	r2, [r3, #4]
 800a4dc:	609a      	str	r2, [r3, #8]
 800a4de:	60da      	str	r2, [r3, #12]
 800a4e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	61bb      	str	r3, [r7, #24]
 800a4e6:	4b71      	ldr	r3, [pc, #452]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ea:	4a70      	ldr	r2, [pc, #448]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a4ec:	f043 0310 	orr.w	r3, r3, #16
 800a4f0:	6313      	str	r3, [r2, #48]	; 0x30
 800a4f2:	4b6e      	ldr	r3, [pc, #440]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f6:	f003 0310 	and.w	r3, r3, #16
 800a4fa:	61bb      	str	r3, [r7, #24]
 800a4fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a4fe:	2300      	movs	r3, #0
 800a500:	617b      	str	r3, [r7, #20]
 800a502:	4b6a      	ldr	r3, [pc, #424]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a506:	4a69      	ldr	r2, [pc, #420]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a508:	f043 0304 	orr.w	r3, r3, #4
 800a50c:	6313      	str	r3, [r2, #48]	; 0x30
 800a50e:	4b67      	ldr	r3, [pc, #412]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	617b      	str	r3, [r7, #20]
 800a518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a51a:	2300      	movs	r3, #0
 800a51c:	613b      	str	r3, [r7, #16]
 800a51e:	4b63      	ldr	r3, [pc, #396]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a522:	4a62      	ldr	r2, [pc, #392]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a528:	6313      	str	r3, [r2, #48]	; 0x30
 800a52a:	4b60      	ldr	r3, [pc, #384]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a532:	613b      	str	r3, [r7, #16]
 800a534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a536:	2300      	movs	r3, #0
 800a538:	60fb      	str	r3, [r7, #12]
 800a53a:	4b5c      	ldr	r3, [pc, #368]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a53e:	4a5b      	ldr	r2, [pc, #364]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a540:	f043 0301 	orr.w	r3, r3, #1
 800a544:	6313      	str	r3, [r2, #48]	; 0x30
 800a546:	4b59      	ldr	r3, [pc, #356]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a54a:	f003 0301 	and.w	r3, r3, #1
 800a54e:	60fb      	str	r3, [r7, #12]
 800a550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a552:	2300      	movs	r3, #0
 800a554:	60bb      	str	r3, [r7, #8]
 800a556:	4b55      	ldr	r3, [pc, #340]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a55a:	4a54      	ldr	r2, [pc, #336]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a55c:	f043 0302 	orr.w	r3, r3, #2
 800a560:	6313      	str	r3, [r2, #48]	; 0x30
 800a562:	4b52      	ldr	r3, [pc, #328]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a566:	f003 0302 	and.w	r3, r3, #2
 800a56a:	60bb      	str	r3, [r7, #8]
 800a56c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a56e:	2300      	movs	r3, #0
 800a570:	607b      	str	r3, [r7, #4]
 800a572:	4b4e      	ldr	r3, [pc, #312]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a576:	4a4d      	ldr	r2, [pc, #308]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a578:	f043 0308 	orr.w	r3, r3, #8
 800a57c:	6313      	str	r3, [r2, #48]	; 0x30
 800a57e:	4b4b      	ldr	r3, [pc, #300]	; (800a6ac <MX_GPIO_Init+0x1e0>)
 800a580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a582:	f003 0308 	and.w	r3, r3, #8
 800a586:	607b      	str	r3, [r7, #4]
 800a588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800a58a:	2200      	movs	r2, #0
 800a58c:	2108      	movs	r1, #8
 800a58e:	4848      	ldr	r0, [pc, #288]	; (800a6b0 <MX_GPIO_Init+0x1e4>)
 800a590:	f7f6 fae6 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800a594:	2201      	movs	r2, #1
 800a596:	2101      	movs	r1, #1
 800a598:	4846      	ldr	r0, [pc, #280]	; (800a6b4 <MX_GPIO_Init+0x1e8>)
 800a59a:	f7f6 fae1 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a59e:	2200      	movs	r2, #0
 800a5a0:	f24f 0110 	movw	r1, #61456	; 0xf010
 800a5a4:	4844      	ldr	r0, [pc, #272]	; (800a6b8 <MX_GPIO_Init+0x1ec>)
 800a5a6:	f7f6 fadb 	bl	8000b60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800a5aa:	2308      	movs	r3, #8
 800a5ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800a5ba:	f107 031c 	add.w	r3, r7, #28
 800a5be:	4619      	mov	r1, r3
 800a5c0:	483b      	ldr	r0, [pc, #236]	; (800a6b0 <MX_GPIO_Init+0x1e4>)
 800a5c2:	f7f6 f933 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800a5d6:	f107 031c 	add.w	r3, r7, #28
 800a5da:	4619      	mov	r1, r3
 800a5dc:	4835      	ldr	r0, [pc, #212]	; (800a6b4 <MX_GPIO_Init+0x1e8>)
 800a5de:	f7f6 f925 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800a5e2:	2308      	movs	r3, #8
 800a5e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a5f2:	2305      	movs	r3, #5
 800a5f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800a5f6:	f107 031c 	add.w	r3, r7, #28
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	482d      	ldr	r0, [pc, #180]	; (800a6b4 <MX_GPIO_Init+0x1e8>)
 800a5fe:	f7f6 f915 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a602:	2301      	movs	r3, #1
 800a604:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a606:	4b2d      	ldr	r3, [pc, #180]	; (800a6bc <MX_GPIO_Init+0x1f0>)
 800a608:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a60a:	2300      	movs	r3, #0
 800a60c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a60e:	f107 031c 	add.w	r3, r7, #28
 800a612:	4619      	mov	r1, r3
 800a614:	482a      	ldr	r0, [pc, #168]	; (800a6c0 <MX_GPIO_Init+0x1f4>)
 800a616:	f7f6 f909 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800a61a:	2304      	movs	r3, #4
 800a61c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a61e:	2300      	movs	r3, #0
 800a620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a622:	2300      	movs	r3, #0
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800a626:	f107 031c 	add.w	r3, r7, #28
 800a62a:	4619      	mov	r1, r3
 800a62c:	4825      	ldr	r0, [pc, #148]	; (800a6c4 <MX_GPIO_Init+0x1f8>)
 800a62e:	f7f6 f8fd 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800a632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a638:	2302      	movs	r3, #2
 800a63a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a63c:	2300      	movs	r3, #0
 800a63e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a640:	2300      	movs	r3, #0
 800a642:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800a644:	2305      	movs	r3, #5
 800a646:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800a648:	f107 031c 	add.w	r3, r7, #28
 800a64c:	4619      	mov	r1, r3
 800a64e:	481d      	ldr	r0, [pc, #116]	; (800a6c4 <MX_GPIO_Init+0x1f8>)
 800a650:	f7f6 f8ec 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800a654:	f24f 0310 	movw	r3, #61456	; 0xf010
 800a658:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a65a:	2301      	movs	r3, #1
 800a65c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a65e:	2300      	movs	r3, #0
 800a660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a662:	2300      	movs	r3, #0
 800a664:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a666:	f107 031c 	add.w	r3, r7, #28
 800a66a:	4619      	mov	r1, r3
 800a66c:	4812      	ldr	r0, [pc, #72]	; (800a6b8 <MX_GPIO_Init+0x1ec>)
 800a66e:	f7f6 f8dd 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800a672:	2320      	movs	r3, #32
 800a674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a676:	2300      	movs	r3, #0
 800a678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800a67e:	f107 031c 	add.w	r3, r7, #28
 800a682:	4619      	mov	r1, r3
 800a684:	480c      	ldr	r0, [pc, #48]	; (800a6b8 <MX_GPIO_Init+0x1ec>)
 800a686:	f7f6 f8d1 	bl	800082c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800a68a:	2302      	movs	r3, #2
 800a68c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800a68e:	4b0b      	ldr	r3, [pc, #44]	; (800a6bc <MX_GPIO_Init+0x1f0>)
 800a690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a692:	2300      	movs	r3, #0
 800a694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800a696:	f107 031c 	add.w	r3, r7, #28
 800a69a:	4619      	mov	r1, r3
 800a69c:	4804      	ldr	r0, [pc, #16]	; (800a6b0 <MX_GPIO_Init+0x1e4>)
 800a69e:	f7f6 f8c5 	bl	800082c <HAL_GPIO_Init>

}
 800a6a2:	bf00      	nop
 800a6a4:	3730      	adds	r7, #48	; 0x30
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40023800 	.word	0x40023800
 800a6b0:	40021000 	.word	0x40021000
 800a6b4:	40020800 	.word	0x40020800
 800a6b8:	40020c00 	.word	0x40020c00
 800a6bc:	10120000 	.word	0x10120000
 800a6c0:	40020000 	.word	0x40020000
 800a6c4:	40020400 	.word	0x40020400

0800a6c8 <nodemcu_blink>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */

void nodemcu_blink(void const *args) {
 800a6c8:	b590      	push	{r4, r7, lr}
 800a6ca:	b085      	sub	sp, #20
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
	while (1) {
		char buffer1 = '1';
 800a6d0:	2331      	movs	r3, #49	; 0x31
 800a6d2:	73fb      	strb	r3, [r7, #15]
		char buffer0 = '0';
 800a6d4:	2330      	movs	r3, #48	; 0x30
 800a6d6:	73bb      	strb	r3, [r7, #14]
		HAL_UART_Transmit(&huart2, buffer1, strlen(buffer1), 1000);
 800a6d8:	7bfb      	ldrb	r3, [r7, #15]
 800a6da:	461c      	mov	r4, r3
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7f5 fd76 	bl	80001d0 <strlen>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	480d      	ldr	r0, [pc, #52]	; (800a724 <nodemcu_blink+0x5c>)
 800a6f0:	f7f9 fafb 	bl	8003cea <HAL_UART_Transmit>
		HAL_Delay(1000);
 800a6f4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a6f8:	f7f5 ff64 	bl	80005c4 <HAL_Delay>
		HAL_UART_Transmit(&huart2, buffer0, strlen(buffer0), 1000);
 800a6fc:	7bbb      	ldrb	r3, [r7, #14]
 800a6fe:	461c      	mov	r4, r3
 800a700:	7bbb      	ldrb	r3, [r7, #14]
 800a702:	4618      	mov	r0, r3
 800a704:	f7f5 fd64 	bl	80001d0 <strlen>
 800a708:	4603      	mov	r3, r0
 800a70a:	b29a      	uxth	r2, r3
 800a70c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a710:	4621      	mov	r1, r4
 800a712:	4804      	ldr	r0, [pc, #16]	; (800a724 <nodemcu_blink+0x5c>)
 800a714:	f7f9 fae9 	bl	8003cea <HAL_UART_Transmit>
		HAL_Delay(1000);
 800a718:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a71c:	f7f5 ff52 	bl	80005c4 <HAL_Delay>
	while (1) {
 800a720:	e7d6      	b.n	800a6d0 <nodemcu_blink+0x8>
 800a722:	bf00      	nop
 800a724:	200046ac 	.word	0x200046ac

0800a728 <stm32f4_blink>:
	}
}
void stm32f4_blink(void const *args) {
 800a728:	b580      	push	{r7, lr}
 800a72a:	b082      	sub	sp, #8
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
	while (1) {
		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 800a730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a734:	4803      	ldr	r0, [pc, #12]	; (800a744 <stm32f4_blink+0x1c>)
 800a736:	f7f6 fa2c 	bl	8000b92 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 800a73a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a73e:	f7f5 ff41 	bl	80005c4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 800a742:	e7f5      	b.n	800a730 <stm32f4_blink+0x8>
 800a744:	40020c00 	.word	0x40020c00

0800a748 <StartDefaultTask>:

osThreadDef(mcu, nodemcu_blink, osPriorityNormal, 0, 128);
osThreadDef(stm, stm32f4_blink, osPriorityNormal, 0, 128);

void StartDefaultTask(void const * argument)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
    
    
                 
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800a750:	f000 fa0c 	bl	800ab6c <MX_USB_HOST_Init>

  /* USER CODE BEGIN 5 */
  osTimerStart(myTimer01Handle, 25);
 800a754:	4b09      	ldr	r3, [pc, #36]	; (800a77c <StartDefaultTask+0x34>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	2119      	movs	r1, #25
 800a75a:	4618      	mov	r0, r3
 800a75c:	f7fc ff0e 	bl	800757c <osTimerStart>
  osThreadId mcuHandle = osThreadCreate(osThread(mcu), NULL);
 800a760:	2100      	movs	r1, #0
 800a762:	4807      	ldr	r0, [pc, #28]	; (800a780 <StartDefaultTask+0x38>)
 800a764:	f7fc fe75 	bl	8007452 <osThreadCreate>
 800a768:	60f8      	str	r0, [r7, #12]
  osThreadId stmHandle = osThreadCreate(osThread(stm), NULL);
 800a76a:	2100      	movs	r1, #0
 800a76c:	4805      	ldr	r0, [pc, #20]	; (800a784 <StartDefaultTask+0x3c>)
 800a76e:	f7fc fe70 	bl	8007452 <osThreadCreate>
 800a772:	60b8      	str	r0, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800a774:	2001      	movs	r0, #1
 800a776:	f7fc feb8 	bl	80074ea <osDelay>
 800a77a:	e7fb      	b.n	800a774 <StartDefaultTask+0x2c>
 800a77c:	20004650 	.word	0x20004650
 800a780:	0800b474 	.word	0x0800b474
 800a784:	0800b490 	.word	0x0800b490

0800a788 <Callback01>:
  /* USER CODE END 5 */ 
}

/* Callback01 function */
void Callback01(void const * argument)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback01 */
  
  /* USER CODE END Callback01 */
}
 800a790:	bf00      	nop
 800a792:	370c      	adds	r7, #12
 800a794:	46bd      	mov	sp, r7
 800a796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79a:	4770      	bx	lr

0800a79c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a79c:	b480      	push	{r7}
 800a79e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a7a0:	bf00      	nop
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
	...

0800a7ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	607b      	str	r3, [r7, #4]
 800a7b6:	4b12      	ldr	r3, [pc, #72]	; (800a800 <HAL_MspInit+0x54>)
 800a7b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7ba:	4a11      	ldr	r2, [pc, #68]	; (800a800 <HAL_MspInit+0x54>)
 800a7bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a7c0:	6453      	str	r3, [r2, #68]	; 0x44
 800a7c2:	4b0f      	ldr	r3, [pc, #60]	; (800a800 <HAL_MspInit+0x54>)
 800a7c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a7ca:	607b      	str	r3, [r7, #4]
 800a7cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	603b      	str	r3, [r7, #0]
 800a7d2:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <HAL_MspInit+0x54>)
 800a7d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7d6:	4a0a      	ldr	r2, [pc, #40]	; (800a800 <HAL_MspInit+0x54>)
 800a7d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7dc:	6413      	str	r3, [r2, #64]	; 0x40
 800a7de:	4b08      	ldr	r3, [pc, #32]	; (800a800 <HAL_MspInit+0x54>)
 800a7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7e6:	603b      	str	r3, [r7, #0]
 800a7e8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	210f      	movs	r1, #15
 800a7ee:	f06f 0001 	mvn.w	r0, #1
 800a7f2:	f7f5 ffe4 	bl	80007be <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a7f6:	bf00      	nop
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	40023800 	.word	0x40023800

0800a804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b08a      	sub	sp, #40	; 0x28
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a80c:	f107 0314 	add.w	r3, r7, #20
 800a810:	2200      	movs	r2, #0
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	605a      	str	r2, [r3, #4]
 800a816:	609a      	str	r2, [r3, #8]
 800a818:	60da      	str	r2, [r3, #12]
 800a81a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	4a19      	ldr	r2, [pc, #100]	; (800a888 <HAL_I2C_MspInit+0x84>)
 800a822:	4293      	cmp	r3, r2
 800a824:	d12c      	bne.n	800a880 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a826:	2300      	movs	r3, #0
 800a828:	613b      	str	r3, [r7, #16]
 800a82a:	4b18      	ldr	r3, [pc, #96]	; (800a88c <HAL_I2C_MspInit+0x88>)
 800a82c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a82e:	4a17      	ldr	r2, [pc, #92]	; (800a88c <HAL_I2C_MspInit+0x88>)
 800a830:	f043 0302 	orr.w	r3, r3, #2
 800a834:	6313      	str	r3, [r2, #48]	; 0x30
 800a836:	4b15      	ldr	r3, [pc, #84]	; (800a88c <HAL_I2C_MspInit+0x88>)
 800a838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a83a:	f003 0302 	and.w	r3, r3, #2
 800a83e:	613b      	str	r3, [r7, #16]
 800a840:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800a842:	f44f 7310 	mov.w	r3, #576	; 0x240
 800a846:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a848:	2312      	movs	r3, #18
 800a84a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a84c:	2301      	movs	r3, #1
 800a84e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a850:	2300      	movs	r3, #0
 800a852:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a854:	2304      	movs	r3, #4
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a858:	f107 0314 	add.w	r3, r7, #20
 800a85c:	4619      	mov	r1, r3
 800a85e:	480c      	ldr	r0, [pc, #48]	; (800a890 <HAL_I2C_MspInit+0x8c>)
 800a860:	f7f5 ffe4 	bl	800082c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a864:	2300      	movs	r3, #0
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	4b08      	ldr	r3, [pc, #32]	; (800a88c <HAL_I2C_MspInit+0x88>)
 800a86a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86c:	4a07      	ldr	r2, [pc, #28]	; (800a88c <HAL_I2C_MspInit+0x88>)
 800a86e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a872:	6413      	str	r3, [r2, #64]	; 0x40
 800a874:	4b05      	ldr	r3, [pc, #20]	; (800a88c <HAL_I2C_MspInit+0x88>)
 800a876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a878:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a880:	bf00      	nop
 800a882:	3728      	adds	r7, #40	; 0x28
 800a884:	46bd      	mov	sp, r7
 800a886:	bd80      	pop	{r7, pc}
 800a888:	40005400 	.word	0x40005400
 800a88c:	40023800 	.word	0x40023800
 800a890:	40020400 	.word	0x40020400

0800a894 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b08a      	sub	sp, #40	; 0x28
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a89c:	f107 0314 	add.w	r3, r7, #20
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
 800a8a4:	605a      	str	r2, [r3, #4]
 800a8a6:	609a      	str	r2, [r3, #8]
 800a8a8:	60da      	str	r2, [r3, #12]
 800a8aa:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a28      	ldr	r2, [pc, #160]	; (800a954 <HAL_I2S_MspInit+0xc0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d14a      	bne.n	800a94c <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	613b      	str	r3, [r7, #16]
 800a8ba:	4b27      	ldr	r3, [pc, #156]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	4a26      	ldr	r2, [pc, #152]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a8c6:	4b24      	ldr	r3, [pc, #144]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8ce:	613b      	str	r3, [r7, #16]
 800a8d0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	60fb      	str	r3, [r7, #12]
 800a8d6:	4b20      	ldr	r3, [pc, #128]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8da:	4a1f      	ldr	r2, [pc, #124]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8dc:	f043 0301 	orr.w	r3, r3, #1
 800a8e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a8e2:	4b1d      	ldr	r3, [pc, #116]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8e6:	f003 0301 	and.w	r3, r3, #1
 800a8ea:	60fb      	str	r3, [r7, #12]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	60bb      	str	r3, [r7, #8]
 800a8f2:	4b19      	ldr	r3, [pc, #100]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f6:	4a18      	ldr	r2, [pc, #96]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a8f8:	f043 0304 	orr.w	r3, r3, #4
 800a8fc:	6313      	str	r3, [r2, #48]	; 0x30
 800a8fe:	4b16      	ldr	r3, [pc, #88]	; (800a958 <HAL_I2S_MspInit+0xc4>)
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	f003 0304 	and.w	r3, r3, #4
 800a906:	60bb      	str	r3, [r7, #8]
 800a908:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800a90a:	2310      	movs	r3, #16
 800a90c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a90e:	2302      	movs	r3, #2
 800a910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a912:	2300      	movs	r3, #0
 800a914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a916:	2300      	movs	r3, #0
 800a918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a91a:	2306      	movs	r3, #6
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800a91e:	f107 0314 	add.w	r3, r7, #20
 800a922:	4619      	mov	r1, r3
 800a924:	480d      	ldr	r0, [pc, #52]	; (800a95c <HAL_I2S_MspInit+0xc8>)
 800a926:	f7f5 ff81 	bl	800082c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800a92a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800a92e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a930:	2302      	movs	r3, #2
 800a932:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a934:	2300      	movs	r3, #0
 800a936:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a938:	2300      	movs	r3, #0
 800a93a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a93c:	2306      	movs	r3, #6
 800a93e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a940:	f107 0314 	add.w	r3, r7, #20
 800a944:	4619      	mov	r1, r3
 800a946:	4806      	ldr	r0, [pc, #24]	; (800a960 <HAL_I2S_MspInit+0xcc>)
 800a948:	f7f5 ff70 	bl	800082c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800a94c:	bf00      	nop
 800a94e:	3728      	adds	r7, #40	; 0x28
 800a950:	46bd      	mov	sp, r7
 800a952:	bd80      	pop	{r7, pc}
 800a954:	40003c00 	.word	0x40003c00
 800a958:	40023800 	.word	0x40023800
 800a95c:	40020000 	.word	0x40020000
 800a960:	40020800 	.word	0x40020800

0800a964 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b08a      	sub	sp, #40	; 0x28
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a96c:	f107 0314 	add.w	r3, r7, #20
 800a970:	2200      	movs	r2, #0
 800a972:	601a      	str	r2, [r3, #0]
 800a974:	605a      	str	r2, [r3, #4]
 800a976:	609a      	str	r2, [r3, #8]
 800a978:	60da      	str	r2, [r3, #12]
 800a97a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	4a19      	ldr	r2, [pc, #100]	; (800a9e8 <HAL_SPI_MspInit+0x84>)
 800a982:	4293      	cmp	r3, r2
 800a984:	d12b      	bne.n	800a9de <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800a986:	2300      	movs	r3, #0
 800a988:	613b      	str	r3, [r7, #16]
 800a98a:	4b18      	ldr	r3, [pc, #96]	; (800a9ec <HAL_SPI_MspInit+0x88>)
 800a98c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a98e:	4a17      	ldr	r2, [pc, #92]	; (800a9ec <HAL_SPI_MspInit+0x88>)
 800a990:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a994:	6453      	str	r3, [r2, #68]	; 0x44
 800a996:	4b15      	ldr	r3, [pc, #84]	; (800a9ec <HAL_SPI_MspInit+0x88>)
 800a998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a99a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a99e:	613b      	str	r3, [r7, #16]
 800a9a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	60fb      	str	r3, [r7, #12]
 800a9a6:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <HAL_SPI_MspInit+0x88>)
 800a9a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9aa:	4a10      	ldr	r2, [pc, #64]	; (800a9ec <HAL_SPI_MspInit+0x88>)
 800a9ac:	f043 0301 	orr.w	r3, r3, #1
 800a9b0:	6313      	str	r3, [r2, #48]	; 0x30
 800a9b2:	4b0e      	ldr	r3, [pc, #56]	; (800a9ec <HAL_SPI_MspInit+0x88>)
 800a9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	60fb      	str	r3, [r7, #12]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800a9be:	23e0      	movs	r3, #224	; 0xe0
 800a9c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9c2:	2302      	movs	r3, #2
 800a9c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800a9ce:	2305      	movs	r3, #5
 800a9d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a9d2:	f107 0314 	add.w	r3, r7, #20
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	4805      	ldr	r0, [pc, #20]	; (800a9f0 <HAL_SPI_MspInit+0x8c>)
 800a9da:	f7f5 ff27 	bl	800082c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800a9de:	bf00      	nop
 800a9e0:	3728      	adds	r7, #40	; 0x28
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	40013000 	.word	0x40013000
 800a9ec:	40023800 	.word	0x40023800
 800a9f0:	40020000 	.word	0x40020000

0800a9f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08a      	sub	sp, #40	; 0x28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a9fc:	f107 0314 	add.w	r3, r7, #20
 800aa00:	2200      	movs	r2, #0
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	605a      	str	r2, [r3, #4]
 800aa06:	609a      	str	r2, [r3, #8]
 800aa08:	60da      	str	r2, [r3, #12]
 800aa0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	4a19      	ldr	r2, [pc, #100]	; (800aa78 <HAL_UART_MspInit+0x84>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d12b      	bne.n	800aa6e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800aa16:	2300      	movs	r3, #0
 800aa18:	613b      	str	r3, [r7, #16]
 800aa1a:	4b18      	ldr	r3, [pc, #96]	; (800aa7c <HAL_UART_MspInit+0x88>)
 800aa1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa1e:	4a17      	ldr	r2, [pc, #92]	; (800aa7c <HAL_UART_MspInit+0x88>)
 800aa20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa24:	6413      	str	r3, [r2, #64]	; 0x40
 800aa26:	4b15      	ldr	r3, [pc, #84]	; (800aa7c <HAL_UART_MspInit+0x88>)
 800aa28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa2e:	613b      	str	r3, [r7, #16]
 800aa30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa32:	2300      	movs	r3, #0
 800aa34:	60fb      	str	r3, [r7, #12]
 800aa36:	4b11      	ldr	r3, [pc, #68]	; (800aa7c <HAL_UART_MspInit+0x88>)
 800aa38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3a:	4a10      	ldr	r2, [pc, #64]	; (800aa7c <HAL_UART_MspInit+0x88>)
 800aa3c:	f043 0301 	orr.w	r3, r3, #1
 800aa40:	6313      	str	r3, [r2, #48]	; 0x30
 800aa42:	4b0e      	ldr	r3, [pc, #56]	; (800aa7c <HAL_UART_MspInit+0x88>)
 800aa44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa46:	f003 0301 	and.w	r3, r3, #1
 800aa4a:	60fb      	str	r3, [r7, #12]
 800aa4c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800aa4e:	230c      	movs	r3, #12
 800aa50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa52:	2302      	movs	r3, #2
 800aa54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800aa56:	2301      	movs	r3, #1
 800aa58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aa5e:	2307      	movs	r3, #7
 800aa60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa62:	f107 0314 	add.w	r3, r7, #20
 800aa66:	4619      	mov	r1, r3
 800aa68:	4805      	ldr	r0, [pc, #20]	; (800aa80 <HAL_UART_MspInit+0x8c>)
 800aa6a:	f7f5 fedf 	bl	800082c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800aa6e:	bf00      	nop
 800aa70:	3728      	adds	r7, #40	; 0x28
 800aa72:	46bd      	mov	sp, r7
 800aa74:	bd80      	pop	{r7, pc}
 800aa76:	bf00      	nop
 800aa78:	40004400 	.word	0x40004400
 800aa7c:	40023800 	.word	0x40023800
 800aa80:	40020000 	.word	0x40020000

0800aa84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800aa84:	b480      	push	{r7}
 800aa86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800aa88:	bf00      	nop
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800aa92:	b480      	push	{r7}
 800aa94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aa96:	e7fe      	b.n	800aa96 <HardFault_Handler+0x4>

0800aa98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aa98:	b480      	push	{r7}
 800aa9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aa9c:	e7fe      	b.n	800aa9c <MemManage_Handler+0x4>

0800aa9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800aa9e:	b480      	push	{r7}
 800aaa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800aaa2:	e7fe      	b.n	800aaa2 <BusFault_Handler+0x4>

0800aaa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800aaa8:	e7fe      	b.n	800aaa8 <UsageFault_Handler+0x4>

0800aaaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800aaae:	bf00      	nop
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800aabc:	f7f5 fd62 	bl	8000584 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800aac0:	f7fe fab6 	bl	8009030 <xTaskGetSchedulerState>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d001      	beq.n	800aace <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800aaca:	f7ff f8ed 	bl	8009ca8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800aace:	bf00      	nop
 800aad0:	bd80      	pop	{r7, pc}
	...

0800aad4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800aad8:	4802      	ldr	r0, [pc, #8]	; (800aae4 <OTG_FS_IRQHandler+0x10>)
 800aada:	f7f6 fafb 	bl	80010d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800aade:	bf00      	nop
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	20004b0c 	.word	0x20004b0c

0800aae8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b084      	sub	sp, #16
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800aaf0:	4b11      	ldr	r3, [pc, #68]	; (800ab38 <_sbrk+0x50>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <_sbrk+0x16>
		heap_end = &end;
 800aaf8:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <_sbrk+0x50>)
 800aafa:	4a10      	ldr	r2, [pc, #64]	; (800ab3c <_sbrk+0x54>)
 800aafc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800aafe:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <_sbrk+0x50>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <_sbrk+0x50>)
 800ab06:	681a      	ldr	r2, [r3, #0]
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4413      	add	r3, r2
 800ab0c:	466a      	mov	r2, sp
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d907      	bls.n	800ab22 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ab12:	f000 fb57 	bl	800b1c4 <__errno>
 800ab16:	4602      	mov	r2, r0
 800ab18:	230c      	movs	r3, #12
 800ab1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ab1c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab20:	e006      	b.n	800ab30 <_sbrk+0x48>
	}

	heap_end += incr;
 800ab22:	4b05      	ldr	r3, [pc, #20]	; (800ab38 <_sbrk+0x50>)
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4413      	add	r3, r2
 800ab2a:	4a03      	ldr	r2, [pc, #12]	; (800ab38 <_sbrk+0x50>)
 800ab2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	200045a4 	.word	0x200045a4
 800ab3c:	20004dd8 	.word	0x20004dd8

0800ab40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ab40:	b480      	push	{r7}
 800ab42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ab44:	4b08      	ldr	r3, [pc, #32]	; (800ab68 <SystemInit+0x28>)
 800ab46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab4a:	4a07      	ldr	r2, [pc, #28]	; (800ab68 <SystemInit+0x28>)
 800ab4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ab50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ab54:	4b04      	ldr	r3, [pc, #16]	; (800ab68 <SystemInit+0x28>)
 800ab56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ab5a:	609a      	str	r2, [r3, #8]
#endif
}
 800ab5c:	bf00      	nop
 800ab5e:	46bd      	mov	sp, r7
 800ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab64:	4770      	bx	lr
 800ab66:	bf00      	nop
 800ab68:	e000ed00 	.word	0xe000ed00

0800ab6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ab70:	2201      	movs	r2, #1
 800ab72:	490e      	ldr	r1, [pc, #56]	; (800abac <MX_USB_HOST_Init+0x40>)
 800ab74:	480e      	ldr	r0, [pc, #56]	; (800abb0 <MX_USB_HOST_Init+0x44>)
 800ab76:	f7fb f819 	bl	8005bac <USBH_Init>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d001      	beq.n	800ab84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ab80:	f7ff fe0c 	bl	800a79c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ab84:	490b      	ldr	r1, [pc, #44]	; (800abb4 <MX_USB_HOST_Init+0x48>)
 800ab86:	480a      	ldr	r0, [pc, #40]	; (800abb0 <MX_USB_HOST_Init+0x44>)
 800ab88:	f7fb f8ab 	bl	8005ce2 <USBH_RegisterClass>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d001      	beq.n	800ab96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ab92:	f7ff fe03 	bl	800a79c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ab96:	4806      	ldr	r0, [pc, #24]	; (800abb0 <MX_USB_HOST_Init+0x44>)
 800ab98:	f7fb f930 	bl	8005dfc <USBH_Start>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d001      	beq.n	800aba6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800aba2:	f7ff fdfb 	bl	800a79c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800aba6:	bf00      	nop
 800aba8:	bd80      	pop	{r7, pc}
 800abaa:	bf00      	nop
 800abac:	0800abb9 	.word	0x0800abb9
 800abb0:	20004734 	.word	0x20004734
 800abb4:	20000008 	.word	0x20000008

0800abb8 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	460b      	mov	r3, r1
 800abc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800abc4:	78fb      	ldrb	r3, [r7, #3]
 800abc6:	3b01      	subs	r3, #1
 800abc8:	2b04      	cmp	r3, #4
 800abca:	d819      	bhi.n	800ac00 <USBH_UserProcess+0x48>
 800abcc:	a201      	add	r2, pc, #4	; (adr r2, 800abd4 <USBH_UserProcess+0x1c>)
 800abce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd2:	bf00      	nop
 800abd4:	0800ac01 	.word	0x0800ac01
 800abd8:	0800abf1 	.word	0x0800abf1
 800abdc:	0800ac01 	.word	0x0800ac01
 800abe0:	0800abf9 	.word	0x0800abf9
 800abe4:	0800abe9 	.word	0x0800abe9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800abe8:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <USBH_UserProcess+0x58>)
 800abea:	2203      	movs	r2, #3
 800abec:	701a      	strb	r2, [r3, #0]
  break;
 800abee:	e008      	b.n	800ac02 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800abf0:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <USBH_UserProcess+0x58>)
 800abf2:	2202      	movs	r2, #2
 800abf4:	701a      	strb	r2, [r3, #0]
  break;
 800abf6:	e004      	b.n	800ac02 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800abf8:	4b05      	ldr	r3, [pc, #20]	; (800ac10 <USBH_UserProcess+0x58>)
 800abfa:	2201      	movs	r2, #1
 800abfc:	701a      	strb	r2, [r3, #0]
  break;
 800abfe:	e000      	b.n	800ac02 <USBH_UserProcess+0x4a>

  default:
  break;
 800ac00:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ac02:	bf00      	nop
 800ac04:	370c      	adds	r7, #12
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	200045a8 	.word	0x200045a8

0800ac14 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b08a      	sub	sp, #40	; 0x28
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ac1c:	f107 0314 	add.w	r3, r7, #20
 800ac20:	2200      	movs	r2, #0
 800ac22:	601a      	str	r2, [r3, #0]
 800ac24:	605a      	str	r2, [r3, #4]
 800ac26:	609a      	str	r2, [r3, #8]
 800ac28:	60da      	str	r2, [r3, #12]
 800ac2a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ac34:	d147      	bne.n	800acc6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ac36:	2300      	movs	r3, #0
 800ac38:	613b      	str	r3, [r7, #16]
 800ac3a:	4b25      	ldr	r3, [pc, #148]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800ac3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac3e:	4a24      	ldr	r2, [pc, #144]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800ac40:	f043 0301 	orr.w	r3, r3, #1
 800ac44:	6313      	str	r3, [r2, #48]	; 0x30
 800ac46:	4b22      	ldr	r3, [pc, #136]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800ac48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4a:	f003 0301 	and.w	r3, r3, #1
 800ac4e:	613b      	str	r3, [r7, #16]
 800ac50:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ac52:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ac56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ac58:	2300      	movs	r3, #0
 800ac5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ac60:	f107 0314 	add.w	r3, r7, #20
 800ac64:	4619      	mov	r1, r3
 800ac66:	481b      	ldr	r0, [pc, #108]	; (800acd4 <HAL_HCD_MspInit+0xc0>)
 800ac68:	f7f5 fde0 	bl	800082c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ac6c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800ac70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ac72:	2302      	movs	r3, #2
 800ac74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ac76:	2300      	movs	r3, #0
 800ac78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ac7a:	2300      	movs	r3, #0
 800ac7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ac7e:	230a      	movs	r3, #10
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ac82:	f107 0314 	add.w	r3, r7, #20
 800ac86:	4619      	mov	r1, r3
 800ac88:	4812      	ldr	r0, [pc, #72]	; (800acd4 <HAL_HCD_MspInit+0xc0>)
 800ac8a:	f7f5 fdcf 	bl	800082c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ac8e:	4b10      	ldr	r3, [pc, #64]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800ac90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac92:	4a0f      	ldr	r2, [pc, #60]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800ac94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac98:	6353      	str	r3, [r2, #52]	; 0x34
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	4b0c      	ldr	r3, [pc, #48]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800aca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aca2:	4a0b      	ldr	r2, [pc, #44]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800aca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aca8:	6453      	str	r3, [r2, #68]	; 0x44
 800acaa:	4b09      	ldr	r3, [pc, #36]	; (800acd0 <HAL_HCD_MspInit+0xbc>)
 800acac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800acb6:	2200      	movs	r2, #0
 800acb8:	2105      	movs	r1, #5
 800acba:	2043      	movs	r0, #67	; 0x43
 800acbc:	f7f5 fd7f 	bl	80007be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800acc0:	2043      	movs	r0, #67	; 0x43
 800acc2:	f7f5 fd98 	bl	80007f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800acc6:	bf00      	nop
 800acc8:	3728      	adds	r7, #40	; 0x28
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	40023800 	.word	0x40023800
 800acd4:	40020000 	.word	0x40020000

0800acd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b082      	sub	sp, #8
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7fb fbdb 	bl	80064a2 <USBH_LL_IncTimer>
}
 800acec:	bf00      	nop
 800acee:	3708      	adds	r7, #8
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad02:	4618      	mov	r0, r3
 800ad04:	f7fb fc20 	bl	8006548 <USBH_LL_Connect>
}
 800ad08:	bf00      	nop
 800ad0a:	3708      	adds	r7, #8
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b082      	sub	sp, #8
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad1e:	4618      	mov	r0, r3
 800ad20:	f7fb fc46 	bl	80065b0 <USBH_LL_Disconnect>
}
 800ad24:	bf00      	nop
 800ad26:	3708      	adds	r7, #8
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b082      	sub	sp, #8
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70fb      	strb	r3, [r7, #3]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad42:	4618      	mov	r0, r3
 800ad44:	f7fb fc84 	bl	8006650 <USBH_LL_NotifyURBChange>
#endif
}
 800ad48:	bf00      	nop
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad5e:	4618      	mov	r0, r3
 800ad60:	f7fb fbc9 	bl	80064f6 <USBH_LL_PortEnabled>
} 
 800ad64:	bf00      	nop
 800ad66:	3708      	adds	r7, #8
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fb fbc9 	bl	8006512 <USBH_LL_PortDisabled>
} 
 800ad80:	bf00      	nop
 800ad82:	3708      	adds	r7, #8
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}

0800ad88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d12a      	bne.n	800adf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800ad9a:	4a18      	ldr	r2, [pc, #96]	; (800adfc <USBH_LL_Init+0x74>)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	4a15      	ldr	r2, [pc, #84]	; (800adfc <USBH_LL_Init+0x74>)
 800ada6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800adaa:	4b14      	ldr	r3, [pc, #80]	; (800adfc <USBH_LL_Init+0x74>)
 800adac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800adb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800adb2:	4b12      	ldr	r3, [pc, #72]	; (800adfc <USBH_LL_Init+0x74>)
 800adb4:	2208      	movs	r2, #8
 800adb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800adb8:	4b10      	ldr	r3, [pc, #64]	; (800adfc <USBH_LL_Init+0x74>)
 800adba:	2201      	movs	r2, #1
 800adbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800adbe:	4b0f      	ldr	r3, [pc, #60]	; (800adfc <USBH_LL_Init+0x74>)
 800adc0:	2200      	movs	r2, #0
 800adc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800adc4:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <USBH_LL_Init+0x74>)
 800adc6:	2202      	movs	r2, #2
 800adc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800adca:	4b0c      	ldr	r3, [pc, #48]	; (800adfc <USBH_LL_Init+0x74>)
 800adcc:	2200      	movs	r2, #0
 800adce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800add0:	480a      	ldr	r0, [pc, #40]	; (800adfc <USBH_LL_Init+0x74>)
 800add2:	f7f5 fef9 	bl	8000bc8 <HAL_HCD_Init>
 800add6:	4603      	mov	r3, r0
 800add8:	2b00      	cmp	r3, #0
 800adda:	d001      	beq.n	800ade0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800addc:	f7ff fcde 	bl	800a79c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800ade0:	4806      	ldr	r0, [pc, #24]	; (800adfc <USBH_LL_Init+0x74>)
 800ade2:	f7f6 faf5 	bl	80013d0 <HAL_HCD_GetCurrentFrame>
 800ade6:	4603      	mov	r3, r0
 800ade8:	4619      	mov	r1, r3
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f7fb fb4a 	bl	8006484 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3708      	adds	r7, #8
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}
 800adfa:	bf00      	nop
 800adfc:	20004b0c 	.word	0x20004b0c

0800ae00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b084      	sub	sp, #16
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae08:	2300      	movs	r3, #0
 800ae0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7f6 fa62 	bl	80012e0 <HAL_HCD_Start>
 800ae1c:	4603      	mov	r3, r0
 800ae1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae20:	7bfb      	ldrb	r3, [r7, #15]
 800ae22:	4618      	mov	r0, r3
 800ae24:	f000 f95c 	bl	800b0e0 <USBH_Get_USB_Status>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800ae2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}

0800ae36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ae36:	b580      	push	{r7, lr}
 800ae38:	b084      	sub	sp, #16
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ae42:	2300      	movs	r3, #0
 800ae44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7f6 fa6a 	bl	8001326 <HAL_HCD_Stop>
 800ae52:	4603      	mov	r3, r0
 800ae54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ae56:	7bfb      	ldrb	r3, [r7, #15]
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f000 f941 	bl	800b0e0 <USBH_Get_USB_Status>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800ae62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ae74:	2301      	movs	r3, #1
 800ae76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800ae7e:	4618      	mov	r0, r3
 800ae80:	f7f6 fab4 	bl	80013ec <HAL_HCD_GetCurrentSpeed>
 800ae84:	4603      	mov	r3, r0
 800ae86:	2b01      	cmp	r3, #1
 800ae88:	d007      	beq.n	800ae9a <USBH_LL_GetSpeed+0x2e>
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d302      	bcc.n	800ae94 <USBH_LL_GetSpeed+0x28>
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d006      	beq.n	800aea0 <USBH_LL_GetSpeed+0x34>
 800ae92:	e008      	b.n	800aea6 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ae94:	2300      	movs	r3, #0
 800ae96:	73fb      	strb	r3, [r7, #15]
    break;
 800ae98:	e008      	b.n	800aeac <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae9e:	e005      	b.n	800aeac <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800aea0:	2302      	movs	r3, #2
 800aea2:	73fb      	strb	r3, [r7, #15]
    break;
 800aea4:	e002      	b.n	800aeac <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800aea6:	2301      	movs	r3, #1
 800aea8:	73fb      	strb	r3, [r7, #15]
    break;
 800aeaa:	bf00      	nop
  }
  return  speed;
 800aeac:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeae:	4618      	mov	r0, r3
 800aeb0:	3710      	adds	r7, #16
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	bd80      	pop	{r7, pc}

0800aeb6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800aeb6:	b580      	push	{r7, lr}
 800aeb8:	b084      	sub	sp, #16
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800aebe:	2300      	movs	r3, #0
 800aec0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aec2:	2300      	movs	r3, #0
 800aec4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aecc:	4618      	mov	r0, r3
 800aece:	f7f6 fa47 	bl	8001360 <HAL_HCD_ResetPort>
 800aed2:	4603      	mov	r3, r0
 800aed4:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800aed6:	7bfb      	ldrb	r3, [r7, #15]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 f901 	bl	800b0e0 <USBH_Get_USB_Status>
 800aede:	4603      	mov	r3, r0
 800aee0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3710      	adds	r7, #16
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
 800aef4:	460b      	mov	r3, r1
 800aef6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aefe:	78fa      	ldrb	r2, [r7, #3]
 800af00:	4611      	mov	r1, r2
 800af02:	4618      	mov	r0, r3
 800af04:	f7f6 fa4f 	bl	80013a6 <HAL_HCD_HC_GetXferCount>
 800af08:	4603      	mov	r3, r0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}

0800af12 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800af12:	b590      	push	{r4, r7, lr}
 800af14:	b089      	sub	sp, #36	; 0x24
 800af16:	af04      	add	r7, sp, #16
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	4608      	mov	r0, r1
 800af1c:	4611      	mov	r1, r2
 800af1e:	461a      	mov	r2, r3
 800af20:	4603      	mov	r3, r0
 800af22:	70fb      	strb	r3, [r7, #3]
 800af24:	460b      	mov	r3, r1
 800af26:	70bb      	strb	r3, [r7, #2]
 800af28:	4613      	mov	r3, r2
 800af2a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af2c:	2300      	movs	r3, #0
 800af2e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af30:	2300      	movs	r3, #0
 800af32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800af3a:	787c      	ldrb	r4, [r7, #1]
 800af3c:	78ba      	ldrb	r2, [r7, #2]
 800af3e:	78f9      	ldrb	r1, [r7, #3]
 800af40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800af42:	9302      	str	r3, [sp, #8]
 800af44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af48:	9301      	str	r3, [sp, #4]
 800af4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	4623      	mov	r3, r4
 800af52:	f7f5 fe9b 	bl	8000c8c <HAL_HCD_HC_Init>
 800af56:	4603      	mov	r3, r0
 800af58:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800af5a:	7bfb      	ldrb	r3, [r7, #15]
 800af5c:	4618      	mov	r0, r3
 800af5e:	f000 f8bf 	bl	800b0e0 <USBH_Get_USB_Status>
 800af62:	4603      	mov	r3, r0
 800af64:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800af66:	7bbb      	ldrb	r3, [r7, #14]
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3714      	adds	r7, #20
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd90      	pop	{r4, r7, pc}

0800af70 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
 800af78:	460b      	mov	r3, r1
 800af7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af7c:	2300      	movs	r3, #0
 800af7e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800af80:	2300      	movs	r3, #0
 800af82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800af8a:	78fa      	ldrb	r2, [r7, #3]
 800af8c:	4611      	mov	r1, r2
 800af8e:	4618      	mov	r0, r3
 800af90:	f7f5 ff14 	bl	8000dbc <HAL_HCD_HC_Halt>
 800af94:	4603      	mov	r3, r0
 800af96:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800af98:	7bfb      	ldrb	r3, [r7, #15]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f8a0 	bl	800b0e0 <USBH_Get_USB_Status>
 800afa0:	4603      	mov	r3, r0
 800afa2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800afae:	b590      	push	{r4, r7, lr}
 800afb0:	b089      	sub	sp, #36	; 0x24
 800afb2:	af04      	add	r7, sp, #16
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	4608      	mov	r0, r1
 800afb8:	4611      	mov	r1, r2
 800afba:	461a      	mov	r2, r3
 800afbc:	4603      	mov	r3, r0
 800afbe:	70fb      	strb	r3, [r7, #3]
 800afc0:	460b      	mov	r3, r1
 800afc2:	70bb      	strb	r3, [r7, #2]
 800afc4:	4613      	mov	r3, r2
 800afc6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afc8:	2300      	movs	r3, #0
 800afca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800afcc:	2300      	movs	r3, #0
 800afce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 800afd6:	787c      	ldrb	r4, [r7, #1]
 800afd8:	78ba      	ldrb	r2, [r7, #2]
 800afda:	78f9      	ldrb	r1, [r7, #3]
 800afdc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800afe0:	9303      	str	r3, [sp, #12]
 800afe2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800afe4:	9302      	str	r3, [sp, #8]
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	4623      	mov	r3, r4
 800aff2:	f7f5 ff07 	bl	8000e04 <HAL_HCD_HC_SubmitRequest>
 800aff6:	4603      	mov	r3, r0
 800aff8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800affa:	7bfb      	ldrb	r3, [r7, #15]
 800affc:	4618      	mov	r0, r3
 800affe:	f000 f86f 	bl	800b0e0 <USBH_Get_USB_Status>
 800b002:	4603      	mov	r3, r0
 800b004:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b006:	7bbb      	ldrb	r3, [r7, #14]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd90      	pop	{r4, r7, pc}

0800b010 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b082      	sub	sp, #8
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	460b      	mov	r3, r1
 800b01a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b022:	78fa      	ldrb	r2, [r7, #3]
 800b024:	4611      	mov	r1, r2
 800b026:	4618      	mov	r0, r3
 800b028:	f7f6 f9a8 	bl	800137c <HAL_HCD_HC_GetURBState>
 800b02c:	4603      	mov	r3, r0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3708      	adds	r7, #8
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}

0800b036 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	460b      	mov	r3, r1
 800b040:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 800b048:	2b01      	cmp	r3, #1
 800b04a:	d103      	bne.n	800b054 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b04c:	78fb      	ldrb	r3, [r7, #3]
 800b04e:	4618      	mov	r0, r3
 800b050:	f000 f872 	bl	800b138 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b054:	20c8      	movs	r0, #200	; 0xc8
 800b056:	f7f5 fab5 	bl	80005c4 <HAL_Delay>
  return USBH_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b064:	b480      	push	{r7}
 800b066:	b085      	sub	sp, #20
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	460b      	mov	r3, r1
 800b06e:	70fb      	strb	r3, [r7, #3]
 800b070:	4613      	mov	r3, r2
 800b072:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b07a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b07c:	78fa      	ldrb	r2, [r7, #3]
 800b07e:	68f9      	ldr	r1, [r7, #12]
 800b080:	4613      	mov	r3, r2
 800b082:	009b      	lsls	r3, r3, #2
 800b084:	4413      	add	r3, r2
 800b086:	00db      	lsls	r3, r3, #3
 800b088:	440b      	add	r3, r1
 800b08a:	333b      	adds	r3, #59	; 0x3b
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d00a      	beq.n	800b0a8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b092:	78fa      	ldrb	r2, [r7, #3]
 800b094:	68f9      	ldr	r1, [r7, #12]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	00db      	lsls	r3, r3, #3
 800b09e:	440b      	add	r3, r1
 800b0a0:	3350      	adds	r3, #80	; 0x50
 800b0a2:	78ba      	ldrb	r2, [r7, #2]
 800b0a4:	701a      	strb	r2, [r3, #0]
 800b0a6:	e009      	b.n	800b0bc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b0a8:	78fa      	ldrb	r2, [r7, #3]
 800b0aa:	68f9      	ldr	r1, [r7, #12]
 800b0ac:	4613      	mov	r3, r2
 800b0ae:	009b      	lsls	r3, r3, #2
 800b0b0:	4413      	add	r3, r2
 800b0b2:	00db      	lsls	r3, r3, #3
 800b0b4:	440b      	add	r3, r1
 800b0b6:	3351      	adds	r3, #81	; 0x51
 800b0b8:	78ba      	ldrb	r2, [r7, #2]
 800b0ba:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3714      	adds	r7, #20
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b082      	sub	sp, #8
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7f5 fa76 	bl	80005c4 <HAL_Delay>
}
 800b0d8:	bf00      	nop
 800b0da:	3708      	adds	r7, #8
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	bd80      	pop	{r7, pc}

0800b0e0 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b0e0:	b480      	push	{r7}
 800b0e2:	b085      	sub	sp, #20
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b0ee:	79fb      	ldrb	r3, [r7, #7]
 800b0f0:	2b03      	cmp	r3, #3
 800b0f2:	d817      	bhi.n	800b124 <USBH_Get_USB_Status+0x44>
 800b0f4:	a201      	add	r2, pc, #4	; (adr r2, 800b0fc <USBH_Get_USB_Status+0x1c>)
 800b0f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0fa:	bf00      	nop
 800b0fc:	0800b10d 	.word	0x0800b10d
 800b100:	0800b113 	.word	0x0800b113
 800b104:	0800b119 	.word	0x0800b119
 800b108:	0800b11f 	.word	0x0800b11f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b10c:	2300      	movs	r3, #0
 800b10e:	73fb      	strb	r3, [r7, #15]
    break;
 800b110:	e00b      	b.n	800b12a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b112:	2302      	movs	r3, #2
 800b114:	73fb      	strb	r3, [r7, #15]
    break;
 800b116:	e008      	b.n	800b12a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b118:	2301      	movs	r3, #1
 800b11a:	73fb      	strb	r3, [r7, #15]
    break;
 800b11c:	e005      	b.n	800b12a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b11e:	2302      	movs	r3, #2
 800b120:	73fb      	strb	r3, [r7, #15]
    break;
 800b122:	e002      	b.n	800b12a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b124:	2302      	movs	r3, #2
 800b126:	73fb      	strb	r3, [r7, #15]
    break;
 800b128:	bf00      	nop
  }
  return usb_status;
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3714      	adds	r7, #20
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	4603      	mov	r3, r0
 800b140:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d102      	bne.n	800b152 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 800b14c:	2301      	movs	r3, #1
 800b14e:	73fb      	strb	r3, [r7, #15]
 800b150:	e001      	b.n	800b156 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	461a      	mov	r2, r3
 800b15a:	2101      	movs	r1, #1
 800b15c:	4803      	ldr	r0, [pc, #12]	; (800b16c <MX_DriverVbusFS+0x34>)
 800b15e:	f7f5 fcff 	bl	8000b60 <HAL_GPIO_WritePin>
}
 800b162:	bf00      	nop
 800b164:	3710      	adds	r7, #16
 800b166:	46bd      	mov	sp, r7
 800b168:	bd80      	pop	{r7, pc}
 800b16a:	bf00      	nop
 800b16c:	40020800 	.word	0x40020800

0800b170 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800b170:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b1a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b174:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b176:	e003      	b.n	800b180 <LoopCopyDataInit>

0800b178 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b178:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b17a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b17c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b17e:	3104      	adds	r1, #4

0800b180 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b180:	480b      	ldr	r0, [pc, #44]	; (800b1b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b182:	4b0c      	ldr	r3, [pc, #48]	; (800b1b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b184:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b186:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b188:	d3f6      	bcc.n	800b178 <CopyDataInit>
  ldr  r2, =_sbss
 800b18a:	4a0b      	ldr	r2, [pc, #44]	; (800b1b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b18c:	e002      	b.n	800b194 <LoopFillZerobss>

0800b18e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b18e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b190:	f842 3b04 	str.w	r3, [r2], #4

0800b194 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b194:	4b09      	ldr	r3, [pc, #36]	; (800b1bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b196:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b198:	d3f9      	bcc.n	800b18e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b19a:	f7ff fcd1 	bl	800ab40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b19e:	f000 f817 	bl	800b1d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b1a2:	f7ff f817 	bl	800a1d4 <main>
  bx  lr    
 800b1a6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800b1a8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b1ac:	0800b4d4 	.word	0x0800b4d4
  ldr  r0, =_sdata
 800b1b0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b1b4:	20000094 	.word	0x20000094
  ldr  r2, =_sbss
 800b1b8:	20000094 	.word	0x20000094
  ldr  r3, = _ebss
 800b1bc:	20004dd4 	.word	0x20004dd4

0800b1c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b1c0:	e7fe      	b.n	800b1c0 <ADC_IRQHandler>
	...

0800b1c4 <__errno>:
 800b1c4:	4b01      	ldr	r3, [pc, #4]	; (800b1cc <__errno+0x8>)
 800b1c6:	6818      	ldr	r0, [r3, #0]
 800b1c8:	4770      	bx	lr
 800b1ca:	bf00      	nop
 800b1cc:	20000030 	.word	0x20000030

0800b1d0 <__libc_init_array>:
 800b1d0:	b570      	push	{r4, r5, r6, lr}
 800b1d2:	4e0d      	ldr	r6, [pc, #52]	; (800b208 <__libc_init_array+0x38>)
 800b1d4:	4c0d      	ldr	r4, [pc, #52]	; (800b20c <__libc_init_array+0x3c>)
 800b1d6:	1ba4      	subs	r4, r4, r6
 800b1d8:	10a4      	asrs	r4, r4, #2
 800b1da:	2500      	movs	r5, #0
 800b1dc:	42a5      	cmp	r5, r4
 800b1de:	d109      	bne.n	800b1f4 <__libc_init_array+0x24>
 800b1e0:	4e0b      	ldr	r6, [pc, #44]	; (800b210 <__libc_init_array+0x40>)
 800b1e2:	4c0c      	ldr	r4, [pc, #48]	; (800b214 <__libc_init_array+0x44>)
 800b1e4:	f000 f8f6 	bl	800b3d4 <_init>
 800b1e8:	1ba4      	subs	r4, r4, r6
 800b1ea:	10a4      	asrs	r4, r4, #2
 800b1ec:	2500      	movs	r5, #0
 800b1ee:	42a5      	cmp	r5, r4
 800b1f0:	d105      	bne.n	800b1fe <__libc_init_array+0x2e>
 800b1f2:	bd70      	pop	{r4, r5, r6, pc}
 800b1f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b1f8:	4798      	blx	r3
 800b1fa:	3501      	adds	r5, #1
 800b1fc:	e7ee      	b.n	800b1dc <__libc_init_array+0xc>
 800b1fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b202:	4798      	blx	r3
 800b204:	3501      	adds	r5, #1
 800b206:	e7f2      	b.n	800b1ee <__libc_init_array+0x1e>
 800b208:	0800b4cc 	.word	0x0800b4cc
 800b20c:	0800b4cc 	.word	0x0800b4cc
 800b210:	0800b4cc 	.word	0x0800b4cc
 800b214:	0800b4d0 	.word	0x0800b4d0

0800b218 <malloc>:
 800b218:	4b02      	ldr	r3, [pc, #8]	; (800b224 <malloc+0xc>)
 800b21a:	4601      	mov	r1, r0
 800b21c:	6818      	ldr	r0, [r3, #0]
 800b21e:	f000 b86d 	b.w	800b2fc <_malloc_r>
 800b222:	bf00      	nop
 800b224:	20000030 	.word	0x20000030

0800b228 <free>:
 800b228:	4b02      	ldr	r3, [pc, #8]	; (800b234 <free+0xc>)
 800b22a:	4601      	mov	r1, r0
 800b22c:	6818      	ldr	r0, [r3, #0]
 800b22e:	f000 b817 	b.w	800b260 <_free_r>
 800b232:	bf00      	nop
 800b234:	20000030 	.word	0x20000030

0800b238 <memcpy>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	1e43      	subs	r3, r0, #1
 800b23c:	440a      	add	r2, r1
 800b23e:	4291      	cmp	r1, r2
 800b240:	d100      	bne.n	800b244 <memcpy+0xc>
 800b242:	bd10      	pop	{r4, pc}
 800b244:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b248:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b24c:	e7f7      	b.n	800b23e <memcpy+0x6>

0800b24e <memset>:
 800b24e:	4402      	add	r2, r0
 800b250:	4603      	mov	r3, r0
 800b252:	4293      	cmp	r3, r2
 800b254:	d100      	bne.n	800b258 <memset+0xa>
 800b256:	4770      	bx	lr
 800b258:	f803 1b01 	strb.w	r1, [r3], #1
 800b25c:	e7f9      	b.n	800b252 <memset+0x4>
	...

0800b260 <_free_r>:
 800b260:	b538      	push	{r3, r4, r5, lr}
 800b262:	4605      	mov	r5, r0
 800b264:	2900      	cmp	r1, #0
 800b266:	d045      	beq.n	800b2f4 <_free_r+0x94>
 800b268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26c:	1f0c      	subs	r4, r1, #4
 800b26e:	2b00      	cmp	r3, #0
 800b270:	bfb8      	it	lt
 800b272:	18e4      	addlt	r4, r4, r3
 800b274:	f000 f8ac 	bl	800b3d0 <__malloc_lock>
 800b278:	4a1f      	ldr	r2, [pc, #124]	; (800b2f8 <_free_r+0x98>)
 800b27a:	6813      	ldr	r3, [r2, #0]
 800b27c:	4610      	mov	r0, r2
 800b27e:	b933      	cbnz	r3, 800b28e <_free_r+0x2e>
 800b280:	6063      	str	r3, [r4, #4]
 800b282:	6014      	str	r4, [r2, #0]
 800b284:	4628      	mov	r0, r5
 800b286:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b28a:	f000 b8a2 	b.w	800b3d2 <__malloc_unlock>
 800b28e:	42a3      	cmp	r3, r4
 800b290:	d90c      	bls.n	800b2ac <_free_r+0x4c>
 800b292:	6821      	ldr	r1, [r4, #0]
 800b294:	1862      	adds	r2, r4, r1
 800b296:	4293      	cmp	r3, r2
 800b298:	bf04      	itt	eq
 800b29a:	681a      	ldreq	r2, [r3, #0]
 800b29c:	685b      	ldreq	r3, [r3, #4]
 800b29e:	6063      	str	r3, [r4, #4]
 800b2a0:	bf04      	itt	eq
 800b2a2:	1852      	addeq	r2, r2, r1
 800b2a4:	6022      	streq	r2, [r4, #0]
 800b2a6:	6004      	str	r4, [r0, #0]
 800b2a8:	e7ec      	b.n	800b284 <_free_r+0x24>
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	685a      	ldr	r2, [r3, #4]
 800b2ae:	b10a      	cbz	r2, 800b2b4 <_free_r+0x54>
 800b2b0:	42a2      	cmp	r2, r4
 800b2b2:	d9fa      	bls.n	800b2aa <_free_r+0x4a>
 800b2b4:	6819      	ldr	r1, [r3, #0]
 800b2b6:	1858      	adds	r0, r3, r1
 800b2b8:	42a0      	cmp	r0, r4
 800b2ba:	d10b      	bne.n	800b2d4 <_free_r+0x74>
 800b2bc:	6820      	ldr	r0, [r4, #0]
 800b2be:	4401      	add	r1, r0
 800b2c0:	1858      	adds	r0, r3, r1
 800b2c2:	4282      	cmp	r2, r0
 800b2c4:	6019      	str	r1, [r3, #0]
 800b2c6:	d1dd      	bne.n	800b284 <_free_r+0x24>
 800b2c8:	6810      	ldr	r0, [r2, #0]
 800b2ca:	6852      	ldr	r2, [r2, #4]
 800b2cc:	605a      	str	r2, [r3, #4]
 800b2ce:	4401      	add	r1, r0
 800b2d0:	6019      	str	r1, [r3, #0]
 800b2d2:	e7d7      	b.n	800b284 <_free_r+0x24>
 800b2d4:	d902      	bls.n	800b2dc <_free_r+0x7c>
 800b2d6:	230c      	movs	r3, #12
 800b2d8:	602b      	str	r3, [r5, #0]
 800b2da:	e7d3      	b.n	800b284 <_free_r+0x24>
 800b2dc:	6820      	ldr	r0, [r4, #0]
 800b2de:	1821      	adds	r1, r4, r0
 800b2e0:	428a      	cmp	r2, r1
 800b2e2:	bf04      	itt	eq
 800b2e4:	6811      	ldreq	r1, [r2, #0]
 800b2e6:	6852      	ldreq	r2, [r2, #4]
 800b2e8:	6062      	str	r2, [r4, #4]
 800b2ea:	bf04      	itt	eq
 800b2ec:	1809      	addeq	r1, r1, r0
 800b2ee:	6021      	streq	r1, [r4, #0]
 800b2f0:	605c      	str	r4, [r3, #4]
 800b2f2:	e7c7      	b.n	800b284 <_free_r+0x24>
 800b2f4:	bd38      	pop	{r3, r4, r5, pc}
 800b2f6:	bf00      	nop
 800b2f8:	200045ac 	.word	0x200045ac

0800b2fc <_malloc_r>:
 800b2fc:	b570      	push	{r4, r5, r6, lr}
 800b2fe:	1ccd      	adds	r5, r1, #3
 800b300:	f025 0503 	bic.w	r5, r5, #3
 800b304:	3508      	adds	r5, #8
 800b306:	2d0c      	cmp	r5, #12
 800b308:	bf38      	it	cc
 800b30a:	250c      	movcc	r5, #12
 800b30c:	2d00      	cmp	r5, #0
 800b30e:	4606      	mov	r6, r0
 800b310:	db01      	blt.n	800b316 <_malloc_r+0x1a>
 800b312:	42a9      	cmp	r1, r5
 800b314:	d903      	bls.n	800b31e <_malloc_r+0x22>
 800b316:	230c      	movs	r3, #12
 800b318:	6033      	str	r3, [r6, #0]
 800b31a:	2000      	movs	r0, #0
 800b31c:	bd70      	pop	{r4, r5, r6, pc}
 800b31e:	f000 f857 	bl	800b3d0 <__malloc_lock>
 800b322:	4a21      	ldr	r2, [pc, #132]	; (800b3a8 <_malloc_r+0xac>)
 800b324:	6814      	ldr	r4, [r2, #0]
 800b326:	4621      	mov	r1, r4
 800b328:	b991      	cbnz	r1, 800b350 <_malloc_r+0x54>
 800b32a:	4c20      	ldr	r4, [pc, #128]	; (800b3ac <_malloc_r+0xb0>)
 800b32c:	6823      	ldr	r3, [r4, #0]
 800b32e:	b91b      	cbnz	r3, 800b338 <_malloc_r+0x3c>
 800b330:	4630      	mov	r0, r6
 800b332:	f000 f83d 	bl	800b3b0 <_sbrk_r>
 800b336:	6020      	str	r0, [r4, #0]
 800b338:	4629      	mov	r1, r5
 800b33a:	4630      	mov	r0, r6
 800b33c:	f000 f838 	bl	800b3b0 <_sbrk_r>
 800b340:	1c43      	adds	r3, r0, #1
 800b342:	d124      	bne.n	800b38e <_malloc_r+0x92>
 800b344:	230c      	movs	r3, #12
 800b346:	6033      	str	r3, [r6, #0]
 800b348:	4630      	mov	r0, r6
 800b34a:	f000 f842 	bl	800b3d2 <__malloc_unlock>
 800b34e:	e7e4      	b.n	800b31a <_malloc_r+0x1e>
 800b350:	680b      	ldr	r3, [r1, #0]
 800b352:	1b5b      	subs	r3, r3, r5
 800b354:	d418      	bmi.n	800b388 <_malloc_r+0x8c>
 800b356:	2b0b      	cmp	r3, #11
 800b358:	d90f      	bls.n	800b37a <_malloc_r+0x7e>
 800b35a:	600b      	str	r3, [r1, #0]
 800b35c:	50cd      	str	r5, [r1, r3]
 800b35e:	18cc      	adds	r4, r1, r3
 800b360:	4630      	mov	r0, r6
 800b362:	f000 f836 	bl	800b3d2 <__malloc_unlock>
 800b366:	f104 000b 	add.w	r0, r4, #11
 800b36a:	1d23      	adds	r3, r4, #4
 800b36c:	f020 0007 	bic.w	r0, r0, #7
 800b370:	1ac3      	subs	r3, r0, r3
 800b372:	d0d3      	beq.n	800b31c <_malloc_r+0x20>
 800b374:	425a      	negs	r2, r3
 800b376:	50e2      	str	r2, [r4, r3]
 800b378:	e7d0      	b.n	800b31c <_malloc_r+0x20>
 800b37a:	428c      	cmp	r4, r1
 800b37c:	684b      	ldr	r3, [r1, #4]
 800b37e:	bf16      	itet	ne
 800b380:	6063      	strne	r3, [r4, #4]
 800b382:	6013      	streq	r3, [r2, #0]
 800b384:	460c      	movne	r4, r1
 800b386:	e7eb      	b.n	800b360 <_malloc_r+0x64>
 800b388:	460c      	mov	r4, r1
 800b38a:	6849      	ldr	r1, [r1, #4]
 800b38c:	e7cc      	b.n	800b328 <_malloc_r+0x2c>
 800b38e:	1cc4      	adds	r4, r0, #3
 800b390:	f024 0403 	bic.w	r4, r4, #3
 800b394:	42a0      	cmp	r0, r4
 800b396:	d005      	beq.n	800b3a4 <_malloc_r+0xa8>
 800b398:	1a21      	subs	r1, r4, r0
 800b39a:	4630      	mov	r0, r6
 800b39c:	f000 f808 	bl	800b3b0 <_sbrk_r>
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d0cf      	beq.n	800b344 <_malloc_r+0x48>
 800b3a4:	6025      	str	r5, [r4, #0]
 800b3a6:	e7db      	b.n	800b360 <_malloc_r+0x64>
 800b3a8:	200045ac 	.word	0x200045ac
 800b3ac:	200045b0 	.word	0x200045b0

0800b3b0 <_sbrk_r>:
 800b3b0:	b538      	push	{r3, r4, r5, lr}
 800b3b2:	4c06      	ldr	r4, [pc, #24]	; (800b3cc <_sbrk_r+0x1c>)
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	4605      	mov	r5, r0
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	6023      	str	r3, [r4, #0]
 800b3bc:	f7ff fb94 	bl	800aae8 <_sbrk>
 800b3c0:	1c43      	adds	r3, r0, #1
 800b3c2:	d102      	bne.n	800b3ca <_sbrk_r+0x1a>
 800b3c4:	6823      	ldr	r3, [r4, #0]
 800b3c6:	b103      	cbz	r3, 800b3ca <_sbrk_r+0x1a>
 800b3c8:	602b      	str	r3, [r5, #0]
 800b3ca:	bd38      	pop	{r3, r4, r5, pc}
 800b3cc:	20004dd0 	.word	0x20004dd0

0800b3d0 <__malloc_lock>:
 800b3d0:	4770      	bx	lr

0800b3d2 <__malloc_unlock>:
 800b3d2:	4770      	bx	lr

0800b3d4 <_init>:
 800b3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3d6:	bf00      	nop
 800b3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3da:	bc08      	pop	{r3}
 800b3dc:	469e      	mov	lr, r3
 800b3de:	4770      	bx	lr

0800b3e0 <_fini>:
 800b3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3e2:	bf00      	nop
 800b3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b3e6:	bc08      	pop	{r3}
 800b3e8:	469e      	mov	lr, r3
 800b3ea:	4770      	bx	lr
